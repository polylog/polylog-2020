!function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],(function(i){return n(i,e,t),i.mobile})):n(e.jQuery,e,t)}(this,document,(function(e,t,n,i){!function(e,t,n,i){var o,r,a="virtualMouseBindings",s="virtualTouchID",l="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),c="clientX clientY pageX pageY screenX screenY".split(" "),u=e.event.mouseHooks?e.event.mouseHooks.props:[],d=e.event.props.concat(u),p={},f=0,h=0,m=0,g=!1,v=[],_=!1,y=!1,w="addEventListener"in n,b=e(n),C=1,E=0;function I(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function T(t){for(var n,i,o={};t;){for(i in n=e.data(t,a))n[i]&&(o[i]=o.hasVirtualBinding=!0);t=t.parentNode}return o}function S(){y=!0}function k(){y=!1}function A(){D(),f=setTimeout((function(){f=0,E=0,v.length=0,_=!1,S()}),e.vmouse.resetTimerDuration)}function D(){f&&(clearTimeout(f),f=0)}function x(t,n,i){var o;return(i&&i[t]||!i&&function(t,n){for(var i;t;){if((i=e.data(t,a))&&(!n||i[n]))return t;t=t.parentNode}return null}(n.target,t))&&(o=function(t,n){var i,o,r,a,s,l,u,p,f,h=t.type;if((t=e.Event(t)).type=n,i=t.originalEvent,o=e.event.props,h.search(/^(mouse|click)/)>-1&&(o=d),i)for(u=o.length;u;)t[a=o[--u]]=i[a];if(h.search(/mouse(down|up)|click/)>-1&&!t.which&&(t.which=1),-1!==h.search(/^touch/)&&(h=(r=I(i)).touches,s=r.changedTouches,l=h&&h.length?h[0]:s&&s.length?s[0]:void 0))for(p=0,f=c.length;p<f;p++)t[a=c[p]]=l[a];return t}(n,t),e(n.target).trigger(o)),o}function O(t){var n,i=e.data(t.target,s);_||E&&E===i||(n=x("v"+t.type,t))&&(n.isDefaultPrevented()&&t.preventDefault(),n.isPropagationStopped()&&t.stopPropagation(),n.isImmediatePropagationStopped()&&t.stopImmediatePropagation())}function P(t){var n,i,o,r=I(t).touches;r&&1===r.length&&(i=T(n=t.target)).hasVirtualBinding&&(E=C++,e.data(n,s,E),D(),k(),g=!1,o=I(t).touches[0],h=o.pageX,m=o.pageY,x("vmouseover",t,i),x("vmousedown",t,i))}function N(e){y||(g||x("vmousecancel",e,T(e.target)),g=!0,A())}function M(t){if(!y){var n=I(t).touches[0],i=g,o=e.vmouse.moveDistanceThreshold,r=T(t.target);(g=g||Math.abs(n.pageX-h)>o||Math.abs(n.pageY-m)>o)&&!i&&x("vmousecancel",t,r),x("vmousemove",t,r),A()}}function L(e){if(!y){S();var t,n,i=T(e.target);x("vmouseup",e,i),g||(t=x("vclick",e,i))&&t.isDefaultPrevented()&&(n=I(e).changedTouches[0],v.push({touchID:E,x:n.clientX,y:n.clientY}),_=!0),x("vmouseout",e,i),g=!1,A()}}function j(t){var n,i=e.data(t,a);if(i)for(n in i)if(i[n])return!0;return!1}function W(){}function H(t){var n=t.substr(1);return{setup:function(){j(this)||e.data(this,a,{}),e.data(this,a)[t]=!0,p[t]=(p[t]||0)+1,1===p[t]&&b.bind(n,O),e(this).bind(n,W),w&&(p.touchstart=(p.touchstart||0)+1,1===p.touchstart&&b.bind("touchstart",P).bind("touchend",L).bind("touchmove",M).bind("scroll",N))},teardown:function(){--p[t],p[t]||b.unbind(n,O),w&&(--p.touchstart,p.touchstart||b.unbind("touchstart",P).unbind("touchmove",M).unbind("touchend",L).unbind("scroll",N));var i=e(this),o=e.data(this,a);o&&(o[t]=!1),i.unbind(n,W),j(this)||i.removeData(a)}}}for(e.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500},r=0;r<l.length;r++)e.event.special[l[r]]=H(l[r]);w&&n.addEventListener("click",(function(t){var n,i,r,a,l,c=v.length,u=t.target;if(c)for(n=t.clientX,i=t.clientY,o=e.vmouse.clickDistanceThreshold,r=u;r;){for(a=0;a<c;a++)if(l=v[a],0,r===u&&Math.abs(l.x-n)<o&&Math.abs(l.y-i)<o||e.data(r,s)===l.touchID)return t.preventDefault(),void t.stopPropagation();r=r.parentNode}}),!0)}(e,0,n),e.mobile={},function(e,t){var i={touch:"ontouchend"in n};e.mobile.support=e.mobile.support||{},e.extend(e.support,i),e.extend(e.mobile.support,i)}(e),function(e,t,i){var o=e(n),r=e.mobile.support.touch,a="touchmove scroll",s=r?"touchstart":"mousedown",l=r?"touchend":"mouseup",c=r?"touchmove":"mousemove";function u(t,n,i,o){var r=i.type;i.type=n,o?e.event.trigger(i,undefined,t):e.event.dispatch.call(t,i),i.type=r}e.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),(function(t,n){e.fn[n]=function(e){return e?this.bind(n,e):this.trigger(n)},e.attrFn&&(e.attrFn[n]=!0)})),e.event.special.scrollstart={enabled:!0,setup:function(){var t,n,i=this;function o(e,n){u(i,(t=n)?"scrollstart":"scrollstop",e)}e(i).bind(a,(function(i){e.event.special.scrollstart.enabled&&(t||o(i,!0),clearTimeout(n),n=setTimeout((function(){o(i,!1)}),50))}))},teardown:function(){e(this).unbind(a)}},e.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var t=this,n=e(t),i=!1;n.bind("vmousedown",(function(r){if(i=!1,r.which&&1!==r.which)return!1;var a,s=r.target;function l(){clearTimeout(a)}function c(){l(),n.unbind("vclick",d).unbind("vmouseup",l),o.unbind("vmousecancel",c)}function d(e){c(),i||s!==e.target?i&&e.preventDefault():u(t,"tap",e)}n.bind("vmouseup",l).bind("vclick",d),o.bind("vmousecancel",c),a=setTimeout((function(){e.event.special.tap.emitTapOnTaphold||(i=!0),u(t,"taphold",e.Event("taphold",{target:s}))}),e.event.special.tap.tapholdThreshold)}))},teardown:function(){e(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),o.unbind("vmousecancel")}},e.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var n=t.pageXOffset,i=t.pageYOffset,o=e.clientX,r=e.clientY;return 0===e.pageY&&Math.floor(r)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(o)>Math.floor(e.pageX)?(o-=n,r-=i):(r<e.pageY-i||o<e.pageX-n)&&(o=e.pageX-n,r=e.pageY-i),{x:o,y:r}},start:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,i=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[i.x,i.y],origin:e(t.target)}},stop:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,i=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[i.x,i.y]}},handleSwipe:function(t,n,i,o){if(n.time-t.time<e.event.special.swipe.durationThreshold&&Math.abs(t.coords[0]-n.coords[0])>e.event.special.swipe.horizontalDistanceThreshold&&Math.abs(t.coords[1]-n.coords[1])<e.event.special.swipe.verticalDistanceThreshold){var r=t.coords[0]>n.coords[0]?"swipeleft":"swiperight";return u(i,"swipe",e.Event("swipe",{target:o,swipestart:t,swipestop:n}),!0),u(i,r,e.Event(r,{target:o,swipestart:t,swipestop:n}),!0),!0}return!1},eventInProgress:!1,setup:function(){var t,n=this,i=e(n),r={};(t=e.data(this,"mobile-events"))||(t={length:0},e.data(this,"mobile-events",t)),t.length++,t.swipe=r,r.start=function(t){if(!e.event.special.swipe.eventInProgress){e.event.special.swipe.eventInProgress=!0;var i,a=e.event.special.swipe.start(t),s=t.target,u=!1;r.move=function(t){a&&!t.isDefaultPrevented()&&(i=e.event.special.swipe.stop(t),u||(u=e.event.special.swipe.handleSwipe(a,i,n,s))&&(e.event.special.swipe.eventInProgress=!1),Math.abs(a.coords[0]-i.coords[0])>e.event.special.swipe.scrollSupressionThreshold&&t.preventDefault())},r.stop=function(){u=!0,e.event.special.swipe.eventInProgress=!1,o.off(c,r.move),r.move=null},o.on(c,r.move).one(l,r.stop)}},i.on(s,r.start)},teardown:function(){var t,n;(t=e.data(this,"mobile-events"))&&(n=t.swipe,delete t.swipe,t.length--,0===t.length&&e.removeData(this,"mobile-events")),n&&(n.start&&e(this).off(s,n.start),n.move&&o.off(c,n.move),n.stop&&o.off(l,n.stop))}},e.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},(function(t,n){e.event.special[t]={setup:function(){e(this).bind(n,e.noop)},teardown:function(){e(this).unbind(n)}}}))}(e,this)}));var Util=function(e){var t=!1,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};function i(e){return{}.toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function o(t){var n=this,i=!1;return e(this).one(r.TRANSITION_END,(function(){i=!0})),setTimeout((function(){i||r.triggerTransitionEnd(n)}),t),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");return t||(t=e.getAttribute("href")||"",t=/^#[a-z]/i.test(t)?t:null),t},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t.end)},supportsTransitionEnd:function(){return Boolean(t)},typeCheckConfig:function(e,t,n){for(var o in n)if(n.hasOwnProperty(o)){var r=n[o],a=t[o],s=a&&((l=a)[0]||l).nodeType?"element":i(a);if(!new RegExp(r).test(s))throw new Error(e.toUpperCase()+': Option "'+o+'" provided type "'+s+'" but expected type "'+r+'".')}var l}};return t=function(){if(window.QUnit)return!1;var e=document.createElement("bootstrap");for(var t in n)if(void 0!==e.style[t])return{end:n[t]};return!1}(),e.fn.emulateTransitionEnd=o,r.supportsTransitionEnd()&&(e.event.special[r.TRANSITION_END]={bindType:t.end,delegateType:t.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),r}(jQuery),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Alert=function(e){var t="bs.alert",n=e.fn.alert,i={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},o="alert",r="fade",a="show",s=function(){function n(e){_classCallCheck(this,n),this._element=e}return n.prototype.close=function(e){e=e||this._element;var t=this._getRootElement(e);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},n.prototype.dispose=function(){e.removeData(this._element,t),this._element=null},n.prototype._getRootElement=function(t){var n=Util.getSelectorFromElement(t),i=!1;return n&&(i=e(n)[0]),i||(i=e(t).closest("."+o)[0]),i},n.prototype._triggerCloseEvent=function(t){var n=e.Event(i.CLOSE);return e(t).trigger(n),n},n.prototype._removeElement=function(t){var n=this;e(t).removeClass(a),Util.supportsTransitionEnd()&&e(t).hasClass(r)?e(t).one(Util.TRANSITION_END,(function(e){return n._destroyElement(t,e)})).emulateTransitionEnd(150):this._destroyElement(t)},n.prototype._destroyElement=function(t){e(t).detach().trigger(i.CLOSED).remove()},n._jQueryInterface=function(i){return this.each((function(){var o=e(this),r=o.data(t);r||(r=new n(this),o.data(t,r)),"close"===i&&r[i](this)}))},n._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),n}();return e(document).on(i.CLICK_DATA_API,'[data-dismiss="alert"]',s._handleDismiss(new s)),e.fn.alert=s._jQueryInterface,e.fn.alert.Constructor=s,e.fn.alert.noConflict=function(){return e.fn.alert=n,s._jQueryInterface},s}(jQuery);_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Button=function(e){var t="button",n="bs.button",i=e.fn[t],o="active",r="btn",a="focus",s='[data-toggle^="button"]',l='[data-toggle="buttons"]',c="input",u=".active",d=".btn",p={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},f=function(){function t(e){_classCallCheck(this,t),this._element=e}return t.prototype.toggle=function(){var t=!0,n=e(this._element).closest(l)[0];if(n){var i=e(this._element).find(c)[0];if(i){if("radio"===i.type)if(i.checked&&e(this._element).hasClass(o))t=!1;else{var r=e(n).find(u)[0];r&&e(r).removeClass(o)}t&&(i.checked=!e(this._element).hasClass(o),e(i).trigger("change")),i.focus()}}this._element.setAttribute("aria-pressed",!e(this._element).hasClass(o)),t&&e(this._element).toggleClass(o)},t.prototype.dispose=function(){e.removeData(this._element,n),this._element=null},t._jQueryInterface=function(i){return this.each((function(){var o=e(this).data(n);o||(o=new t(this),e(this).data(n,o)),"toggle"===i&&o[i]()}))},_createClass(t,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),t}();return e(document).on(p.CLICK_DATA_API,s,(function(t){t.preventDefault();var n=t.target;e(n).hasClass(r)||(n=e(n).closest(d)),f._jQueryInterface.call(e(n),"toggle")})).on(p.FOCUS_BLUR_DATA_API,s,(function(t){var n=e(t.target).closest(d)[0];e(n).toggleClass(a,/^focus(in)?$/.test(t.type))})),e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=i,f._jQueryInterface},f}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Carousel=function(e){var t="carousel",n="bs.carousel",i="."+n,o=e.fn[t],r={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},a={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},s={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},l={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},c="carousel",u="active",d="slide",p="carousel-item-right",f="carousel-item-left",h="carousel-item-next",m="carousel-item-prev",g=".active",v=".active.carousel-item",_=".carousel-item",y=".carousel-item-next, .carousel-item-prev",w=".carousel-indicators",b="[data-slide], [data-slide-to]",C='[data-ride="carousel"]',E=function(){function o(t,n){_classCallCheck(this,o),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(w)[0],this._addEventListeners()}return o.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(s.NEXT)},o.prototype.nextWhenVisible=function(){document.hidden||this.next()},o.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(s.PREVIOUS)},o.prototype.pause=function(t){t||(this._isPaused=!0),e(this._element).find(y)[0]&&Util.supportsTransitionEnd()&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},o.prototype.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},o.prototype.to=function(t){var n=this;this._activeElement=e(this._element).find(v)[0];var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(l.SLID,(function(){return n.to(t)}));else{if(i===t)return this.pause(),void this.cycle();var o=t>i?s.NEXT:s.PREVIOUS;this._slide(o,this._items[t])}},o.prototype.dispose=function(){e(this._element).off(i),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},o.prototype._getConfig=function(n){return n=e.extend({},r,n),Util.typeCheckConfig(t,n,a),n},o.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(l.KEYDOWN,(function(e){return t._keydown(e)})),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||e(this._element).on(l.MOUSEENTER,(function(e){return t.pause(e)})).on(l.MOUSELEAVE,(function(e){return t.cycle(e)}))},o.prototype._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next();break;default:return}},o.prototype._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(_)),this._items.indexOf(t)},o.prototype._getItemByDirection=function(e,t){var n=e===s.NEXT,i=e===s.PREVIOUS,o=this._getItemIndex(t),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return t;var a=(o+(e===s.PREVIOUS?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},o.prototype._triggerSlideEvent=function(t,n){var i=e.Event(l.SLIDE,{relatedTarget:t,direction:n});return e(this._element).trigger(i),i},o.prototype._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(g).removeClass(u);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(u)}},o.prototype._slide=function(t,n){var i=this,o=e(this._element).find(v)[0],r=n||o&&this._getItemByDirection(t,o),a=Boolean(this._interval),c=void 0,g=void 0,_=void 0;if(t===s.NEXT?(c=f,g=h,_=s.LEFT):(c=p,g=m,_=s.RIGHT),r&&e(r).hasClass(u))this._isSliding=!1;else if(!this._triggerSlideEvent(r,_).isDefaultPrevented()&&o&&r){this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r);var y=e.Event(l.SLID,{relatedTarget:r,direction:_});Util.supportsTransitionEnd()&&e(this._element).hasClass(d)?(e(r).addClass(g),Util.reflow(r),e(o).addClass(c),e(r).addClass(c),e(o).one(Util.TRANSITION_END,(function(){e(r).removeClass(c+" "+g).addClass(u),e(o).removeClass(u+" "+g+" "+c),i._isSliding=!1,setTimeout((function(){return e(i._element).trigger(y)}),0)})).emulateTransitionEnd(600)):(e(o).removeClass(u),e(r).addClass(u),this._isSliding=!1,e(this._element).trigger(y)),a&&this.cycle()}},o._jQueryInterface=function(t){return this.each((function(){var i=e(this).data(n),a=e.extend({},r,e(this).data());"object"===(void 0===t?"undefined":_typeof(t))&&e.extend(a,t);var s="string"==typeof t?t:a.slide;if(i||(i=new o(this,a),e(this).data(n,i)),"number"==typeof t)i.to(t);else if("string"==typeof s){if(void 0===i[s])throw new Error('No method named "'+s+'"');i[s]()}else a.interval&&(i.pause(),i.cycle())}))},o._dataApiClickHandler=function(t){var i=Util.getSelectorFromElement(this);if(i){var r=e(i)[0];if(r&&e(r).hasClass(c)){var a=e.extend({},e(r).data(),e(this).data()),s=this.getAttribute("data-slide-to");s&&(a.interval=!1),o._jQueryInterface.call(e(r),a),s&&e(r).data(n).to(s),t.preventDefault()}}},_createClass(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return r}}]),o}();return e(document).on(l.CLICK_DATA_API,b,E._dataApiClickHandler),e(window).on(l.LOAD_DATA_API,(function(){e(C).each((function(){var t=e(this);E._jQueryInterface.call(t,t.data())}))})),e.fn[t]=E._jQueryInterface,e.fn[t].Constructor=E,e.fn[t].noConflict=function(){return e.fn[t]=o,E._jQueryInterface},E}(jQuery);_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Collapse=function(e){var t="collapse",n="bs.collapse",i="."+n,o=e.fn[t],r={toggle:!0,parent:""},a={toggle:"boolean",parent:"string"},s={SHOW:"show"+i,SHOWN:"shown"+i,HIDE:"hide"+i,HIDDEN:"hidden"+i,CLICK_DATA_API:"click.bs.collapse.data-api"},l="show",c="collapse",u="collapsing",d="collapsed",p="width",f="height",h=".card > .show, .card > .collapsing",m='[data-toggle="collapse"]',g=function(){function i(t,n){_classCallCheck(this,i),this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return i.prototype.toggle=function(){e(this._element).hasClass(l)?this.hide():this.show()},i.prototype.show=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(!e(this._element).hasClass(l)){var o=void 0,r=void 0;if(this._parent&&((o=e.makeArray(e(this._parent).find(h))).length||(o=null)),!(o&&(r=e(o).data(n))&&r._isTransitioning)){var a=e.Event(s.SHOW);if(e(this._element).trigger(a),!a.isDefaultPrevented()){o&&(i._jQueryInterface.call(e(o),"hide"),r||e(o).data(n,null));var p=this._getDimension();e(this._element).removeClass(c).addClass(u),this._element.style[p]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&e(this._triggerArray).removeClass(d).attr("aria-expanded",!0),this.setTransitioning(!0);var f=function(){e(t._element).removeClass(u).addClass(c).addClass(l),t._element.style[p]="",t.setTransitioning(!1),e(t._element).trigger(s.SHOWN)};if(Util.supportsTransitionEnd()){var m="scroll"+(p[0].toUpperCase()+p.slice(1));e(this._element).one(Util.TRANSITION_END,f).emulateTransitionEnd(600),this._element.style[p]=this._element[m]+"px"}else f()}}}},i.prototype.hide=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(e(this._element).hasClass(l)){var n=e.Event(s.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension(),o=i===p?"offsetWidth":"offsetHeight";this._element.style[i]=this._element[o]+"px",Util.reflow(this._element),e(this._element).addClass(u).removeClass(c).removeClass(l),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&e(this._triggerArray).addClass(d).attr("aria-expanded",!1),this.setTransitioning(!0);var r=function(){t.setTransitioning(!1),e(t._element).removeClass(u).addClass(c).trigger(s.HIDDEN)};this._element.style[i]="",Util.supportsTransitionEnd()?e(this._element).one(Util.TRANSITION_END,r).emulateTransitionEnd(600):r()}}},i.prototype.setTransitioning=function(e){this._isTransitioning=e},i.prototype.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},i.prototype._getConfig=function(n){return(n=e.extend({},r,n)).toggle=Boolean(n.toggle),Util.typeCheckConfig(t,n,a),n},i.prototype._getDimension=function(){return e(this._element).hasClass(p)?p:f},i.prototype._getParent=function(){var t=this,n=e(this._config.parent)[0],o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(o).each((function(e,n){t._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])})),n},i.prototype._addAriaAndCollapsedClass=function(t,n){if(t){var i=e(t).hasClass(l);t.setAttribute("aria-expanded",i),n.length&&e(n).toggleClass(d,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(t){var n=Util.getSelectorFromElement(t);return n?e(n)[0]:null},i._jQueryInterface=function(t){return this.each((function(){var o=e(this),a=o.data(n),s=e.extend({},r,o.data(),"object"===(void 0===t?"undefined":_typeof(t))&&t);if(!a&&s.toggle&&/show|hide/.test(t)&&(s.toggle=!1),a||(a=new i(this,s),o.data(n,a)),"string"==typeof t){if(void 0===a[t])throw new Error('No method named "'+t+'"');a[t]()}}))},_createClass(i,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return r}}]),i}();return e(document).on(s.CLICK_DATA_API,m,(function(t){t.preventDefault();var i=g._getTargetFromElement(this),o=e(i).data(n)?"toggle":e(this).data();g._jQueryInterface.call(e(i),o)})),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=o,g._jQueryInterface},g}(jQuery);_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Dropdown=function(e){var t="dropdown",n="bs.dropdown",i="."+n,o=e.fn[t],r={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,CLICK:"click"+i,CLICK_DATA_API:"click.bs.dropdown.data-api",FOCUSIN_DATA_API:"focusin.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api"},a="dropdown-backdrop",s="disabled",l="show",c=".dropdown-backdrop",u='[data-toggle="dropdown"]',d=".dropdown form",p='[role="menu"]',f='[role="listbox"]',h=".navbar-nav",m='[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a',g=function(){function t(e){_classCallCheck(this,t),this._element=e,this._addEventListeners()}return t.prototype.toggle=function(){if(this.disabled||e(this).hasClass(s))return!1;var n=t._getParentFromElement(this),i=e(n).hasClass(l);if(t._clearMenus(),i)return!1;if("ontouchstart"in document.documentElement&&!e(n).closest(h).length){var o=document.createElement("div");o.className=a,e(o).insertBefore(this),e(o).on("click",t._clearMenus)}var c={relatedTarget:this},u=e.Event(r.SHOW,c);return e(n).trigger(u),u.isDefaultPrevented()||(this.focus(),this.setAttribute("aria-expanded",!0),e(n).toggleClass(l),e(n).trigger(e.Event(r.SHOWN,c))),!1},t.prototype.dispose=function(){e.removeData(this._element,n),e(this._element).off(i),this._element=null},t.prototype._addEventListeners=function(){e(this._element).on(r.CLICK,this.toggle)},t._jQueryInterface=function(i){return this.each((function(){var o=e(this).data(n);if(o||(o=new t(this),e(this).data(n,o)),"string"==typeof i){if(void 0===o[i])throw new Error('No method named "'+i+'"');o[i].call(this)}}))},t._clearMenus=function(n){if(!n||3!==n.which){var i=e(c)[0];i&&i.parentNode.removeChild(i);for(var o=e.makeArray(e(u)),a=0;a<o.length;a++){var s=t._getParentFromElement(o[a]),d={relatedTarget:o[a]};if(e(s).hasClass(l)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"focusin"===n.type)&&e.contains(s,n.target))){var p=e.Event(r.HIDE,d);e(s).trigger(p),p.isDefaultPrevented()||(o[a].setAttribute("aria-expanded","false"),e(s).removeClass(l).trigger(e.Event(r.HIDDEN,d)))}}}},t._getParentFromElement=function(t){var n=void 0,i=Util.getSelectorFromElement(t);return i&&(n=e(i)[0]),n||t.parentNode},t._dataApiKeydownHandler=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!e(this).hasClass(s))){var i=t._getParentFromElement(this),o=e(i).hasClass(l);if(!o&&27!==n.which||o&&27===n.which){if(27===n.which){var r=e(i).find(u)[0];e(r).trigger("focus")}e(this).trigger("click")}else{var a=e(i).find(m).get();if(a.length){var c=a.indexOf(n.target);38===n.which&&c>0&&c--,40===n.which&&c<a.length-1&&c++,c<0&&(c=0),a[c].focus()}}}},_createClass(t,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),t}();return e(document).on(r.KEYDOWN_DATA_API,u,g._dataApiKeydownHandler).on(r.KEYDOWN_DATA_API,p,g._dataApiKeydownHandler).on(r.KEYDOWN_DATA_API,f,g._dataApiKeydownHandler).on(r.CLICK_DATA_API+" "+r.FOCUSIN_DATA_API,g._clearMenus).on(r.CLICK_DATA_API,u,g.prototype.toggle).on(r.CLICK_DATA_API,d,(function(e){e.stopPropagation()})),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=o,g._jQueryInterface},g}(jQuery);_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Modal=function(e){var t="modal",n="bs.modal",i=".bs.modal",o=e.fn.modal,r={backdrop:!0,keyboard:!0,focus:!0,show:!0},a={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},s={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},l="modal-scrollbar-measure",c="modal-backdrop",u="modal-open",d="fade",p="show",f=".modal-dialog",h='[data-toggle="modal"]',m='[data-dismiss="modal"]',g=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",v=function(){function o(t,n){_classCallCheck(this,o),this._config=this._getConfig(n),this._element=t,this._dialog=e(t).find(f)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return o.prototype.toggle=function(e){return this._isShown?this.hide():this.show(e)},o.prototype.show=function(t){var n=this;if(this._isTransitioning)throw new Error("Modal is transitioning");Util.supportsTransitionEnd()&&e(this._element).hasClass(d)&&(this._isTransitioning=!0);var i=e.Event(s.SHOW,{relatedTarget:t});e(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),e(document.body).addClass(u),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(s.CLICK_DISMISS,m,(function(e){return n.hide(e)})),e(this._dialog).on(s.MOUSEDOWN_DISMISS,(function(){e(n._element).one(s.MOUSEUP_DISMISS,(function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(t)})))},o.prototype.hide=function(t){var n=this;if(t&&t.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var i=Util.supportsTransitionEnd()&&e(this._element).hasClass(d);i&&(this._isTransitioning=!0);var o=e.Event(s.HIDE);e(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),e(document).off(s.FOCUSIN),e(this._element).removeClass(p),e(this._element).off(s.CLICK_DISMISS),e(this._dialog).off(s.MOUSEDOWN_DISMISS),i?e(this._element).one(Util.TRANSITION_END,(function(e){return n._hideModal(e)})).emulateTransitionEnd(300):this._hideModal())},o.prototype.dispose=function(){e.removeData(this._element,n),e(window,document,this._element,this._backdrop).off(i),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},o.prototype._getConfig=function(n){return n=e.extend({},r,n),Util.typeCheckConfig(t,n,a),n},o.prototype._showElement=function(t){var n=this,i=Util.supportsTransitionEnd()&&e(this._element).hasClass(d);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&Util.reflow(this._element),e(this._element).addClass(p),this._config.focus&&this._enforceFocus();var o=e.Event(s.SHOWN,{relatedTarget:t}),r=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(o)};i?e(this._dialog).one(Util.TRANSITION_END,r).emulateTransitionEnd(300):r()},o.prototype._enforceFocus=function(){var t=this;e(document).off(s.FOCUSIN).on(s.FOCUSIN,(function(n){document===n.target||t._element===n.target||e(t._element).has(n.target).length||t._element.focus()}))},o.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(s.KEYDOWN_DISMISS,(function(e){27===e.which&&t.hide()})):this._isShown||e(this._element).off(s.KEYDOWN_DISMISS)},o.prototype._setResizeEvent=function(){var t=this;this._isShown?e(window).on(s.RESIZE,(function(e){return t._handleUpdate(e)})):e(window).off(s.RESIZE)},o.prototype._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop((function(){e(document.body).removeClass(u),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(s.HIDDEN)}))},o.prototype._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},o.prototype._showBackdrop=function(t){var n=this,i=e(this._element).hasClass(d)?d:"";if(this._isShown&&this._config.backdrop){var o=Util.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=c,i&&e(this._backdrop).addClass(i),e(this._backdrop).appendTo(document.body),e(this._element).on(s.CLICK_DISMISS,(function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())})),o&&Util.reflow(this._backdrop),e(this._backdrop).addClass(p),!t)return;if(!o)return void t();e(this._backdrop).one(Util.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(p);var r=function(){n._removeBackdrop(),t&&t()};Util.supportsTransitionEnd()&&e(this._element).hasClass(d)?e(this._backdrop).one(Util.TRANSITION_END,r).emulateTransitionEnd(150):r()}else t&&t()},o.prototype._handleUpdate=function(){this._adjustDialog()},o.prototype._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},o.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},o.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},o.prototype._setScrollbar=function(){var t=parseInt(e(g).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=t+this._scrollbarWidth+"px")},o.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},o.prototype._getScrollbarWidth=function(){var e=document.createElement("div");e.className=l,document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},o._jQueryInterface=function(t,i){return this.each((function(){var r=e(this).data(n),a=e.extend({},o.Default,e(this).data(),"object"===(void 0===t?"undefined":_typeof(t))&&t);if(r||(r=new o(this,a),e(this).data(n,r)),"string"==typeof t){if(void 0===r[t])throw new Error('No method named "'+t+'"');r[t](i)}else a.show&&r.show(i)}))},_createClass(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return r}}]),o}();return e(document).on(s.CLICK_DATA_API,h,(function(t){var i=this,o=void 0,r=Util.getSelectorFromElement(this);r&&(o=e(r)[0]);var a=e(o).data(n)?"toggle":e.extend({},e(o).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var l=e(o).one(s.SHOW,(function(t){t.isDefaultPrevented()||l.one(s.HIDDEN,(function(){e(i).is(":visible")&&i.focus()}))}));v._jQueryInterface.call(e(o),a,this)})),e.fn.modal=v._jQueryInterface,e.fn.modal.Constructor=v,e.fn.modal.noConflict=function(){return e.fn.modal=o,v._jQueryInterface},v}(jQuery);
/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(window.jQuery||window.Zepto)}((function(e){var t,n,i,o,r,a,s="Close",l="BeforeClose",c="MarkupParse",u="Open",d="Change",p="mfp",f=".mfp",h="mfp-ready",m="mfp-removing",g="mfp-prevent-close",v=function(){},_=!!window.jQuery,y=e(window),w=function(e,n){t.ev.on(p+e+f,n)},b=function(t,n,i,o){var r=document.createElement("div");return r.className="mfp-"+t,i&&(r.innerHTML=i),o?n&&n.appendChild(r):(r=e(r),n&&r.appendTo(n)),r},C=function(n,i){t.ev.triggerHandler(p+n,i),t.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),t.st.callbacks[n]&&t.st.callbacks[n].apply(t,e.isArray(i)?i:[i]))},E=function(n){return n===a&&t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace("%title%",t.st.tClose)),a=n),t.currTemplate.closeBtn},I=function(){e.magnificPopup.instance||((t=new v).init(),e.magnificPopup.instance=t)};v.prototype={constructor:v,init:function(){var n=navigator.appVersion;t.isLowIE=t.isIE8=document.all&&!document.addEventListener,t.isAndroid=/android/gi.test(n),t.isIOS=/iphone|ipad|ipod/gi.test(n),t.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(n){var o;if(!1===n.isObj){t.items=n.items.toArray(),t.index=0;var a,s=n.items;for(o=0;o<s.length;o++)if((a=s[o]).parsed&&(a=a.el[0]),a===n.el[0]){t.index=o;break}}else t.items=e.isArray(n.items)?n.items:[n.items],t.index=n.index||0;if(!t.isOpen){t.types=[],r="",n.mainEl&&n.mainEl.length?t.ev=n.mainEl.eq(0):t.ev=i,n.key?(t.popupsCache[n.key]||(t.popupsCache[n.key]={}),t.currTemplate=t.popupsCache[n.key]):t.currTemplate={},t.st=e.extend(!0,{},e.magnificPopup.defaults,n),t.fixedContentPos="auto"===t.st.fixedContentPos?!t.probablyMobile:t.st.fixedContentPos,t.st.modal&&(t.st.closeOnContentClick=!1,t.st.closeOnBgClick=!1,t.st.showCloseBtn=!1,t.st.enableEscapeKey=!1),t.bgOverlay||(t.bgOverlay=b("bg").on("click.mfp",(function(){t.close()})),t.wrap=b("wrap").attr("tabindex",-1).on("click.mfp",(function(e){t._checkIfClose(e.target)&&t.close()})),t.container=b("container",t.wrap)),t.contentContainer=b("content"),t.st.preloader&&(t.preloader=b("preloader",t.container,t.st.tLoading));var l=e.magnificPopup.modules;for(o=0;o<l.length;o++){var d=l[o];d=d.charAt(0).toUpperCase()+d.slice(1),t["init"+d].call(t)}C("BeforeOpen"),t.st.showCloseBtn&&(t.st.closeBtnInside?(w(c,(function(e,t,n,i){n.close_replaceWith=E(i.type)})),r+=" mfp-close-btn-in"):t.wrap.append(E())),t.st.alignTop&&(r+=" mfp-align-top"),t.fixedContentPos?t.wrap.css({overflow:t.st.overflowY,overflowX:"hidden",overflowY:t.st.overflowY}):t.wrap.css({top:y.scrollTop(),position:"absolute"}),(!1===t.st.fixedBgPos||"auto"===t.st.fixedBgPos&&!t.fixedContentPos)&&t.bgOverlay.css({height:i.height(),position:"absolute"}),t.st.enableEscapeKey&&i.on("keyup.mfp",(function(e){27===e.keyCode&&t.close()})),y.on("resize.mfp",(function(){t.updateSize()})),t.st.closeOnContentClick||(r+=" mfp-auto-cursor"),r&&t.wrap.addClass(r);var p=t.wH=y.height(),f={};if(t.fixedContentPos&&t._hasScrollBar(p)){var m=t._getScrollbarSize();m&&(f.marginRight=m)}t.fixedContentPos&&(t.isIE7?e("body, html").css("overflow","hidden"):f.overflow="hidden");var g=t.st.mainClass;return t.isIE7&&(g+=" mfp-ie7"),g&&t._addClassToMFP(g),t.updateItemHTML(),C("BuildControls"),e("html").css(f),t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo||e(document.body)),t._lastFocusedEl=document.activeElement,setTimeout((function(){t.content?(t._addClassToMFP(h),t._setFocus()):t.bgOverlay.addClass(h),i.on("focusin.mfp",t._onFocusIn)}),16),t.isOpen=!0,t.updateSize(p),C(u),n}t.updateItemHTML()},close:function(){t.isOpen&&(C(l),t.isOpen=!1,t.st.removalDelay&&!t.isLowIE&&t.supportsTransition?(t._addClassToMFP(m),setTimeout((function(){t._close()}),t.st.removalDelay)):t._close())},_close:function(){C(s);var n="mfp-removing mfp-ready ";if(t.bgOverlay.detach(),t.wrap.detach(),t.container.empty(),t.st.mainClass&&(n+=t.st.mainClass+" "),t._removeClassFromMFP(n),t.fixedContentPos){var o={marginRight:""};t.isIE7?e("body, html").css("overflow",""):o.overflow="",e("html").css(o)}i.off("keyup.mfp focusin.mfp"),t.ev.off(f),t.wrap.attr("class","mfp-wrap").removeAttr("style"),t.bgOverlay.attr("class","mfp-bg"),t.container.attr("class","mfp-container"),!t.st.showCloseBtn||t.st.closeBtnInside&&!0!==t.currTemplate[t.currItem.type]||t.currTemplate.closeBtn&&t.currTemplate.closeBtn.detach(),t.st.autoFocusLast&&t._lastFocusedEl&&e(t._lastFocusedEl).focus(),t.currItem=null,t.content=null,t.currTemplate=null,t.prevHeight=0,C("AfterClose")},updateSize:function(e){if(t.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;t.wrap.css("height",i),t.wH=i}else t.wH=e||y.height();t.fixedContentPos||t.wrap.css("height",t.wH),C("Resize")},updateItemHTML:function(){var n=t.items[t.index];t.contentContainer.detach(),t.content&&t.content.detach(),n.parsed||(n=t.parseEl(t.index));var i=n.type;if(C("BeforeChange",[t.currItem?t.currItem.type:"",i]),t.currItem=n,!t.currTemplate[i]){var r=!!t.st[i]&&t.st[i].markup;C("FirstMarkupParse",r),t.currTemplate[i]=!r||e(r)}o&&o!==n.type&&t.container.removeClass("mfp-"+o+"-holder");var a=t["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,t.currTemplate[i]);t.appendContent(a,i),n.preloaded=!0,C(d,n),o=n.type,t.container.prepend(t.contentContainer),C("AfterChange")},appendContent:function(e,n){t.content=e,e?t.st.showCloseBtn&&t.st.closeBtnInside&&!0===t.currTemplate[n]?t.content.find(".mfp-close").length||t.content.append(E()):t.content=e:t.content="",C("BeforeAppend"),t.container.addClass("mfp-"+n+"-holder"),t.contentContainer.append(t.content)},parseEl:function(n){var i,o=t.items[n];if(o.tagName?o={el:e(o)}:(i=o.type,o={data:o,src:o.src}),o.el){for(var r=t.types,a=0;a<r.length;a++)if(o.el.hasClass("mfp-"+r[a])){i=r[a];break}o.src=o.el.attr("data-mfp-src"),o.src||(o.src=o.el.attr("href"))}return o.type=i||t.st.type||"inline",o.index=n,o.parsed=!0,t.items[n]=o,C("ElementParse",o),t.items[n]},addGroup:function(e,n){var i=function(i){i.mfpEl=this,t._openClick(i,e,n)};n||(n={});var o="click.magnificPopup";n.mainEl=e,n.items?(n.isObj=!0,e.off(o).on(o,i)):(n.isObj=!1,n.delegate?e.off(o).on(o,n.delegate,i):(n.items=e,e.off(o).on(o,i)))},_openClick:function(n,i,o){if((void 0!==o.midClick?o.midClick:e.magnificPopup.defaults.midClick)||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var r=void 0!==o.disableOn?o.disableOn:e.magnificPopup.defaults.disableOn;if(r)if(e.isFunction(r)){if(!r.call(t))return!0}else if(y.width()<r)return!0;n.type&&(n.preventDefault(),t.isOpen&&n.stopPropagation()),o.el=e(n.mfpEl),o.delegate&&(o.items=i.find(o.delegate)),t.open(o)}},updateStatus:function(e,i){if(t.preloader){n!==e&&t.container.removeClass("mfp-s-"+n),i||"loading"!==e||(i=t.st.tLoading);var o={status:e,text:i};C("UpdateStatus",o),e=o.status,i=o.text,t.preloader.html(i),t.preloader.find("a").on("click",(function(e){e.stopImmediatePropagation()})),t.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(n){if(!e(n).hasClass(g)){var i=t.st.closeOnContentClick,o=t.st.closeOnBgClick;if(i&&o)return!0;if(!t.content||e(n).hasClass("mfp-close")||t.preloader&&n===t.preloader[0])return!0;if(n===t.content[0]||e.contains(t.content[0],n)){if(i)return!0}else if(o&&e.contains(document,n))return!0;return!1}},_addClassToMFP:function(e){t.bgOverlay.addClass(e),t.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),t.wrap.removeClass(e)},_hasScrollBar:function(e){return(t.isIE7?i.height():document.body.scrollHeight)>(e||y.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(n){if(n.target!==t.wrap[0]&&!e.contains(t.wrap[0],n.target))return t._setFocus(),!1},_parseMarkup:function(t,n,i){var o;i.data&&(n=e.extend(i.data,n)),C(c,[t,n,i]),e.each(n,(function(n,i){if(void 0===i||!1===i)return!0;if((o=n.split("_")).length>1){var r=t.find(".mfp-"+o[0]);if(r.length>0){var a=o[1];"replaceWith"===a?r[0]!==i[0]&&r.replaceWith(i):"img"===a?r.is("img")?r.attr("src",i):r.replaceWith(e("<img>").attr("src",i).attr("class",r.attr("class"))):r.attr(o[1],i)}}else t.find(".mfp-"+n).html(i)}))},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:v.prototype,modules:[],open:function(t,n){return I(),(t=t?e.extend(!0,{},t):{}).isObj=!0,t.index=n||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&&e.magnificPopup.instance.close()},registerModule:function(t,n){n.options&&(e.magnificPopup.defaults[t]=n.options),e.extend(this.proto,n.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},e.fn.magnificPopup=function(n){I();var i=e(this);if("string"==typeof n)if("open"===n){var o,r=_?i.data("magnificPopup"):i[0].magnificPopup,a=parseInt(arguments[1],10)||0;r.items?o=r.items[a]:(o=i,r.delegate&&(o=o.find(r.delegate)),o=o.eq(a)),t._openClick({mfpEl:o},i,r)}else t.isOpen&&t[n].apply(t,Array.prototype.slice.call(arguments,1));else n=e.extend(!0,{},n),_?i.data("magnificPopup",n):i[0].magnificPopup=n,t.addGroup(i,n);return i};var T,S,k,A="inline",D=function(){k&&(S.after(k.addClass(T)).detach(),k=null)};e.magnificPopup.registerModule(A,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){t.types.push(A),w("Close.inline",(function(){D()}))},getInline:function(n,i){if(D(),n.src){var o=t.st.inline,r=e(n.src);if(r.length){var a=r[0].parentNode;a&&a.tagName&&(S||(T=o.hiddenClass,S=b(T),T="mfp-"+T),k=r.after(S).detach().removeClass(T)),t.updateStatus("ready")}else t.updateStatus("error",o.tNotFound),r=e("<div>");return n.inlineElement=r,r}return t.updateStatus("ready"),t._parseMarkup(i,{},n),i}}});var x,O="ajax",P=function(){x&&e(document.body).removeClass(x)},N=function(){P(),t.req&&t.req.abort()};e.magnificPopup.registerModule(O,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){t.types.push(O),x=t.st.ajax.cursor,w("Close.ajax",N),w("BeforeChange.ajax",N)},getAjax:function(n){x&&e(document.body).addClass(x),t.updateStatus("loading");var i=e.extend({url:n.src,success:function(i,o,r){var a={data:i,xhr:r};C("ParseAjax",a),t.appendContent(e(a.data),O),n.finished=!0,P(),t._setFocus(),setTimeout((function(){t.wrap.addClass(h)}),16),t.updateStatus("ready"),C("AjaxContentAdded")},error:function(){P(),n.finished=n.loadError=!0,t.updateStatus("error",t.st.ajax.tError.replace("%url%",n.src))}},t.st.ajax.settings);return t.req=e.ajax(i),""}}});var M,L=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=t.st.image.titleSrc;if(i){if(e.isFunction(i))return i.call(t,n);if(n.el)return n.el.attr(i)||""}return""};e.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=t.st.image,i=".image";t.types.push("image"),w("Open.image",(function(){"image"===t.currItem.type&&n.cursor&&e(document.body).addClass(n.cursor)})),w("Close.image",(function(){n.cursor&&e(document.body).removeClass(n.cursor),y.off("resize.mfp")})),w("Resize"+i,t.resizeImage),t.isLowIE&&w("AfterChange",t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&&e.img&&t.st.image.verticalFit){var n=0;t.isLowIE&&(n=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",t.wH-n)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,M&&clearInterval(M),e.isCheckingImgSize=!1,C("ImageHasSize",e),e.imgHidden&&(t.content&&t.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(e){var n=0,i=e.img[0],o=function(r){M&&clearInterval(M),M=setInterval((function(){i.naturalWidth>0?t._onImageHasSize(e):(n>200&&clearInterval(M),3===++n?o(10):40===n?o(50):100===n&&o(500))}),r)};o(1)},getImage:function(n,i){var o=0,r=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,C("ImageLoadComplete")):++o<200?setTimeout(r,100):a())},a=function(){n&&(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("error",s.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=t.st.image,l=i.find(".mfp-img");if(l.length){var c=document.createElement("img");c.className="mfp-img",n.el&&n.el.find("img").length&&(c.alt=n.el.find("img").attr("alt")),n.img=e(c).on("load.mfploader",r).on("error.mfploader",a),c.src=n.src,l.is("img")&&(n.img=n.img.clone()),(c=n.img[0]).naturalWidth>0?n.hasSize=!0:c.width||(n.hasSize=!1)}return t._parseMarkup(i,{title:L(n),img_replaceWith:n.img},n),t.resizeImage(),n.hasSize?(M&&clearInterval(M),n.loadError?(i.addClass("mfp-loading"),t.updateStatus("error",s.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),t.updateStatus("ready")),i):(t.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),t.findImageSize(n)),i)}}});var j;e.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,n=t.st.zoom,i=".zoom";if(n.enabled&&t.supportsTransition){var o,r,a=n.duration,s=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,o={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},r="transition";return o["-webkit-"+r]=o["-moz-"+r]=o["-o-"+r]=o[r]=i,t.css(o),t},l=function(){t.content.css("visibility","visible")};w("BuildControls"+i,(function(){if(t._allowZoom()){if(clearTimeout(o),t.content.css("visibility","hidden"),!(e=t._getItemToZoom()))return void l();(r=s(e)).css(t._getOffset()),t.wrap.append(r),o=setTimeout((function(){r.css(t._getOffset(!0)),o=setTimeout((function(){l(),setTimeout((function(){r.remove(),e=r=null,C("ZoomAnimationEnded")}),16)}),a)}),16)}})),w("BeforeClose.zoom",(function(){if(t._allowZoom()){if(clearTimeout(o),t.st.removalDelay=a,!e){if(!(e=t._getItemToZoom()))return;r=s(e)}r.css(t._getOffset(!0)),t.wrap.append(r),t.content.css("visibility","hidden"),setTimeout((function(){r.css(t._getOffset())}),16)}})),w("Close.zoom",(function(){t._allowZoom()&&(l(),r&&r.remove(),e=null)}))}},_allowZoom:function(){return"image"===t.currItem.type},_getItemToZoom:function(){return!!t.currItem.hasSize&&t.currItem.img},_getOffset:function(n){var i,o=(i=n?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem)).offset(),r=parseInt(i.css("padding-top"),10),a=parseInt(i.css("padding-bottom"),10);o.top-=e(window).scrollTop()-r;var s={width:i.width(),height:(_?i.innerHeight():i[0].offsetHeight)-a-r};return void 0===j&&(j=void 0!==document.createElement("p").style.MozTransform),j?s["-moz-transform"]=s.transform="translate("+o.left+"px,"+o.top+"px)":(s.left=o.left,s.top=o.top),s}}});var W="iframe",H=function(e){if(t.currTemplate.iframe){var n=t.currTemplate.iframe.find("iframe");n.length&&(e||(n[0].src="//about:blank"),t.isIE8&&n.css("display",e?"block":"none"))}};e.magnificPopup.registerModule(W,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){t.types.push(W),w("BeforeChange",(function(e,t,n){t!==n&&(t===W?H():n===W&&H(!0))})),w("Close.iframe",(function(){H()}))},getIframe:function(n,i){var o=n.src,r=t.st.iframe;e.each(r.patterns,(function(){if(o.indexOf(this.index)>-1)return this.id&&(o="string"==typeof this.id?o.substr(o.lastIndexOf(this.id)+this.id.length,o.length):this.id.call(this,o)),o=this.src.replace("%id%",o),!1}));var a={};return r.srcAction&&(a[r.srcAction]=o),t._parseMarkup(i,a,n),t.updateStatus("ready"),i}}});var B=function(e){var n=t.items.length;return e>n-1?e-n:e<0?n+e:e},z=function(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)};e.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=t.st.gallery,o=".mfp-gallery";if(t.direction=!0,!n||!n.enabled)return!1;r+=" mfp-gallery",w(u+o,(function(){n.navigateByImgClick&&t.wrap.on("click"+o,".mfp-img",(function(){if(t.items.length>1)return t.next(),!1})),i.on("keydown"+o,(function(e){37===e.keyCode?t.prev():39===e.keyCode&&t.next()}))})),w("UpdateStatus"+o,(function(e,n){n.text&&(n.text=z(n.text,t.currItem.index,t.items.length))})),w(c+o,(function(e,i,o,r){var a=t.items.length;o.counter=a>1?z(n.tCounter,r.index,a):""})),w("BuildControls"+o,(function(){if(t.items.length>1&&n.arrows&&!t.arrowLeft){var i=n.arrowMarkup,o=t.arrowLeft=e(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(g),r=t.arrowRight=e(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(g);o.click((function(){t.prev()})),r.click((function(){t.next()})),t.container.append(o.add(r))}})),w(d+o,(function(){t._preloadTimeout&&clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout((function(){t.preloadNearbyImages(),t._preloadTimeout=null}),16)})),w(s+o,(function(){i.off(o),t.wrap.off("click"+o),t.arrowRight=t.arrowLeft=null}))},next:function(){t.direction=!0,t.index=B(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=B(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e>=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,n=t.st.gallery.preload,i=Math.min(n[0],t.items.length),o=Math.min(n[1],t.items.length);for(e=1;e<=(t.direction?o:i);e++)t._preloadItem(t.index+e);for(e=1;e<=(t.direction?i:o);e++)t._preloadItem(t.index-e)},_preloadItem:function(n){if(n=B(n),!t.items[n].preloaded){var i=t.items[n];i.parsed||(i=t.parseEl(n)),C("LazyLoad",i),"image"===i.type&&(i.img=e('<img class="mfp-img" />').on("load.mfploader",(function(){i.hasSize=!0})).on("error.mfploader",(function(){i.hasSize=!0,i.loadError=!0,C("LazyLoadError",i)})).attr("src",i.src)),i.preloaded=!0}}}});var U="retina";e.magnificPopup.registerModule(U,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,(function(e){return"@2x"+e}))},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var e=t.st.retina,n=e.ratio;(n=isNaN(n)?n():n)>1&&(w("ImageHasSize.retina",(function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})})),w("ElementParse.retina",(function(t,i){i.src=e.replaceSrc(i,n)})))}}}}),I()})),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}((function(e){var t=Array.prototype.slice,n=Array.prototype.splice,i={topSpacing:0,bottomSpacing:0,className:"is-sticky",wrapperClassName:"sticky-wrapper",center:!1,getWidthFrom:"",widthFromWrapper:!0,responsiveWidth:!1,zIndex:"auto"},o=e(window),r=e(document),a=[],s=o.height(),l=function(){for(var t=o.scrollTop(),n=r.height(),i=n-s,l=t>i?i-t:0,c=0,u=a.length;c<u;c++){var d=a[c],p=d.stickyWrapper.offset().top-d.topSpacing-l;if(d.stickyWrapper.css("height",d.stickyElement.outerHeight()),t<=p)null!==d.currentTop&&(d.stickyElement.css({width:"",position:"",top:"","z-index":""}),d.stickyElement.parent().removeClass(d.className),d.stickyElement.trigger("sticky-end",[d]),d.currentTop=null);else{var f,h=n-d.stickyElement.outerHeight()-d.topSpacing-d.bottomSpacing-t-l;if(h<0?h+=d.topSpacing:h=d.topSpacing,d.currentTop!==h)d.getWidthFrom?f=e(d.getWidthFrom).width()||null:d.widthFromWrapper&&(f=d.stickyWrapper.width()),null==f&&(f=d.stickyElement.width()),d.stickyElement.css("width",f).css("position","fixed").css("top",h).css("z-index",d.zIndex),d.stickyElement.parent().addClass(d.className),null===d.currentTop?d.stickyElement.trigger("sticky-start",[d]):d.stickyElement.trigger("sticky-update",[d]),d.currentTop===d.topSpacing&&d.currentTop>h||null===d.currentTop&&h<d.topSpacing?d.stickyElement.trigger("sticky-bottom-reached",[d]):null!==d.currentTop&&h===d.topSpacing&&d.currentTop<h&&d.stickyElement.trigger("sticky-bottom-unreached",[d]),d.currentTop=h;var m=d.stickyWrapper.parent();d.stickyElement.offset().top+d.stickyElement.outerHeight()>=m.offset().top+m.outerHeight()&&d.stickyElement.offset().top<=d.topSpacing?d.stickyElement.css("position","absolute").css("top","").css("bottom",0).css("z-index",""):d.stickyElement.css("position","fixed").css("top",h).css("bottom","").css("z-index",d.zIndex)}}},c=function(){s=o.height();for(var t=0,n=a.length;t<n;t++){var i=a[t],r=null;i.getWidthFrom?i.responsiveWidth&&(r=e(i.getWidthFrom).width()):i.widthFromWrapper&&(r=i.stickyWrapper.width()),null!=r&&i.stickyElement.css("width",r)}},u={init:function(t){var n=e.extend({},i,t);return this.each((function(){var t=e(this),o=t.attr("id"),r=o?o+"-"+i.wrapperClassName:i.wrapperClassName,s=e("<div></div>").attr("id",r).addClass(n.wrapperClassName);t.wrapAll(s);var l=t.parent();n.center&&l.css({width:t.outerWidth(),marginLeft:"auto",marginRight:"auto"}),"right"===t.css("float")&&t.css({float:"none"}).parent().css({float:"right"}),n.stickyElement=t,n.stickyWrapper=l,n.currentTop=null,a.push(n),u.setWrapperHeight(this),u.setupChangeListeners(this)}))},setWrapperHeight:function(t){var n=e(t),i=n.parent();i&&i.css("height",n.outerHeight())},setupChangeListeners:function(e){window.MutationObserver?new window.MutationObserver((function(t){(t[0].addedNodes.length||t[0].removedNodes.length)&&u.setWrapperHeight(e)})).observe(e,{subtree:!0,childList:!0}):(e.addEventListener("DOMNodeInserted",(function(){u.setWrapperHeight(e)}),!1),e.addEventListener("DOMNodeRemoved",(function(){u.setWrapperHeight(e)}),!1))},update:l,unstick:function(t){return this.each((function(){for(var t=e(this),i=-1,o=a.length;o-- >0;)a[o].stickyElement.get(0)===this&&(n.call(a,o,1),i=o);-1!==i&&(t.unwrap(),t.css({width:"",position:"",top:"",float:"","z-index":""}))}))}};window.addEventListener?(window.addEventListener("scroll",l,!1),window.addEventListener("resize",c,!1)):window.attachEvent&&(window.attachEvent("onscroll",l),window.attachEvent("onresize",c)),e.fn.sticky=function(n){return u[n]?u[n].apply(this,t.call(arguments,1)):"object"!=typeof n&&n?void e.error("Method "+n+" does not exist on jQuery.sticky"):u.init.apply(this,arguments)},e.fn.unstick=function(n){return u[n]?u[n].apply(this,t.call(arguments,1)):"object"!=typeof n&&n?void e.error("Method "+n+" does not exist on jQuery.sticky"):u.unstick.apply(this,arguments)},e((function(){setTimeout(l,0)}))})),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):t(e.jQuery)}(this,(function(e){"use strict";function t(n,i){var o=n.getBoundingClientRect(),r=o.top,a=o.bottom,s=o.left,l=o.right,c=e.extend({tolerance:0,viewport:window},i),u=!1,d=c.viewport.jquery?c.viewport:e(c.viewport);d.length||(console.warn("isInViewport: The viewport selector you have provided matches no element on page."),console.warn("isInViewport: Defaulting to viewport as window"),d=e(window));var p=d.height(),f=d.width(),h=d[0].toString();if(d[0]!==window&&"[object Window]"!==h&&"[object DOMWindow]"!==h){var m=d[0].getBoundingClientRect();r-=m.top,a-=m.top,s-=m.left,l-=m.left,t.scrollBarWidth=t.scrollBarWidth||function(t){var n=e("<div></div>").css({width:"100%"});t.append(n);var i=t.width()-n.width();return n.remove(),i}(d),f-=t.scrollBarWidth}return c.tolerance=~~Math.round(parseFloat(c.tolerance)),c.tolerance<0&&(c.tolerance=p+c.tolerance),l<=0||s>=f?u:u=c.tolerance?r<=c.tolerance&&a>=c.tolerance:a>0&&r<=p}function n(t){if(t){var n=t.split(",");return 1===n.length&&isNaN(n[0])&&(n[1]=n[0],n[0]=void 0),{tolerance:n[0]?n[0].trim():void 0,viewport:n[1]?e(n[1].trim()):void 0}}return{}}
/**
 * @author  Mudit Ameta
 * @license https://github.com/zeusdeux/isInViewport/blob/master/license.md MIT
 */
(e=e&&e.hasOwnProperty("default")?e.default:e).extend(e.expr.pseudos||e.expr[":"],{"in-viewport":e.expr.createPseudo?e.expr.createPseudo((function(e){return function(i){return t(i,n(e))}})):function(e,i,o){return t(e,n(o[3]))}}),e.fn.isInViewport=function(e){return this.filter((function(n,i){return t(i,e)}))},e.fn.run=function(t){var n=this;1===arguments.length&&"function"==typeof t&&(t=[t]);if(!(t instanceof Array))throw new SyntaxError("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions");return t.forEach((function(t){"function"!=typeof t?(console.warn("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions"),console.warn("isInViewport: Ignoring non-function values in array and moving on")):[].slice.call(n).forEach((function(n){return t.call(e(n))}))})),this}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

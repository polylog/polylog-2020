!function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,0,t),e.mobile}):n(e.jQuery,0,t)}(this,document,function(e,t,n,i){var o,r,c,s,a,u,l,d,p,f,h;function m(e,t,n,i){var o=n.type;n.type=t,i?c.event.trigger(n,a,e):c.event.dispatch.call(e,n),n.type=o}!function(p,e,f){var l,t,o="virtualMouseBindings",c="virtualTouchID",n="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),h="clientX clientY pageX pageY screenX screenY".split(" "),i=p.event.mouseHooks?p.event.mouseHooks.props:[],m=p.event.props.concat(i),r={},s=0,a=0,u=0,d=!1,g=[],v=!1,_=!1,y="addEventListener"in e,w=p(e),C=1,b=0;function E(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function I(e){for(var t,n,i={};e;){for(n in t=p.data(e,o))t[n]&&(i[n]=i.hasVirtualBinding=!0);e=e.parentNode}return i}function T(){_=!0}function S(){_=!1}function k(){A(),s=setTimeout(function(){b=s=0,g.length=0,v=!1,T()},p.vmouse.resetTimerDuration)}function A(){s&&(clearTimeout(s),s=0)}function D(e,t,n){var i;return(n&&n[e]||!n&&function(e,t){for(var n;e;){if((n=p.data(e,o))&&(!t||n[t]))return e;e=e.parentNode}}(t.target,e))&&(i=function(e,t){var n,i,o,r,s,a,l,c,u,d=e.type;if((e=p.Event(e)).type=t,n=e.originalEvent,i=p.event.props,-1<d.search(/^(mouse|click)/)&&(i=m),n)for(l=i.length;l;)e[r=i[--l]]=n[r];if(-1<d.search(/mouse(down|up)|click/)&&!e.which&&(e.which=1),-1!==d.search(/^touch/)&&(d=(o=E(n)).touches,s=o.changedTouches,a=d&&d.length?d[0]:s&&s.length?s[0]:f))for(c=0,u=h.length;c<u;c++)e[r=h[c]]=a[r];return e}(t,e),p(t.target).trigger(i)),i}function x(e){var t,n=p.data(e.target,c);v||b&&b===n||(t=D("v"+e.type,e))&&(t.isDefaultPrevented()&&e.preventDefault(),t.isPropagationStopped()&&e.stopPropagation(),t.isImmediatePropagationStopped()&&e.stopImmediatePropagation())}function O(e){var t,n,i,o=E(e).touches;o&&1===o.length&&(n=I(t=e.target)).hasVirtualBinding&&(b=C++,p.data(t,c,b),A(),S(),d=!1,i=E(e).touches[0],a=i.pageX,u=i.pageY,D("vmouseover",e,n),D("vmousedown",e,n))}function P(e){_||(d||D("vmousecancel",e,I(e.target)),d=!0,k())}function N(e){var t,n,i,o;_||(t=E(e).touches[0],n=d,i=p.vmouse.moveDistanceThreshold,o=I(e.target),(d=d||Math.abs(t.pageX-a)>i||Math.abs(t.pageY-u)>i)&&!n&&D("vmousecancel",e,o),D("vmousemove",e,o),k())}function M(e){var t,n,i;_||(T(),D("vmouseup",e,t=I(e.target)),d||(n=D("vclick",e,t))&&n.isDefaultPrevented()&&(i=E(e).changedTouches[0],g.push({touchID:b,x:i.clientX,y:i.clientY}),v=!0),D("vmouseout",e,t),d=!1,k())}function L(e){var t,n=p.data(e,o);if(n)for(t in n)if(n[t])return 1}function W(){}for(p.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500},t=0;t<n.length;t++)p.event.special[n[t]]=function(n){var i=n.substr(1);return{setup:function(){L(this)||p.data(this,o,{}),p.data(this,o)[n]=!0,r[n]=(r[n]||0)+1,1===r[n]&&w.bind(i,x),p(this).bind(i,W),y&&(r.touchstart=(r.touchstart||0)+1,1===r.touchstart&&w.bind("touchstart",O).bind("touchend",M).bind("touchmove",N).bind("scroll",P))},teardown:function(){--r[n],r[n]||w.unbind(i,x),y&&(--r.touchstart,r.touchstart||w.unbind("touchstart",O).unbind("touchmove",N).unbind("touchend",M).unbind("scroll",P));var e=p(this),t=p.data(this,o);t&&(t[n]=!1),e.unbind(i,W),L(this)||e.removeData(o)}}}(n[t]);y&&e.addEventListener("click",function(e){var t,n,i,o,r,s=g.length,a=e.target;if(s)for(t=e.clientX,n=e.clientY,l=p.vmouse.clickDistanceThreshold,i=a;i;){for(o=0;o<s;o++)if(r=g[o],i===a&&Math.abs(r.x-t)<l&&Math.abs(r.y-n)<l||p.data(i,c)===r.touchID)return e.preventDefault(),void e.stopPropagation();i=i.parentNode}},!0)}(e,n),e.mobile={},o=e,r={touch:"ontouchend"in n},o.mobile.support=o.mobile.support||{},o.extend(o.support,r),o.extend(o.mobile.support,r),s=this,u=(c=e)(n),l=c.mobile.support.touch,d="touchmove scroll",p=l?"touchstart":"mousedown",f=l?"touchend":"mouseup",h=l?"touchmove":"mousemove",c.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(e,t){c.fn[t]=function(e){return e?this.bind(t,e):this.trigger(t)},c.attrFn&&(c.attrFn[t]=!0)}),c.event.special.scrollstart={enabled:!0,setup:function(){var n,t,i=this;function o(e,t){m(i,(n=t)?"scrollstart":"scrollstop",e)}c(i).bind(d,function(e){c.event.special.scrollstart.enabled&&(n||o(e,!0),clearTimeout(t),t=setTimeout(function(){o(e,!1)},50))})},teardown:function(){c(this).unbind(d)}},c.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var s=this,a=c(s),l=!1;a.bind("vmousedown",function(e){if(l=!1,e.which&&1!==e.which)return!1;var t,n=e.target;function i(){clearTimeout(t)}function o(){i(),a.unbind("vclick",r).unbind("vmouseup",i),u.unbind("vmousecancel",o)}function r(e){o(),l||n!==e.target?l&&e.preventDefault():m(s,"tap",e)}a.bind("vmouseup",i).bind("vclick",r),u.bind("vmousecancel",o),t=setTimeout(function(){c.event.special.tap.emitTapOnTaphold||(l=!0),m(s,"taphold",c.Event("taphold",{target:n}))},c.event.special.tap.tapholdThreshold)})},teardown:function(){c(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),u.unbind("vmousecancel")}},c.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var t=s.pageXOffset,n=s.pageYOffset,i=e.clientX,o=e.clientY;return 0===e.pageY&&Math.floor(o)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(i)>Math.floor(e.pageX)?(i-=t,o-=n):(o<e.pageY-n||i<e.pageX-t)&&(i=e.pageX-t,o=e.pageY-n),{x:i,y:o}},start:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y],origin:c(e.target)}},stop:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y]}},handleSwipe:function(e,t,n,i){if(t.time-e.time<c.event.special.swipe.durationThreshold&&Math.abs(e.coords[0]-t.coords[0])>c.event.special.swipe.horizontalDistanceThreshold&&Math.abs(e.coords[1]-t.coords[1])<c.event.special.swipe.verticalDistanceThreshold){var o=e.coords[0]>t.coords[0]?"swipeleft":"swiperight";return m(n,"swipe",c.Event("swipe",{target:i,swipestart:e,swipestop:t}),!0),m(n,o,c.Event(o,{target:i,swipestart:e,swipestop:t}),!0),!0}return!1},eventInProgress:!1,setup:function(){var r=this,e=c(r),s={},t=c.data(this,"mobile-events");t||(t={length:0},c.data(this,"mobile-events",t)),t.length++,(t.swipe=s).start=function(e){var t,n,i,o;c.event.special.swipe.eventInProgress||(c.event.special.swipe.eventInProgress=!0,n=c.event.special.swipe.start(e),i=e.target,o=!1,s.move=function(e){n&&!e.isDefaultPrevented()&&(t=c.event.special.swipe.stop(e),o||(o=c.event.special.swipe.handleSwipe(n,t,r,i))&&(c.event.special.swipe.eventInProgress=!1),Math.abs(n.coords[0]-t.coords[0])>c.event.special.swipe.scrollSupressionThreshold&&e.preventDefault())},s.stop=function(){o=!0,c.event.special.swipe.eventInProgress=!1,u.off(h,s.move),s.move=null},u.on(h,s.move).one(f,s.stop))},e.on(p,s.start)},teardown:function(){var e,t=c.data(this,"mobile-events");t&&(e=t.swipe,delete t.swipe,t.length--,0===t.length&&c.removeData(this,"mobile-events")),e&&(e.start&&c(this).off(p,e.start),e.move&&u.off(h,e.move),e.stop&&u.off(f,e.stop))}},c.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},function(e,t){c.event.special[e]={setup:function(){c(this).bind(t,c.noop)},teardown:function(){c(this).unbind(t)}}})});var Util=function(i){var t=!1,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};function e(e){var t=this,n=!1;return i(this).one(o.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||o.triggerTransitionEnd(t)},e),this}var o={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");return t||(t=e.getAttribute("href")||"",t=/^#[a-z]/i.test(t)?t:null),t},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){i(e).trigger(t.end)},supportsTransitionEnd:function(){return Boolean(t)},typeCheckConfig:function(e,t,n){for(var i in n)if(n.hasOwnProperty(i)){var o=n[i],r=t[i],s=r&&((l=r)[0]||l).nodeType?"element":(a=r,{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".')}var a,l}};return t=function(){if(window.QUnit)return!1;var e=document.createElement("bootstrap");for(var t in n)if(void 0!==e.style[t])return{end:n[t]};return!1}(),i.fn.emulateTransitionEnd=e,o.supportsTransitionEnd()&&(i.event.special[o.TRANSITION_END]={bindType:t.end,delegateType:t.end,handle:function(e){if(i(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),o}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Alert=function(i){var e="alert",o="bs.alert",t="."+o,n=i.fn[e],r={CLOSE:"close"+t,CLOSED:"closed"+t,CLICK_DATA_API:"click"+t+".data-api"},s="alert",a="fade",l="show",c=(u.prototype.close=function(e){e=e||this._element;var t=this._getRootElement(e);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},u.prototype.dispose=function(){i.removeData(this._element,o),this._element=null},u.prototype._getRootElement=function(e){var t=Util.getSelectorFromElement(e),n=!1;return t&&(n=i(t)[0]),n=n||i(e).closest("."+s)[0]},u.prototype._triggerCloseEvent=function(e){var t=i.Event(r.CLOSE);return i(e).trigger(t),t},u.prototype._removeElement=function(t){var n=this;i(t).removeClass(l),Util.supportsTransitionEnd()&&i(t).hasClass(a)?i(t).one(Util.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},u.prototype._destroyElement=function(e){i(e).detach().trigger(r.CLOSED).remove()},u._jQueryInterface=function(n){return this.each(function(){var e=i(this),t=e.data(o);t||(t=new u(this),e.data(o,t)),"close"===n&&t[n](this)})},u._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},_createClass(u,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),u);function u(e){_classCallCheck(this,u),this._element=e}return i(document).on(r.CLICK_DATA_API,'[data-dismiss="alert"]',c._handleDismiss(new c)),i.fn[e]=c._jQueryInterface,i.fn[e].Constructor=c,i.fn[e].noConflict=function(){return i.fn[e]=n,c._jQueryInterface},c}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Button=function(o){var e="button",n="bs.button",t="."+n,i=".data-api",r=o.fn[e],s="active",a="btn",l="focus",c='[data-toggle^="button"]',u='[data-toggle="buttons"]',d="input",p=".active",f=".btn",h={CLICK_DATA_API:"click"+t+i,FOCUS_BLUR_DATA_API:"focus"+t+i+" blur"+t+i},m=(g.prototype.toggle=function(){var e,t,n=!0,i=o(this._element).closest(u)[0];!i||(e=o(this._element).find(d)[0])&&("radio"===e.type&&(e.checked&&o(this._element).hasClass(s)?n=!1:(t=o(i).find(p)[0])&&o(t).removeClass(s)),n&&(e.checked=!o(this._element).hasClass(s),o(e).trigger("change")),e.focus()),this._element.setAttribute("aria-pressed",!o(this._element).hasClass(s)),n&&o(this._element).toggleClass(s)},g.prototype.dispose=function(){o.removeData(this._element,n),this._element=null},g._jQueryInterface=function(t){return this.each(function(){var e=o(this).data(n);e||(e=new g(this),o(this).data(n,e)),"toggle"===t&&e[t]()})},_createClass(g,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),g);function g(e){_classCallCheck(this,g),this._element=e}return o(document).on(h.CLICK_DATA_API,c,function(e){e.preventDefault();var t=e.target;o(t).hasClass(a)||(t=o(t).closest(f)),m._jQueryInterface.call(o(t),"toggle")}).on(h.FOCUS_BLUR_DATA_API,c,function(e){var t=o(e.target).closest(f)[0];o(t).toggleClass(l,/^focus(in)?$/.test(e.type))}),o.fn[e]=m._jQueryInterface,o.fn[e].Constructor=m,o.fn[e].noConflict=function(){return o.fn[e]=r,m._jQueryInterface},m}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Carousel=function(u){var t="carousel",r="bs.carousel",e="."+r,n=".data-api",i=u.fn[t],o={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},s={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},p={SLIDE:"slide"+e,SLID:"slid"+e,KEYDOWN:"keydown"+e,MOUSEENTER:"mouseenter"+e,MOUSELEAVE:"mouseleave"+e,LOAD_DATA_API:"load"+e+n,CLICK_DATA_API:"click"+e+n},a="carousel",f="active",h="slide",m="carousel-item-right",g="carousel-item-left",v="carousel-item-next",_="carousel-item-prev",y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},l=(c.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.NEXT)},c.prototype.nextWhenVisible=function(){document.hidden||this.next()},c.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.PREVIOUS)},c.prototype.pause=function(e){e||(this._isPaused=!0),u(this._element).find(y.NEXT_PREV)[0]&&Util.supportsTransitionEnd()&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},c.prototype.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},c.prototype.to=function(e){var t=this;this._activeElement=u(this._element).find(y.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)u(this._element).one(p.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();var i=n<e?d.NEXT:d.PREVIOUS;this._slide(i,this._items[e])}},c.prototype.dispose=function(){u(this._element).off(e),u.removeData(this._element,r),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},c.prototype._getConfig=function(e){return e=u.extend({},o,e),Util.typeCheckConfig(t,e,s),e},c.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&u(this._element).on(p.KEYDOWN,function(e){return t._keydown(e)}),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||u(this._element).on(p.MOUSEENTER,function(e){return t.pause(e)}).on(p.MOUSELEAVE,function(e){return t.cycle(e)})},c.prototype._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next();break;default:return}},c.prototype._getItemIndex=function(e){return this._items=u.makeArray(u(e).parent().find(y.ITEM)),this._items.indexOf(e)},c.prototype._getItemByDirection=function(e,t){var n=e===d.NEXT,i=e===d.PREVIOUS,o=this._getItemIndex(t),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return t;var s=(o+(e===d.PREVIOUS?-1:1))%this._items.length;return-1==s?this._items[this._items.length-1]:this._items[s]},c.prototype._triggerSlideEvent=function(e,t){var n=u.Event(p.SLIDE,{relatedTarget:e,direction:t});return u(this._element).trigger(n),n},c.prototype._setActiveIndicatorElement=function(e){var t;this._indicatorsElement&&(u(this._indicatorsElement).find(y.ACTIVE).removeClass(f),(t=this._indicatorsElement.children[this._getItemIndex(e)])&&u(t).addClass(f))},c.prototype._slide=function(e,t){var n,i=this,o=u(this._element).find(y.ACTIVE_ITEM)[0],r=t||o&&this._getItemByDirection(e,o),s=Boolean(this._interval),a=void 0,l=void 0,c=void 0,c=e===d.NEXT?(a=g,l=v,d.LEFT):(a=m,l=_,d.RIGHT);r&&u(r).hasClass(f)?this._isSliding=!1:this._triggerSlideEvent(r,c).isDefaultPrevented()||o&&r&&(this._isSliding=!0,s&&this.pause(),this._setActiveIndicatorElement(r),n=u.Event(p.SLID,{relatedTarget:r,direction:c}),Util.supportsTransitionEnd()&&u(this._element).hasClass(h)?(u(r).addClass(l),Util.reflow(r),u(o).addClass(a),u(r).addClass(a),u(o).one(Util.TRANSITION_END,function(){u(r).removeClass(a+" "+l).addClass(f),u(o).removeClass(f+" "+l+" "+a),i._isSliding=!1,setTimeout(function(){return u(i._element).trigger(n)},0)}).emulateTransitionEnd(600)):(u(o).removeClass(f),u(r).addClass(f),this._isSliding=!1,u(this._element).trigger(n)),s&&this.cycle())},c._jQueryInterface=function(i){return this.each(function(){var e=u(this).data(r),t=u.extend({},o,u(this).data());"object"===(void 0===i?"undefined":_typeof(i))&&u.extend(t,i);var n="string"==typeof i?i:t.slide;if(e||(e=new c(this,t),u(this).data(r,e)),"number"==typeof i)e.to(i);else if("string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n]()}else t.interval&&(e.pause(),e.cycle())})},c._dataApiClickHandler=function(e){var t,n,i,o=Util.getSelectorFromElement(this);!o||(t=u(o)[0])&&u(t).hasClass(a)&&(n=u.extend({},u(t).data(),u(this).data()),(i=this.getAttribute("data-slide-to"))&&(n.interval=!1),c._jQueryInterface.call(u(t),n),i&&u(t).data(r).to(i),e.preventDefault())},_createClass(c,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),c);function c(e,t){_classCallCheck(this,c),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(t),this._element=u(e)[0],this._indicatorsElement=u(this._element).find(y.INDICATORS)[0],this._addEventListeners()}return u(document).on(p.CLICK_DATA_API,y.DATA_SLIDE,l._dataApiClickHandler),u(window).on(p.LOAD_DATA_API,function(){u(y.DATA_RIDE).each(function(){var e=u(this);l._jQueryInterface.call(e,e.data())})}),u.fn[t]=l._jQueryInterface,u.fn[t].Constructor=l,u.fn[t].noConflict=function(){return u.fn[t]=i,l._jQueryInterface},l}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Collapse=function(a){var t="collapse",l="bs.collapse",e="."+l,n=a.fn[t],o={toggle:!0,parent:""},i={toggle:"boolean",parent:"string"},c={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},u="show",d="collapse",p="collapsing",f="collapsed",r="width",s="height",h=".card > .show, .card > .collapsing",m='[data-toggle="collapse"]',g=(v.prototype.toggle=function(){a(this._element).hasClass(u)?this.hide():this.show()},v.prototype.show=function(){var e,t,n,i,o,r,s=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");a(this._element).hasClass(u)||(t=e=void 0,this._parent&&((e=a.makeArray(a(this._parent).find(h))).length||(e=null)),e&&(t=a(e).data(l))&&t._isTransitioning||(n=a.Event(c.SHOW),a(this._element).trigger(n),n.isDefaultPrevented()||(e&&(v._jQueryInterface.call(a(e),"hide"),t||a(e).data(l,null)),i=this._getDimension(),a(this._element).removeClass(d).addClass(p),this._element.style[i]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&a(this._triggerArray).removeClass(f).attr("aria-expanded",!0),this.setTransitioning(!0),o=function(){a(s._element).removeClass(p).addClass(d).addClass(u),s._element.style[i]="",s.setTransitioning(!1),a(s._element).trigger(c.SHOWN)},Util.supportsTransitionEnd()?(r="scroll"+(i[0].toUpperCase()+i.slice(1)),a(this._element).one(Util.TRANSITION_END,o).emulateTransitionEnd(600),this._element.style[i]=this._element[r]+"px"):o())))},v.prototype.hide=function(){var e,t,n,i,o=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");a(this._element).hasClass(u)&&(e=a.Event(c.HIDE),a(this._element).trigger(e),e.isDefaultPrevented()||(n=(t=this._getDimension())===r?"offsetWidth":"offsetHeight",this._element.style[t]=this._element[n]+"px",Util.reflow(this._element),a(this._element).addClass(p).removeClass(d).removeClass(u),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&a(this._triggerArray).addClass(f).attr("aria-expanded",!1),this.setTransitioning(!0),i=function(){o.setTransitioning(!1),a(o._element).removeClass(p).addClass(d).trigger(c.HIDDEN)},this._element.style[t]="",Util.supportsTransitionEnd()?a(this._element).one(Util.TRANSITION_END,i).emulateTransitionEnd(600):i()))},v.prototype.setTransitioning=function(e){this._isTransitioning=e},v.prototype.dispose=function(){a.removeData(this._element,l),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},v.prototype._getConfig=function(e){return(e=a.extend({},o,e)).toggle=Boolean(e.toggle),Util.typeCheckConfig(t,e,i),e},v.prototype._getDimension=function(){return a(this._element).hasClass(r)?r:s},v.prototype._getParent=function(){var n=this,e=a(this._config.parent)[0],t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return a(e).find(t).each(function(e,t){n._addAriaAndCollapsedClass(v._getTargetFromElement(t),[t])}),e},v.prototype._addAriaAndCollapsedClass=function(e,t){var n;e&&(n=a(e).hasClass(u),e.setAttribute("aria-expanded",n),t.length&&a(t).toggleClass(f,!n).attr("aria-expanded",n))},v._getTargetFromElement=function(e){var t=Util.getSelectorFromElement(e);return t?a(t)[0]:null},v._jQueryInterface=function(i){return this.each(function(){var e=a(this),t=e.data(l),n=a.extend({},o,e.data(),"object"===(void 0===i?"undefined":_typeof(i))&&i);if(!t&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),t||(t=new v(this,n),e.data(l,t)),"string"==typeof i){if(void 0===t[i])throw new Error('No method named "'+i+'"');t[i]()}})},_createClass(v,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),v);function v(e,t){_classCallCheck(this,v),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=a.makeArray(a('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a(document).on(c.CLICK_DATA_API,m,function(e){e.preventDefault();var t=g._getTargetFromElement(this),n=a(t).data(l)?"toggle":a(this).data();g._jQueryInterface.call(a(t),n)}),a.fn[t]=g._jQueryInterface,a.fn[t].Constructor=g,a.fn[t].noConflict=function(){return a.fn[t]=n,g._jQueryInterface},g}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Dropdown=function(a){var e="dropdown",n="bs.dropdown",t="."+n,i=".data-api",o=a.fn[e],l={HIDE:"hide"+t,HIDDEN:"hidden"+t,SHOW:"show"+t,SHOWN:"shown"+t,CLICK:"click"+t,CLICK_DATA_API:"click"+t+i,FOCUSIN_DATA_API:"focusin"+t+i,KEYDOWN_DATA_API:"keydown"+t+i},r="dropdown-backdrop",s="disabled",c="show",u=".dropdown-backdrop",d='[data-toggle="dropdown"]',p=".dropdown form",f='[role="menu"]',h='[role="listbox"]',m=".navbar-nav",g='[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a',v=(_.prototype.toggle=function(){if(this.disabled||a(this).hasClass(s))return!1;var e,t=_._getParentFromElement(this),n=a(t).hasClass(c);if(_._clearMenus(),n)return!1;"ontouchstart"in document.documentElement&&!a(t).closest(m).length&&((e=document.createElement("div")).className=r,a(e).insertBefore(this),a(e).on("click",_._clearMenus));var i={relatedTarget:this},o=a.Event(l.SHOW,i);return a(t).trigger(o),o.isDefaultPrevented()||(this.focus(),this.setAttribute("aria-expanded",!0),a(t).toggleClass(c),a(t).trigger(a.Event(l.SHOWN,i))),!1},_.prototype.dispose=function(){a.removeData(this._element,n),a(this._element).off(t),this._element=null},_.prototype._addEventListeners=function(){a(this._element).on(l.CLICK,this.toggle)},_._jQueryInterface=function(t){return this.each(function(){var e=a(this).data(n);if(e||(e=new _(this),a(this).data(n,e)),"string"==typeof t){if(void 0===e[t])throw new Error('No method named "'+t+'"');e[t].call(this)}})},_._clearMenus=function(e){if(!e||3!==e.which){var t=a(u)[0];t&&t.parentNode.removeChild(t);for(var n=a.makeArray(a(d)),i=0;i<n.length;i++){var o,r=_._getParentFromElement(n[i]),s={relatedTarget:n[i]};a(r).hasClass(c)&&(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"focusin"===e.type)&&a.contains(r,e.target)||(o=a.Event(l.HIDE,s),a(r).trigger(o),o.isDefaultPrevented()||(n[i].setAttribute("aria-expanded","false"),a(r).removeClass(c).trigger(a.Event(l.HIDDEN,s)))))}}},_._getParentFromElement=function(e){var t=void 0,n=Util.getSelectorFromElement(e);return n&&(t=a(n)[0]),t||e.parentNode},_._dataApiKeydownHandler=function(e){if(/(38|40|27|32)/.test(e.which)&&!/input|textarea/i.test(e.target.tagName)&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!a(this).hasClass(s))){var t,n=_._getParentFromElement(this),i=a(n).hasClass(c);if(!i&&27!==e.which||i&&27===e.which)return 27===e.which&&(t=a(n).find(d)[0],a(t).trigger("focus")),void a(this).trigger("click");var o,r=a(n).find(g).get();r.length&&(o=r.indexOf(e.target),38===e.which&&0<o&&o--,40===e.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus())}},_createClass(_,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),_);function _(e){_classCallCheck(this,_),this._element=e,this._addEventListeners()}return a(document).on(l.KEYDOWN_DATA_API,d,v._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,f,v._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,h,v._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.FOCUSIN_DATA_API,v._clearMenus).on(l.CLICK_DATA_API,d,v.prototype.toggle).on(l.CLICK_DATA_API,p,function(e){e.stopPropagation()}),a.fn[e]=v._jQueryInterface,a.fn[e].Constructor=v,a.fn[e].noConflict=function(){return a.fn[e]=o,v._jQueryInterface},v}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Modal=function(s){var t="modal",a="bs.modal",e="."+a,n=s.fn[t],i={backdrop:!0,keyboard:!0,focus:!0,show:!0},o={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,FOCUSIN:"focusin"+e,RESIZE:"resize"+e,CLICK_DISMISS:"click.dismiss"+e,KEYDOWN_DISMISS:"keydown.dismiss"+e,MOUSEUP_DISMISS:"mouseup.dismiss"+e,MOUSEDOWN_DISMISS:"mousedown.dismiss"+e,CLICK_DATA_API:"click"+e+".data-api"},r="modal-scrollbar-measure",c="modal-backdrop",u="modal-open",d="fade",p="show",f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},h=(m.prototype.toggle=function(e){return this._isShown?this.hide():this.show(e)},m.prototype.show=function(e){var t=this;if(this._isTransitioning)throw new Error("Modal is transitioning");Util.supportsTransitionEnd()&&s(this._element).hasClass(d)&&(this._isTransitioning=!0);var n=s.Event(l.SHOW,{relatedTarget:e});s(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),s(document.body).addClass(u),this._setEscapeEvent(),this._setResizeEvent(),s(this._element).on(l.CLICK_DISMISS,f.DATA_DISMISS,function(e){return t.hide(e)}),s(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){s(t._element).one(l.MOUSEUP_DISMISS,function(e){s(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))},m.prototype.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var n=Util.supportsTransitionEnd()&&s(this._element).hasClass(d);n&&(this._isTransitioning=!0);var i=s.Event(l.HIDE);s(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),s(document).off(l.FOCUSIN),s(this._element).removeClass(p),s(this._element).off(l.CLICK_DISMISS),s(this._dialog).off(l.MOUSEDOWN_DISMISS),n?s(this._element).one(Util.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(300):this._hideModal())},m.prototype.dispose=function(){s.removeData(this._element,a),s(window,document,this._element,this._backdrop).off(e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},m.prototype._getConfig=function(e){return e=s.extend({},i,e),Util.typeCheckConfig(t,e,o),e},m.prototype._showElement=function(e){var t=this,n=Util.supportsTransitionEnd()&&s(this._element).hasClass(d);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Util.reflow(this._element),s(this._element).addClass(p),this._config.focus&&this._enforceFocus();function i(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,s(t._element).trigger(o)}var o=s.Event(l.SHOWN,{relatedTarget:e});n?s(this._dialog).one(Util.TRANSITION_END,i).emulateTransitionEnd(300):i()},m.prototype._enforceFocus=function(){var t=this;s(document).off(l.FOCUSIN).on(l.FOCUSIN,function(e){document===e.target||t._element===e.target||s(t._element).has(e.target).length||t._element.focus()})},m.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?s(this._element).on(l.KEYDOWN_DISMISS,function(e){27===e.which&&t.hide()}):this._isShown||s(this._element).off(l.KEYDOWN_DISMISS)},m.prototype._setResizeEvent=function(){var t=this;this._isShown?s(window).on(l.RESIZE,function(e){return t._handleUpdate(e)}):s(window).off(l.RESIZE)},m.prototype._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){s(document.body).removeClass(u),e._resetAdjustments(),e._resetScrollbar(),s(e._element).trigger(l.HIDDEN)})},m.prototype._removeBackdrop=function(){this._backdrop&&(s(this._backdrop).remove(),this._backdrop=null)},m.prototype._showBackdrop=function(e){var t,n=this,i=s(this._element).hasClass(d)?d:"";if(this._isShown&&this._config.backdrop){var o=Util.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=c,i&&s(this._backdrop).addClass(i),s(this._backdrop).appendTo(document.body),s(this._element).on(l.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),o&&Util.reflow(this._backdrop),s(this._backdrop).addClass(p),!e)return;if(!o)return void e();s(this._backdrop).one(Util.TRANSITION_END,e).emulateTransitionEnd(150)}else{!this._isShown&&this._backdrop?(s(this._backdrop).removeClass(p),t=function(){n._removeBackdrop(),e&&e()},Util.supportsTransitionEnd()&&s(this._element).hasClass(d)?s(this._backdrop).one(Util.TRANSITION_END,t).emulateTransitionEnd(150):t()):e&&e()}},m.prototype._handleUpdate=function(){this._adjustDialog()},m.prototype._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},m.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},m.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},m.prototype._setScrollbar=function(){var e=parseInt(s(f.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=e+this._scrollbarWidth+"px")},m.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},m.prototype._getScrollbarWidth=function(){var e=document.createElement("div");e.className=r,document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},m._jQueryInterface=function(n,i){return this.each(function(){var e=s(this).data(a),t=s.extend({},m.Default,s(this).data(),"object"===(void 0===n?"undefined":_typeof(n))&&n);if(e||(e=new m(this,t),s(this).data(a,e)),"string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n](i)}else t.show&&e.show(i)})},_createClass(m,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return i}}]),m);function m(e,t){_classCallCheck(this,m),this._config=this._getConfig(t),this._element=e,this._dialog=s(e).find(f.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return s(document).on(l.CLICK_DATA_API,f.DATA_TOGGLE,function(e){var t=this,n=void 0,i=Util.getSelectorFromElement(this);i&&(n=s(i)[0]);var o=s(n).data(a)?"toggle":s.extend({},s(n).data(),s(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var r=s(n).one(l.SHOW,function(e){e.isDefaultPrevented()||r.one(l.HIDDEN,function(){s(t).is(":visible")&&t.focus()})});h._jQueryInterface.call(s(n),o,this)}),s.fn[t]=h._jQueryInterface,s.fn[t].Constructor=h,s.fn[t].noConflict=function(){return s.fn[t]=n,h._jQueryInterface},h}(jQuery);!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(window.jQuery||window.Zepto)}(function(u){function e(){}function d(e,t){m.ev.on("mfp"+e+w,t)}function p(e,t,n,i){var o=document.createElement("div");return o.className="mfp-"+e,n&&(o.innerHTML=n),i?t&&t.appendChild(o):(o=u(o),t&&o.appendTo(t)),o}function f(e,t){m.ev.triggerHandler("mfp"+e,t),m.st.callbacks&&(e=e.charAt(0).toLowerCase()+e.slice(1),m.st.callbacks[e]&&m.st.callbacks[e].apply(m,u.isArray(t)?t:[t]))}function h(e){return e===t&&m.currTemplate.closeBtn||(m.currTemplate.closeBtn=u(m.st.closeMarkup.replace("%title%",m.st.tClose)),t=e),m.currTemplate.closeBtn}function r(){u.magnificPopup.instance||((m=new e).init(),u.magnificPopup.instance=m)}var m,i,g,o,v,t,l="Close",c="BeforeClose",_="MarkupParse",y="Open",w=".mfp",C="mfp-ready",n="mfp-removing",s="mfp-prevent-close",a=!!window.jQuery,b=u(window);e.prototype={constructor:e,init:function(){var e=navigator.appVersion;m.isLowIE=m.isIE8=document.all&&!document.addEventListener,m.isAndroid=/android/gi.test(e),m.isIOS=/iphone|ipad|ipod/gi.test(e),m.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),m.probablyMobile=m.isAndroid||m.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),g=u(document),m.popupsCache={}},open:function(e){if(!1===e.isObj){m.items=e.items.toArray(),m.index=0;for(var t,n=e.items,i=0;i<n.length;i++)if((t=n[i]).parsed&&(t=t.el[0]),t===e.el[0]){m.index=i;break}}else m.items=u.isArray(e.items)?e.items:[e.items],m.index=e.index||0;if(!m.isOpen){m.types=[],v="",e.mainEl&&e.mainEl.length?m.ev=e.mainEl.eq(0):m.ev=g,e.key?(m.popupsCache[e.key]||(m.popupsCache[e.key]={}),m.currTemplate=m.popupsCache[e.key]):m.currTemplate={},m.st=u.extend(!0,{},u.magnificPopup.defaults,e),m.fixedContentPos="auto"===m.st.fixedContentPos?!m.probablyMobile:m.st.fixedContentPos,m.st.modal&&(m.st.closeOnContentClick=!1,m.st.closeOnBgClick=!1,m.st.showCloseBtn=!1,m.st.enableEscapeKey=!1),m.bgOverlay||(m.bgOverlay=p("bg").on("click"+w,function(){m.close()}),m.wrap=p("wrap").attr("tabindex",-1).on("click"+w,function(e){m._checkIfClose(e.target)&&m.close()}),m.container=p("container",m.wrap)),m.contentContainer=p("content"),m.st.preloader&&(m.preloader=p("preloader",m.container,m.st.tLoading));var o=u.magnificPopup.modules;for(i=0;i<o.length;i++){var r=(r=o[i]).charAt(0).toUpperCase()+r.slice(1);m["init"+r].call(m)}f("BeforeOpen"),m.st.showCloseBtn&&(m.st.closeBtnInside?(d(_,function(e,t,n,i){n.close_replaceWith=h(i.type)}),v+=" mfp-close-btn-in"):m.wrap.append(h())),m.st.alignTop&&(v+=" mfp-align-top"),m.fixedContentPos?m.wrap.css({overflow:m.st.overflowY,overflowX:"hidden",overflowY:m.st.overflowY}):m.wrap.css({top:b.scrollTop(),position:"absolute"}),!1!==m.st.fixedBgPos&&("auto"!==m.st.fixedBgPos||m.fixedContentPos)||m.bgOverlay.css({height:g.height(),position:"absolute"}),m.st.enableEscapeKey&&g.on("keyup"+w,function(e){27===e.keyCode&&m.close()}),b.on("resize"+w,function(){m.updateSize()}),m.st.closeOnContentClick||(v+=" mfp-auto-cursor"),v&&m.wrap.addClass(v);var s,a=m.wH=b.height(),l={};m.fixedContentPos&&(!m._hasScrollBar(a)||(s=m._getScrollbarSize())&&(l.marginRight=s)),m.fixedContentPos&&(m.isIE7?u("body, html").css("overflow","hidden"):l.overflow="hidden");var c=m.st.mainClass;return m.isIE7&&(c+=" mfp-ie7"),c&&m._addClassToMFP(c),m.updateItemHTML(),f("BuildControls"),u("html").css(l),m.bgOverlay.add(m.wrap).prependTo(m.st.prependTo||u(document.body)),m._lastFocusedEl=document.activeElement,setTimeout(function(){m.content?(m._addClassToMFP(C),m._setFocus()):m.bgOverlay.addClass(C),g.on("focusin"+w,m._onFocusIn)},16),m.isOpen=!0,m.updateSize(a),f(y),e}m.updateItemHTML()},close:function(){m.isOpen&&(f(c),m.isOpen=!1,m.st.removalDelay&&!m.isLowIE&&m.supportsTransition?(m._addClassToMFP(n),setTimeout(function(){m._close()},m.st.removalDelay)):m._close())},_close:function(){f(l);var e,t=n+" "+C+" ";m.bgOverlay.detach(),m.wrap.detach(),m.container.empty(),m.st.mainClass&&(t+=m.st.mainClass+" "),m._removeClassFromMFP(t),m.fixedContentPos&&(e={marginRight:""},m.isIE7?u("body, html").css("overflow",""):e.overflow="",u("html").css(e)),g.off("keyup.mfp focusin"+w),m.ev.off(w),m.wrap.attr("class","mfp-wrap").removeAttr("style"),m.bgOverlay.attr("class","mfp-bg"),m.container.attr("class","mfp-container"),!m.st.showCloseBtn||m.st.closeBtnInside&&!0!==m.currTemplate[m.currItem.type]||m.currTemplate.closeBtn&&m.currTemplate.closeBtn.detach(),m.st.autoFocusLast&&m._lastFocusedEl&&u(m._lastFocusedEl).focus(),m.currItem=null,m.content=null,m.currTemplate=null,m.prevHeight=0,f("AfterClose")},updateSize:function(e){var t,n;m.isIOS?(t=document.documentElement.clientWidth/window.innerWidth,n=window.innerHeight*t,m.wrap.css("height",n),m.wH=n):m.wH=e||b.height(),m.fixedContentPos||m.wrap.css("height",m.wH),f("Resize")},updateItemHTML:function(){var e=m.items[m.index];m.contentContainer.detach(),m.content&&m.content.detach(),e.parsed||(e=m.parseEl(m.index));var t,n=e.type;f("BeforeChange",[m.currItem?m.currItem.type:"",n]),m.currItem=e,m.currTemplate[n]||(t=!!m.st[n]&&m.st[n].markup,f("FirstMarkupParse",t),m.currTemplate[n]=!t||u(t)),o&&o!==e.type&&m.container.removeClass("mfp-"+o+"-holder");var i=m["get"+n.charAt(0).toUpperCase()+n.slice(1)](e,m.currTemplate[n]);m.appendContent(i,n),e.preloaded=!0,f("Change",e),o=e.type,m.container.prepend(m.contentContainer),f("AfterChange")},appendContent:function(e,t){(m.content=e)?m.st.showCloseBtn&&m.st.closeBtnInside&&!0===m.currTemplate[t]?m.content.find(".mfp-close").length||m.content.append(h()):m.content=e:m.content="",f("BeforeAppend"),m.container.addClass("mfp-"+t+"-holder"),m.contentContainer.append(m.content)},parseEl:function(e){var t,n=m.items[e];if((n=n.tagName?{el:u(n)}:(t=n.type,{data:n,src:n.src})).el){for(var i=m.types,o=0;o<i.length;o++)if(n.el.hasClass("mfp-"+i[o])){t=i[o];break}n.src=n.el.attr("data-mfp-src"),n.src||(n.src=n.el.attr("href"))}return n.type=t||m.st.type||"inline",n.index=e,n.parsed=!0,m.items[e]=n,f("ElementParse",n),m.items[e]},addGroup:function(t,n){function e(e){e.mfpEl=this,m._openClick(e,t,n)}var i="click.magnificPopup";(n=n||{}).mainEl=t,n.items?(n.isObj=!0,t.off(i).on(i,e)):(n.isObj=!1,n.delegate?t.off(i).on(i,n.delegate,e):(n.items=t).off(i).on(i,e))},_openClick:function(e,t,n){if((void 0!==n.midClick?n.midClick:u.magnificPopup.defaults.midClick)||!(2===e.which||e.ctrlKey||e.metaKey||e.altKey||e.shiftKey)){var i=void 0!==n.disableOn?n.disableOn:u.magnificPopup.defaults.disableOn;if(i)if(u.isFunction(i)){if(!i.call(m))return!0}else if(b.width()<i)return!0;e.type&&(e.preventDefault(),m.isOpen&&e.stopPropagation()),n.el=u(e.mfpEl),n.delegate&&(n.items=t.find(n.delegate)),m.open(n)}},updateStatus:function(e,t){var n;m.preloader&&(i!==e&&m.container.removeClass("mfp-s-"+i),t||"loading"!==e||(t=m.st.tLoading),f("UpdateStatus",n={status:e,text:t}),e=n.status,t=n.text,m.preloader.html(t),m.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),m.container.addClass("mfp-s-"+e),i=e)},_checkIfClose:function(e){if(!u(e).hasClass(s)){var t=m.st.closeOnContentClick,n=m.st.closeOnBgClick;if(t&&n)return!0;if(!m.content||u(e).hasClass("mfp-close")||m.preloader&&e===m.preloader[0])return!0;if(e===m.content[0]||u.contains(m.content[0],e)){if(t)return!0}else if(n&&u.contains(document,e))return!0;return!1}},_addClassToMFP:function(e){m.bgOverlay.addClass(e),m.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),m.wrap.removeClass(e)},_hasScrollBar:function(e){return(m.isIE7?g.height():document.body.scrollHeight)>(e||b.height())},_setFocus:function(){(m.st.focus?m.content.find(m.st.focus).eq(0):m.wrap).focus()},_onFocusIn:function(e){if(e.target!==m.wrap[0]&&!u.contains(m.wrap[0],e.target))return m._setFocus(),!1},_parseMarkup:function(o,e,t){var r;t.data&&(e=u.extend(t.data,e)),f(_,[o,e,t]),u.each(e,function(e,t){return void 0===t||!1===t||void(1<(r=e.split("_")).length?0<(n=o.find(w+"-"+r[0])).length&&("replaceWith"===(i=r[1])?n[0]!==t[0]&&n.replaceWith(t):"img"===i?n.is("img")?n.attr("src",t):n.replaceWith(u("<img>").attr("src",t).attr("class",n.attr("class"))):n.attr(r[1],t)):o.find(w+"-"+e).html(t));var n,i})},_getScrollbarSize:function(){var e;return void 0===m.scrollbarSize&&((e=document.createElement("div")).style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),m.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)),m.scrollbarSize}},u.magnificPopup={instance:null,proto:e.prototype,modules:[],open:function(e,t){return r(),(e=e?u.extend(!0,{},e):{}).isObj=!0,e.index=t||0,this.instance.open(e)},close:function(){return u.magnificPopup.instance&&u.magnificPopup.instance.close()},registerModule:function(e,t){t.options&&(u.magnificPopup.defaults[e]=t.options),u.extend(this.proto,t.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},u.fn.magnificPopup=function(e){r();var t,n,i,o=u(this);return"string"==typeof e?"open"===e?(t=a?o.data("magnificPopup"):o[0].magnificPopup,n=parseInt(arguments[1],10)||0,i=t.items?t.items[n]:(i=o,t.delegate&&(i=i.find(t.delegate)),i.eq(n)),m._openClick({mfpEl:i},o,t)):m.isOpen&&m[e].apply(m,Array.prototype.slice.call(arguments,1)):(e=u.extend(!0,{},e),a?o.data("magnificPopup",e):o[0].magnificPopup=e,m.addGroup(o,e)),o};function E(){S&&(T.after(S.addClass(I)).detach(),S=null)}var I,T,S,k="inline";u.magnificPopup.registerModule(k,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){m.types.push(k),d(l+"."+k,function(){E()})},getInline:function(e,t){if(E(),e.src){var n,i=m.st.inline,o=u(e.src);return o.length?((n=o[0].parentNode)&&n.tagName&&(T||(I=i.hiddenClass,T=p(I),I="mfp-"+I),S=o.after(T).detach().removeClass(I)),m.updateStatus("ready")):(m.updateStatus("error",i.tNotFound),o=u("<div>")),e.inlineElement=o}return m.updateStatus("ready"),m._parseMarkup(t,{},e),t}}});function A(){x&&u(document.body).removeClass(x)}function D(){A(),m.req&&m.req.abort()}var x,O="ajax";u.magnificPopup.registerModule(O,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){m.types.push(O),x=m.st.ajax.cursor,d(l+"."+O,D),d("BeforeChange."+O,D)},getAjax:function(o){x&&u(document.body).addClass(x),m.updateStatus("loading");var e=u.extend({url:o.src,success:function(e,t,n){var i={data:e,xhr:n};f("ParseAjax",i),m.appendContent(u(i.data),O),o.finished=!0,A(),m._setFocus(),setTimeout(function(){m.wrap.addClass(C)},16),m.updateStatus("ready"),f("AjaxContentAdded")},error:function(){A(),o.finished=o.loadError=!0,m.updateStatus("error",m.st.ajax.tError.replace("%url%",o.src))}},m.st.ajax.settings);return m.req=u.ajax(e),""}}});var P;u.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var e=m.st.image,t=".image";m.types.push("image"),d(y+t,function(){"image"===m.currItem.type&&e.cursor&&u(document.body).addClass(e.cursor)}),d(l+t,function(){e.cursor&&u(document.body).removeClass(e.cursor),b.off("resize"+w)}),d("Resize"+t,m.resizeImage),m.isLowIE&&d("AfterChange",m.resizeImage)},resizeImage:function(){var e,t=m.currItem;t&&t.img&&m.st.image.verticalFit&&(e=0,m.isLowIE&&(e=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",m.wH-e))},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,P&&clearInterval(P),e.isCheckingImgSize=!1,f("ImageHasSize",e),e.imgHidden&&(m.content&&m.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(t){var n=0,i=t.img[0],o=function(e){P&&clearInterval(P),P=setInterval(function(){0<i.naturalWidth?m._onImageHasSize(t):(200<n&&clearInterval(P),3===++n?o(10):40===n?o(50):100===n&&o(500))},e)};o(1)},getImage:function(e,t){var n,i=0,o=function(){e&&(e.img[0].complete?(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("ready")),e.hasSize=!0,e.loaded=!0,f("ImageLoadComplete")):++i<200?setTimeout(o,100):r())},r=function(){e&&(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("error",s.tError.replace("%url%",e.src))),e.hasSize=!0,e.loaded=!0,e.loadError=!0)},s=m.st.image,a=t.find(".mfp-img");return a.length&&((n=document.createElement("img")).className="mfp-img",e.el&&e.el.find("img").length&&(n.alt=e.el.find("img").attr("alt")),e.img=u(n).on("load.mfploader",o).on("error.mfploader",r),n.src=e.src,a.is("img")&&(e.img=e.img.clone()),0<(n=e.img[0]).naturalWidth?e.hasSize=!0:n.width||(e.hasSize=!1)),m._parseMarkup(t,{title:function(e){if(e.data&&void 0!==e.data.title)return e.data.title;var t=m.st.image.titleSrc;if(t){if(u.isFunction(t))return t.call(m,e);if(e.el)return e.el.attr(t)||""}return""}(e),img_replaceWith:e.img},e),m.resizeImage(),e.hasSize?(P&&clearInterval(P),e.loadError?(t.addClass("mfp-loading"),m.updateStatus("error",s.tError.replace("%url%",e.src))):(t.removeClass("mfp-loading"),m.updateStatus("ready"))):(m.updateStatus("loading"),e.loading=!0,e.hasSize||(e.imgHidden=!0,t.addClass("mfp-loading"),m.findImageSize(e))),t}}});var N;u.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,t,n,i,o,r,s=m.st.zoom,a=".zoom";s.enabled&&m.supportsTransition&&(t=s.duration,n=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),n="all "+s.duration/1e3+"s "+s.easing,i={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return i["-webkit-"+o]=i["-moz-"+o]=i["-o-"+o]=i[o]=n,t.css(i),t},i=function(){m.content.css("visibility","visible")},d("BuildControls"+a,function(){if(m._allowZoom()){if(clearTimeout(o),m.content.css("visibility","hidden"),!(e=m._getItemToZoom()))return void i();(r=n(e)).css(m._getOffset()),m.wrap.append(r),o=setTimeout(function(){r.css(m._getOffset(!0)),o=setTimeout(function(){i(),setTimeout(function(){r.remove(),e=r=null,f("ZoomAnimationEnded")},16)},t)},16)}}),d(c+a,function(){if(m._allowZoom()){if(clearTimeout(o),m.st.removalDelay=t,!e){if(!(e=m._getItemToZoom()))return;r=n(e)}r.css(m._getOffset(!0)),m.wrap.append(r),m.content.css("visibility","hidden"),setTimeout(function(){r.css(m._getOffset())},16)}}),d(l+a,function(){m._allowZoom()&&(i(),r&&r.remove(),e=null)}))},_allowZoom:function(){return"image"===m.currItem.type},_getItemToZoom:function(){return!!m.currItem.hasSize&&m.currItem.img},_getOffset:function(e){var t=e?m.currItem.img:m.st.zoom.opener(m.currItem.el||m.currItem),n=t.offset(),i=parseInt(t.css("padding-top"),10),o=parseInt(t.css("padding-bottom"),10);n.top-=u(window).scrollTop()-i;var r={width:t.width(),height:(a?t.innerHeight():t[0].offsetHeight)-o-i};return void 0===N&&(N=void 0!==document.createElement("p").style.MozTransform),N?r["-moz-transform"]=r.transform="translate("+n.left+"px,"+n.top+"px)":(r.left=n.left,r.top=n.top),r}}});function M(e){var t;!m.currTemplate[L]||(t=m.currTemplate[L].find("iframe")).length&&(e||(t[0].src="//about:blank"),m.isIE8&&t.css("display",e?"block":"none"))}var L="iframe";u.magnificPopup.registerModule(L,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){m.types.push(L),d("BeforeChange",function(e,t,n){t!==n&&(t===L?M():n===L&&M(!0))}),d(l+"."+L,function(){M()})},getIframe:function(e,t){var n=e.src,i=m.st.iframe;u.each(i.patterns,function(){if(-1<n.indexOf(this.index))return this.id&&(n="string"==typeof this.id?n.substr(n.lastIndexOf(this.id)+this.id.length,n.length):this.id.call(this,n)),n=this.src.replace("%id%",n),!1});var o={};return i.srcAction&&(o[i.srcAction]=n),m._parseMarkup(t,o,e),m.updateStatus("ready"),t}}});function W(e){var t=m.items.length;return t-1<e?e-t:e<0?t+e:e}function j(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)}u.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var r=m.st.gallery,e=".mfp-gallery";if(m.direction=!0,!r||!r.enabled)return!1;v+=" mfp-gallery",d(y+e,function(){r.navigateByImgClick&&m.wrap.on("click"+e,".mfp-img",function(){if(1<m.items.length)return m.next(),!1}),g.on("keydown"+e,function(e){37===e.keyCode?m.prev():39===e.keyCode&&m.next()})}),d("UpdateStatus"+e,function(e,t){t.text&&(t.text=j(t.text,m.currItem.index,m.items.length))}),d(_+e,function(e,t,n,i){var o=m.items.length;n.counter=1<o?j(r.tCounter,i.index,o):""}),d("BuildControls"+e,function(){var e,t,n;1<m.items.length&&r.arrows&&!m.arrowLeft&&(e=r.arrowMarkup,t=m.arrowLeft=u(e.replace(/%title%/gi,r.tPrev).replace(/%dir%/gi,"left")).addClass(s),n=m.arrowRight=u(e.replace(/%title%/gi,r.tNext).replace(/%dir%/gi,"right")).addClass(s),t.click(function(){m.prev()}),n.click(function(){m.next()}),m.container.append(t.add(n)))}),d("Change"+e,function(){m._preloadTimeout&&clearTimeout(m._preloadTimeout),m._preloadTimeout=setTimeout(function(){m.preloadNearbyImages(),m._preloadTimeout=null},16)}),d(l+e,function(){g.off(e),m.wrap.off("click"+e),m.arrowRight=m.arrowLeft=null})},next:function(){m.direction=!0,m.index=W(m.index+1),m.updateItemHTML()},prev:function(){m.direction=!1,m.index=W(m.index-1),m.updateItemHTML()},goTo:function(e){m.direction=e>=m.index,m.index=e,m.updateItemHTML()},preloadNearbyImages:function(){for(var e=m.st.gallery.preload,t=Math.min(e[0],m.items.length),n=Math.min(e[1],m.items.length),i=1;i<=(m.direction?n:t);i++)m._preloadItem(m.index+i);for(i=1;i<=(m.direction?t:n);i++)m._preloadItem(m.index-i)},_preloadItem:function(e){var t;e=W(e),m.items[e].preloaded||((t=m.items[e]).parsed||(t=m.parseEl(e)),f("LazyLoad",t),"image"===t.type&&(t.img=u('<img class="mfp-img" />').on("load.mfploader",function(){t.hasSize=!0}).on("error.mfploader",function(){t.hasSize=!0,t.loadError=!0,f("LazyLoadError",t)}).attr("src",t.src)),t.preloaded=!0)}}});var H="retina";u.magnificPopup.registerModule(H,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){var n,i;1<window.devicePixelRatio&&(n=m.st.retina,i=n.ratio,1<(i=isNaN(i)?i():i)&&(d("ImageHasSize."+H,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/i,width:"100%"})}),d("ElementParse."+H,function(e,t){t.src=n.replaceSrc(t,i)})))}}}),r()}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(d){function e(){for(var e=p.scrollTop(),t=f.height(),n=t-m,i=n<e?n-e:0,o=0,r=h.length;o<r;o++){var s,a,l,c=h[o],u=c.stickyWrapper.offset().top-c.topSpacing-i;c.stickyWrapper.css("height",c.stickyElement.outerHeight()),e<=u?null!==c.currentTop&&(c.stickyElement.css({width:"",position:"",top:"","z-index":""}),c.stickyElement.parent().removeClass(c.className),c.stickyElement.trigger("sticky-end",[c]),c.currentTop=null):((s=t-c.stickyElement.outerHeight()-c.topSpacing-c.bottomSpacing-e-i)<0?s+=c.topSpacing:s=c.topSpacing,c.currentTop!==s&&(c.getWidthFrom?a=d(c.getWidthFrom).width()||null:c.widthFromWrapper&&(a=c.stickyWrapper.width()),null==a&&(a=c.stickyElement.width()),c.stickyElement.css("width",a).css("position","fixed").css("top",s).css("z-index",c.zIndex),c.stickyElement.parent().addClass(c.className),null===c.currentTop?c.stickyElement.trigger("sticky-start",[c]):c.stickyElement.trigger("sticky-update",[c]),c.currentTop===c.topSpacing&&c.currentTop>s||null===c.currentTop&&s<c.topSpacing?c.stickyElement.trigger("sticky-bottom-reached",[c]):null!==c.currentTop&&s===c.topSpacing&&c.currentTop<s&&c.stickyElement.trigger("sticky-bottom-unreached",[c]),c.currentTop=s),l=c.stickyWrapper.parent(),c.stickyElement.offset().top+c.stickyElement.outerHeight()>=l.offset().top+l.outerHeight()&&c.stickyElement.offset().top<=c.topSpacing?c.stickyElement.css("position","absolute").css("top","").css("bottom",0).css("z-index",""):c.stickyElement.css("position","fixed").css("top",s).css("bottom","").css("z-index",c.zIndex))}}function t(){m=p.height();for(var e=0,t=h.length;e<t;e++){var n=h[e],i=null;n.getWidthFrom?n.responsiveWidth&&(i=d(n.getWidthFrom).width()):n.widthFromWrapper&&(i=n.stickyWrapper.width()),null!=i&&n.stickyElement.css("width",i)}}var n=Array.prototype.slice,i=Array.prototype.splice,s={topSpacing:0,bottomSpacing:0,className:"is-sticky",wrapperClassName:"sticky-wrapper",center:!1,getWidthFrom:"",widthFromWrapper:!0,responsiveWidth:!1,zIndex:"auto"},p=d(window),f=d(document),h=[],m=p.height(),a={init:function(e){var r=d.extend({},s,e);return this.each(function(){var e=d(this),t=e.attr("id"),n=t?t+"-"+s.wrapperClassName:s.wrapperClassName,i=d("<div></div>").attr("id",n).addClass(r.wrapperClassName);e.wrapAll(i);var o=e.parent();r.center&&o.css({width:e.outerWidth(),marginLeft:"auto",marginRight:"auto"}),"right"===e.css("float")&&e.css({float:"none"}).parent().css({float:"right"}),r.stickyElement=e,r.stickyWrapper=o,r.currentTop=null,h.push(r),a.setWrapperHeight(this),a.setupChangeListeners(this)})},setWrapperHeight:function(e){var t=d(e),n=t.parent();n&&n.css("height",t.outerHeight())},setupChangeListeners:function(t){window.MutationObserver?new window.MutationObserver(function(e){(e[0].addedNodes.length||e[0].removedNodes.length)&&a.setWrapperHeight(t)}).observe(t,{subtree:!0,childList:!0}):(t.addEventListener("DOMNodeInserted",function(){a.setWrapperHeight(t)},!1),t.addEventListener("DOMNodeRemoved",function(){a.setWrapperHeight(t)},!1))},update:e,unstick:function(e){return this.each(function(){for(var e=d(this),t=-1,n=h.length;0<n--;)h[n].stickyElement.get(0)===this&&(i.call(h,n,1),t=n);-1!==t&&(e.unwrap(),e.css({width:"",position:"",top:"",float:"","z-index":""}))})}};window.addEventListener?(window.addEventListener("scroll",e,!1),window.addEventListener("resize",t,!1)):window.attachEvent&&(window.attachEvent("onscroll",e),window.attachEvent("onresize",t)),d.fn.sticky=function(e){return a[e]?a[e].apply(this,n.call(arguments,1)):"object"!=typeof e&&e?void d.error("Method "+e+" does not exist on jQuery.sticky"):a.init.apply(this,arguments)},d.fn.unstick=function(e){return a[e]?a[e].apply(this,n.call(arguments,1)):"object"!=typeof e&&e?void d.error("Method "+e+" does not exist on jQuery.sticky"):a.unstick.apply(this,arguments)},d(function(){setTimeout(e,0)})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):t(e.jQuery)}(this,function(h){"use strict";function m(e,t){var n=e.getBoundingClientRect(),i=n.top,o=n.bottom,r=n.left,s=n.right,a=h.extend({tolerance:0,viewport:window},t),l=!1,c=a.viewport.jquery?a.viewport:h(a.viewport);c.length||(console.warn("isInViewport: The viewport selector you have provided matches no element on page."),console.warn("isInViewport: Defaulting to viewport as window"),c=h(window));var u,d=c.height(),p=c.width(),f=c[0].toString();return c[0]!==window&&"[object Window]"!==f&&"[object DOMWindow]"!==f&&(i-=(u=c[0].getBoundingClientRect()).top,o-=u.top,r-=u.left,s-=u.left,m.scrollBarWidth=m.scrollBarWidth||function(e){var t=h("<div></div>").css({width:"100%"});e.append(t);var n=e.width()-t.width();return t.remove(),n}(c),p-=m.scrollBarWidth),a.tolerance=~~Math.round(parseFloat(a.tolerance)),a.tolerance<0&&(a.tolerance=d+a.tolerance),s<=0||p<=r?l:l=a.tolerance?i<=a.tolerance&&o>=a.tolerance:0<o&&i<=d}function i(e){if(e){var t=e.split(",");return 1===t.length&&isNaN(t[0])&&(t[1]=t[0],t[0]=void 0),{tolerance:t[0]?t[0].trim():void 0,viewport:t[1]?h(t[1].trim()):void 0}}return{}}(h=h&&h.hasOwnProperty("default")?h.default:h).extend(h.expr.pseudos||h.expr[":"],{"in-viewport":h.expr.createPseudo?h.expr.createPseudo(function(t){return function(e){return m(e,i(t))}}):function(e,t,n){return m(e,i(n[3]))}}),h.fn.isInViewport=function(n){return this.filter(function(e,t){return m(t,n)})},h.fn.run=function(e){var n=this;1===arguments.length&&"function"==typeof e&&(e=[e]);if(e instanceof Array)return e.forEach(function(t){"function"!=typeof t?(console.warn("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions"),console.warn("isInViewport: Ignoring non-function values in array and moving on")):[].slice.call(n).forEach(function(e){return t.call(h(e))})}),this;throw new SyntaxError("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

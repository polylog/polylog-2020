!function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,0,t),e.mobile}):n(e.jQuery,0,t)}(this,document,function(e,t,n,i){var o,r,c,s,a,u,l,d,p,f,h;function m(e,t,n,i){var o=n.type;n.type=t,i?c.event.trigger(n,a,e):c.event.dispatch.call(e,n),n.type=o}!function(p,e,f){var l,t,o="virtualMouseBindings",c="virtualTouchID",n="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),h="clientX clientY pageX pageY screenX screenY".split(" "),i=p.event.mouseHooks?p.event.mouseHooks.props:[],m=p.event.props.concat(i),r={},s=0,a=0,u=0,d=!1,g=[],v=!1,_=!1,y="addEventListener"in e,w=p(e),C=1,b=0;function E(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function I(e){for(var t,n,i={};e;){for(n in t=p.data(e,o))t[n]&&(i[n]=i.hasVirtualBinding=!0);e=e.parentNode}return i}function T(){_=!0}function S(){_=!1}function k(){A(),s=setTimeout(function(){b=s=0,g.length=0,v=!1,T()},p.vmouse.resetTimerDuration)}function A(){s&&(clearTimeout(s),s=0)}function D(e,t,n){var i;return(n&&n[e]||!n&&function(e,t){for(var n;e;){if((n=p.data(e,o))&&(!t||n[t]))return e;e=e.parentNode}}(t.target,e))&&(i=function(e,t){var n,i,o,r,s,a,l,c,u,d=e.type;if((e=p.Event(e)).type=t,n=e.originalEvent,i=p.event.props,-1<d.search(/^(mouse|click)/)&&(i=m),n)for(l=i.length;l;)e[r=i[--l]]=n[r];if(-1<d.search(/mouse(down|up)|click/)&&!e.which&&(e.which=1),-1!==d.search(/^touch/)&&(d=(o=E(n)).touches,s=o.changedTouches,a=d&&d.length?d[0]:s&&s.length?s[0]:f))for(c=0,u=h.length;c<u;c++)e[r=h[c]]=a[r];return e}(t,e),p(t.target).trigger(i)),i}function x(e){var t,n=p.data(e.target,c);v||b&&b===n||(t=D("v"+e.type,e))&&(t.isDefaultPrevented()&&e.preventDefault(),t.isPropagationStopped()&&e.stopPropagation(),t.isImmediatePropagationStopped()&&e.stopImmediatePropagation())}function O(e){var t,n,i,o=E(e).touches;o&&1===o.length&&(n=I(t=e.target)).hasVirtualBinding&&(b=C++,p.data(t,c,b),A(),S(),d=!1,i=E(e).touches[0],a=i.pageX,u=i.pageY,D("vmouseover",e,n),D("vmousedown",e,n))}function P(e){_||(d||D("vmousecancel",e,I(e.target)),d=!0,k())}function N(e){var t,n,i,o;_||(t=E(e).touches[0],n=d,i=p.vmouse.moveDistanceThreshold,o=I(e.target),(d=d||Math.abs(t.pageX-a)>i||Math.abs(t.pageY-u)>i)&&!n&&D("vmousecancel",e,o),D("vmousemove",e,o),k())}function M(e){var t,n,i;_||(T(),D("vmouseup",e,t=I(e.target)),d||(n=D("vclick",e,t))&&n.isDefaultPrevented()&&(i=E(e).changedTouches[0],g.push({touchID:b,x:i.clientX,y:i.clientY}),v=!0),D("vmouseout",e,t),d=!1,k())}function L(e){var t,n=p.data(e,o);if(n)for(t in n)if(n[t])return 1}function W(){}for(p.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500},t=0;t<n.length;t++)p.event.special[n[t]]=function(n){var i=n.substr(1);return{setup:function(){L(this)||p.data(this,o,{}),p.data(this,o)[n]=!0,r[n]=(r[n]||0)+1,1===r[n]&&w.bind(i,x),p(this).bind(i,W),y&&(r.touchstart=(r.touchstart||0)+1,1===r.touchstart&&w.bind("touchstart",O).bind("touchend",M).bind("touchmove",N).bind("scroll",P))},teardown:function(){--r[n],r[n]||w.unbind(i,x),y&&(--r.touchstart,r.touchstart||w.unbind("touchstart",O).unbind("touchmove",N).unbind("touchend",M).unbind("scroll",P));var e=p(this),t=p.data(this,o);t&&(t[n]=!1),e.unbind(i,W),L(this)||e.removeData(o)}}}(n[t]);y&&e.addEventListener("click",function(e){var t,n,i,o,r,s=g.length,a=e.target;if(s)for(t=e.clientX,n=e.clientY,l=p.vmouse.clickDistanceThreshold,i=a;i;){for(o=0;o<s;o++)if(r=g[o],i===a&&Math.abs(r.x-t)<l&&Math.abs(r.y-n)<l||p.data(i,c)===r.touchID)return e.preventDefault(),void e.stopPropagation();i=i.parentNode}},!0)}(e,n),e.mobile={},o=e,r={touch:"ontouchend"in n},o.mobile.support=o.mobile.support||{},o.extend(o.support,r),o.extend(o.mobile.support,r),s=this,u=(c=e)(n),l=c.mobile.support.touch,d="touchmove scroll",p=l?"touchstart":"mousedown",f=l?"touchend":"mouseup",h=l?"touchmove":"mousemove",c.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(e,t){c.fn[t]=function(e){return e?this.bind(t,e):this.trigger(t)},c.attrFn&&(c.attrFn[t]=!0)}),c.event.special.scrollstart={enabled:!0,setup:function(){var n,t,i=this;function o(e,t){m(i,(n=t)?"scrollstart":"scrollstop",e)}c(i).bind(d,function(e){c.event.special.scrollstart.enabled&&(n||o(e,!0),clearTimeout(t),t=setTimeout(function(){o(e,!1)},50))})},teardown:function(){c(this).unbind(d)}},c.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var s=this,a=c(s),l=!1;a.bind("vmousedown",function(e){if(l=!1,e.which&&1!==e.which)return!1;var t,n=e.target;function i(){clearTimeout(t)}function o(){i(),a.unbind("vclick",r).unbind("vmouseup",i),u.unbind("vmousecancel",o)}function r(e){o(),l||n!==e.target?l&&e.preventDefault():m(s,"tap",e)}a.bind("vmouseup",i).bind("vclick",r),u.bind("vmousecancel",o),t=setTimeout(function(){c.event.special.tap.emitTapOnTaphold||(l=!0),m(s,"taphold",c.Event("taphold",{target:n}))},c.event.special.tap.tapholdThreshold)})},teardown:function(){c(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),u.unbind("vmousecancel")}},c.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var t=s.pageXOffset,n=s.pageYOffset,i=e.clientX,o=e.clientY;return 0===e.pageY&&Math.floor(o)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(i)>Math.floor(e.pageX)?(i-=t,o-=n):(o<e.pageY-n||i<e.pageX-t)&&(i=e.pageX-t,o=e.pageY-n),{x:i,y:o}},start:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y],origin:c(e.target)}},stop:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y]}},handleSwipe:function(e,t,n,i){if(t.time-e.time<c.event.special.swipe.durationThreshold&&Math.abs(e.coords[0]-t.coords[0])>c.event.special.swipe.horizontalDistanceThreshold&&Math.abs(e.coords[1]-t.coords[1])<c.event.special.swipe.verticalDistanceThreshold){var o=e.coords[0]>t.coords[0]?"swipeleft":"swiperight";return m(n,"swipe",c.Event("swipe",{target:i,swipestart:e,swipestop:t}),!0),m(n,o,c.Event(o,{target:i,swipestart:e,swipestop:t}),!0),!0}return!1},eventInProgress:!1,setup:function(){var r=this,e=c(r),s={},t=c.data(this,"mobile-events");t||(t={length:0},c.data(this,"mobile-events",t)),t.length++,(t.swipe=s).start=function(e){var t,n,i,o;c.event.special.swipe.eventInProgress||(c.event.special.swipe.eventInProgress=!0,n=c.event.special.swipe.start(e),i=e.target,o=!1,s.move=function(e){n&&!e.isDefaultPrevented()&&(t=c.event.special.swipe.stop(e),o||(o=c.event.special.swipe.handleSwipe(n,t,r,i))&&(c.event.special.swipe.eventInProgress=!1),Math.abs(n.coords[0]-t.coords[0])>c.event.special.swipe.scrollSupressionThreshold&&e.preventDefault())},s.stop=function(){o=!0,c.event.special.swipe.eventInProgress=!1,u.off(h,s.move),s.move=null},u.on(h,s.move).one(f,s.stop))},e.on(p,s.start)},teardown:function(){var e,t=c.data(this,"mobile-events");t&&(e=t.swipe,delete t.swipe,t.length--,0===t.length&&c.removeData(this,"mobile-events")),e&&(e.start&&c(this).off(p,e.start),e.move&&u.off(h,e.move),e.stop&&u.off(f,e.stop))}},c.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},function(e,t){c.event.special[e]={setup:function(){c(this).bind(t,c.noop)},teardown:function(){c(this).unbind(t)}}})});var Util=function(i){var t=!1,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};function e(e){var t=this,n=!1;return i(this).one(o.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||o.triggerTransitionEnd(t)},e),this}var o={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");return t||(t=e.getAttribute("href")||"",t=/^#[a-z]/i.test(t)?t:null),t},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){i(e).trigger(t.end)},supportsTransitionEnd:function(){return Boolean(t)},typeCheckConfig:function(e,t,n){for(var i in n)if(n.hasOwnProperty(i)){var o=n[i],r=t[i],s=r&&((l=r)[0]||l).nodeType?"element":(a=r,{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".')}var a,l}};return t=function(){if(window.QUnit)return!1;var e=document.createElement("bootstrap");for(var t in n)if(void 0!==e.style[t])return{end:n[t]};return!1}(),i.fn.emulateTransitionEnd=e,o.supportsTransitionEnd()&&(i.event.special[o.TRANSITION_END]={bindType:t.end,delegateType:t.end,handle:function(e){if(i(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),o}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Alert=function(i){var e="alert",o="bs.alert",t="."+o,n=i.fn[e],r={CLOSE:"close"+t,CLOSED:"closed"+t,CLICK_DATA_API:"click"+t+".data-api"},s="alert",a="fade",l="show",c=(u.prototype.close=function(e){e=e||this._element;var t=this._getRootElement(e);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},u.prototype.dispose=function(){i.removeData(this._element,o),this._element=null},u.prototype._getRootElement=function(e){var t=Util.getSelectorFromElement(e),n=!1;return t&&(n=i(t)[0]),n=n||i(e).closest("."+s)[0]},u.prototype._triggerCloseEvent=function(e){var t=i.Event(r.CLOSE);return i(e).trigger(t),t},u.prototype._removeElement=function(t){var n=this;i(t).removeClass(l),Util.supportsTransitionEnd()&&i(t).hasClass(a)?i(t).one(Util.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},u.prototype._destroyElement=function(e){i(e).detach().trigger(r.CLOSED).remove()},u._jQueryInterface=function(n){return this.each(function(){var e=i(this),t=e.data(o);t||(t=new u(this),e.data(o,t)),"close"===n&&t[n](this)})},u._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},_createClass(u,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),u);function u(e){_classCallCheck(this,u),this._element=e}return i(document).on(r.CLICK_DATA_API,'[data-dismiss="alert"]',c._handleDismiss(new c)),i.fn[e]=c._jQueryInterface,i.fn[e].Constructor=c,i.fn[e].noConflict=function(){return i.fn[e]=n,c._jQueryInterface},c}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Button=function(o){var e="button",n="bs.button",t="."+n,i=".data-api",r=o.fn[e],s="active",a="btn",l="focus",c='[data-toggle^="button"]',u='[data-toggle="buttons"]',d="input",p=".active",f=".btn",h={CLICK_DATA_API:"click"+t+i,FOCUS_BLUR_DATA_API:"focus"+t+i+" blur"+t+i},m=(g.prototype.toggle=function(){var e,t,n=!0,i=o(this._element).closest(u)[0];!i||(e=o(this._element).find(d)[0])&&("radio"===e.type&&(e.checked&&o(this._element).hasClass(s)?n=!1:(t=o(i).find(p)[0])&&o(t).removeClass(s)),n&&(e.checked=!o(this._element).hasClass(s),o(e).trigger("change")),e.focus()),this._element.setAttribute("aria-pressed",!o(this._element).hasClass(s)),n&&o(this._element).toggleClass(s)},g.prototype.dispose=function(){o.removeData(this._element,n),this._element=null},g._jQueryInterface=function(t){return this.each(function(){var e=o(this).data(n);e||(e=new g(this),o(this).data(n,e)),"toggle"===t&&e[t]()})},_createClass(g,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),g);function g(e){_classCallCheck(this,g),this._element=e}return o(document).on(h.CLICK_DATA_API,c,function(e){e.preventDefault();var t=e.target;o(t).hasClass(a)||(t=o(t).closest(f)),m._jQueryInterface.call(o(t),"toggle")}).on(h.FOCUS_BLUR_DATA_API,c,function(e){var t=o(e.target).closest(f)[0];o(t).toggleClass(l,/^focus(in)?$/.test(e.type))}),o.fn[e]=m._jQueryInterface,o.fn[e].Constructor=m,o.fn[e].noConflict=function(){return o.fn[e]=r,m._jQueryInterface},m}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Carousel=function(u){var t="carousel",r="bs.carousel",e="."+r,n=".data-api",i=u.fn[t],o={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},s={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},p={SLIDE:"slide"+e,SLID:"slid"+e,KEYDOWN:"keydown"+e,MOUSEENTER:"mouseenter"+e,MOUSELEAVE:"mouseleave"+e,LOAD_DATA_API:"load"+e+n,CLICK_DATA_API:"click"+e+n},a="carousel",f="active",h="slide",m="carousel-item-right",g="carousel-item-left",v="carousel-item-next",_="carousel-item-prev",y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},l=(c.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.NEXT)},c.prototype.nextWhenVisible=function(){document.hidden||this.next()},c.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.PREVIOUS)},c.prototype.pause=function(e){e||(this._isPaused=!0),u(this._element).find(y.NEXT_PREV)[0]&&Util.supportsTransitionEnd()&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},c.prototype.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},c.prototype.to=function(e){var t=this;this._activeElement=u(this._element).find(y.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)u(this._element).one(p.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();var i=n<e?d.NEXT:d.PREVIOUS;this._slide(i,this._items[e])}},c.prototype.dispose=function(){u(this._element).off(e),u.removeData(this._element,r),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},c.prototype._getConfig=function(e){return e=u.extend({},o,e),Util.typeCheckConfig(t,e,s),e},c.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&u(this._element).on(p.KEYDOWN,function(e){return t._keydown(e)}),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||u(this._element).on(p.MOUSEENTER,function(e){return t.pause(e)}).on(p.MOUSELEAVE,function(e){return t.cycle(e)})},c.prototype._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next();break;default:return}},c.prototype._getItemIndex=function(e){return this._items=u.makeArray(u(e).parent().find(y.ITEM)),this._items.indexOf(e)},c.prototype._getItemByDirection=function(e,t){var n=e===d.NEXT,i=e===d.PREVIOUS,o=this._getItemIndex(t),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return t;var s=(o+(e===d.PREVIOUS?-1:1))%this._items.length;return-1==s?this._items[this._items.length-1]:this._items[s]},c.prototype._triggerSlideEvent=function(e,t){var n=u.Event(p.SLIDE,{relatedTarget:e,direction:t});return u(this._element).trigger(n),n},c.prototype._setActiveIndicatorElement=function(e){var t;this._indicatorsElement&&(u(this._indicatorsElement).find(y.ACTIVE).removeClass(f),(t=this._indicatorsElement.children[this._getItemIndex(e)])&&u(t).addClass(f))},c.prototype._slide=function(e,t){var n,i=this,o=u(this._element).find(y.ACTIVE_ITEM)[0],r=t||o&&this._getItemByDirection(e,o),s=Boolean(this._interval),a=void 0,l=void 0,c=void 0,c=e===d.NEXT?(a=g,l=v,d.LEFT):(a=m,l=_,d.RIGHT);r&&u(r).hasClass(f)?this._isSliding=!1:this._triggerSlideEvent(r,c).isDefaultPrevented()||o&&r&&(this._isSliding=!0,s&&this.pause(),this._setActiveIndicatorElement(r),n=u.Event(p.SLID,{relatedTarget:r,direction:c}),Util.supportsTransitionEnd()&&u(this._element).hasClass(h)?(u(r).addClass(l),Util.reflow(r),u(o).addClass(a),u(r).addClass(a),u(o).one(Util.TRANSITION_END,function(){u(r).removeClass(a+" "+l).addClass(f),u(o).removeClass(f+" "+l+" "+a),i._isSliding=!1,setTimeout(function(){return u(i._element).trigger(n)},0)}).emulateTransitionEnd(600)):(u(o).removeClass(f),u(r).addClass(f),this._isSliding=!1,u(this._element).trigger(n)),s&&this.cycle())},c._jQueryInterface=function(i){return this.each(function(){var e=u(this).data(r),t=u.extend({},o,u(this).data());"object"===(void 0===i?"undefined":_typeof(i))&&u.extend(t,i);var n="string"==typeof i?i:t.slide;if(e||(e=new c(this,t),u(this).data(r,e)),"number"==typeof i)e.to(i);else if("string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n]()}else t.interval&&(e.pause(),e.cycle())})},c._dataApiClickHandler=function(e){var t,n,i,o=Util.getSelectorFromElement(this);!o||(t=u(o)[0])&&u(t).hasClass(a)&&(n=u.extend({},u(t).data(),u(this).data()),(i=this.getAttribute("data-slide-to"))&&(n.interval=!1),c._jQueryInterface.call(u(t),n),i&&u(t).data(r).to(i),e.preventDefault())},_createClass(c,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),c);function c(e,t){_classCallCheck(this,c),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(t),this._element=u(e)[0],this._indicatorsElement=u(this._element).find(y.INDICATORS)[0],this._addEventListeners()}return u(document).on(p.CLICK_DATA_API,y.DATA_SLIDE,l._dataApiClickHandler),u(window).on(p.LOAD_DATA_API,function(){u(y.DATA_RIDE).each(function(){var e=u(this);l._jQueryInterface.call(e,e.data())})}),u.fn[t]=l._jQueryInterface,u.fn[t].Constructor=l,u.fn[t].noConflict=function(){return u.fn[t]=i,l._jQueryInterface},l}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Collapse=function(a){var t="collapse",l="bs.collapse",e="."+l,n=a.fn[t],o={toggle:!0,parent:""},i={toggle:"boolean",parent:"string"},c={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},u="show",d="collapse",p="collapsing",f="collapsed",r="width",s="height",h=".card > .show, .card > .collapsing",m='[data-toggle="collapse"]',g=(v.prototype.toggle=function(){a(this._element).hasClass(u)?this.hide():this.show()},v.prototype.show=function(){var e,t,n,i,o,r,s=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");a(this._element).hasClass(u)||(t=e=void 0,this._parent&&((e=a.makeArray(a(this._parent).find(h))).length||(e=null)),e&&(t=a(e).data(l))&&t._isTransitioning||(n=a.Event(c.SHOW),a(this._element).trigger(n),n.isDefaultPrevented()||(e&&(v._jQueryInterface.call(a(e),"hide"),t||a(e).data(l,null)),i=this._getDimension(),a(this._element).removeClass(d).addClass(p),this._element.style[i]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&a(this._triggerArray).removeClass(f).attr("aria-expanded",!0),this.setTransitioning(!0),o=function(){a(s._element).removeClass(p).addClass(d).addClass(u),s._element.style[i]="",s.setTransitioning(!1),a(s._element).trigger(c.SHOWN)},Util.supportsTransitionEnd()?(r="scroll"+(i[0].toUpperCase()+i.slice(1)),a(this._element).one(Util.TRANSITION_END,o).emulateTransitionEnd(600),this._element.style[i]=this._element[r]+"px"):o())))},v.prototype.hide=function(){var e,t,n,i,o=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");a(this._element).hasClass(u)&&(e=a.Event(c.HIDE),a(this._element).trigger(e),e.isDefaultPrevented()||(n=(t=this._getDimension())===r?"offsetWidth":"offsetHeight",this._element.style[t]=this._element[n]+"px",Util.reflow(this._element),a(this._element).addClass(p).removeClass(d).removeClass(u),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&a(this._triggerArray).addClass(f).attr("aria-expanded",!1),this.setTransitioning(!0),i=function(){o.setTransitioning(!1),a(o._element).removeClass(p).addClass(d).trigger(c.HIDDEN)},this._element.style[t]="",Util.supportsTransitionEnd()?a(this._element).one(Util.TRANSITION_END,i).emulateTransitionEnd(600):i()))},v.prototype.setTransitioning=function(e){this._isTransitioning=e},v.prototype.dispose=function(){a.removeData(this._element,l),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},v.prototype._getConfig=function(e){return(e=a.extend({},o,e)).toggle=Boolean(e.toggle),Util.typeCheckConfig(t,e,i),e},v.prototype._getDimension=function(){return a(this._element).hasClass(r)?r:s},v.prototype._getParent=function(){var n=this,e=a(this._config.parent)[0],t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return a(e).find(t).each(function(e,t){n._addAriaAndCollapsedClass(v._getTargetFromElement(t),[t])}),e},v.prototype._addAriaAndCollapsedClass=function(e,t){var n;e&&(n=a(e).hasClass(u),e.setAttribute("aria-expanded",n),t.length&&a(t).toggleClass(f,!n).attr("aria-expanded",n))},v._getTargetFromElement=function(e){var t=Util.getSelectorFromElement(e);return t?a(t)[0]:null},v._jQueryInterface=function(i){return this.each(function(){var e=a(this),t=e.data(l),n=a.extend({},o,e.data(),"object"===(void 0===i?"undefined":_typeof(i))&&i);if(!t&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),t||(t=new v(this,n),e.data(l,t)),"string"==typeof i){if(void 0===t[i])throw new Error('No method named "'+i+'"');t[i]()}})},_createClass(v,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),v);function v(e,t){_classCallCheck(this,v),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=a.makeArray(a('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a(document).on(c.CLICK_DATA_API,m,function(e){e.preventDefault();var t=g._getTargetFromElement(this),n=a(t).data(l)?"toggle":a(this).data();g._jQueryInterface.call(a(t),n)}),a.fn[t]=g._jQueryInterface,a.fn[t].Constructor=g,a.fn[t].noConflict=function(){return a.fn[t]=n,g._jQueryInterface},g}(jQuery),_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Dropdown=function(a){var e="dropdown",n="bs.dropdown",t="."+n,i=".data-api",o=a.fn[e],l={HIDE:"hide"+t,HIDDEN:"hidden"+t,SHOW:"show"+t,SHOWN:"shown"+t,CLICK:"click"+t,CLICK_DATA_API:"click"+t+i,FOCUSIN_DATA_API:"focusin"+t+i,KEYDOWN_DATA_API:"keydown"+t+i},r="dropdown-backdrop",s="disabled",c="show",u=".dropdown-backdrop",d='[data-toggle="dropdown"]',p=".dropdown form",f='[role="menu"]',h='[role="listbox"]',m=".navbar-nav",g='[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a',v=(_.prototype.toggle=function(){if(this.disabled||a(this).hasClass(s))return!1;var e,t=_._getParentFromElement(this),n=a(t).hasClass(c);if(_._clearMenus(),n)return!1;"ontouchstart"in document.documentElement&&!a(t).closest(m).length&&((e=document.createElement("div")).className=r,a(e).insertBefore(this),a(e).on("click",_._clearMenus));var i={relatedTarget:this},o=a.Event(l.SHOW,i);return a(t).trigger(o),o.isDefaultPrevented()||(this.focus(),this.setAttribute("aria-expanded",!0),a(t).toggleClass(c),a(t).trigger(a.Event(l.SHOWN,i))),!1},_.prototype.dispose=function(){a.removeData(this._element,n),a(this._element).off(t),this._element=null},_.prototype._addEventListeners=function(){a(this._element).on(l.CLICK,this.toggle)},_._jQueryInterface=function(t){return this.each(function(){var e=a(this).data(n);if(e||(e=new _(this),a(this).data(n,e)),"string"==typeof t){if(void 0===e[t])throw new Error('No method named "'+t+'"');e[t].call(this)}})},_._clearMenus=function(e){if(!e||3!==e.which){var t=a(u)[0];t&&t.parentNode.removeChild(t);for(var n=a.makeArray(a(d)),i=0;i<n.length;i++){var o,r=_._getParentFromElement(n[i]),s={relatedTarget:n[i]};a(r).hasClass(c)&&(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"focusin"===e.type)&&a.contains(r,e.target)||(o=a.Event(l.HIDE,s),a(r).trigger(o),o.isDefaultPrevented()||(n[i].setAttribute("aria-expanded","false"),a(r).removeClass(c).trigger(a.Event(l.HIDDEN,s)))))}}},_._getParentFromElement=function(e){var t=void 0,n=Util.getSelectorFromElement(e);return n&&(t=a(n)[0]),t||e.parentNode},_._dataApiKeydownHandler=function(e){if(/(38|40|27|32)/.test(e.which)&&!/input|textarea/i.test(e.target.tagName)&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!a(this).hasClass(s))){var t,n=_._getParentFromElement(this),i=a(n).hasClass(c);if(!i&&27!==e.which||i&&27===e.which)return 27===e.which&&(t=a(n).find(d)[0],a(t).trigger("focus")),void a(this).trigger("click");var o,r=a(n).find(g).get();r.length&&(o=r.indexOf(e.target),38===e.which&&0<o&&o--,40===e.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus())}},_createClass(_,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),_);function _(e){_classCallCheck(this,_),this._element=e,this._addEventListeners()}return a(document).on(l.KEYDOWN_DATA_API,d,v._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,f,v._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,h,v._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.FOCUSIN_DATA_API,v._clearMenus).on(l.CLICK_DATA_API,d,v.prototype.toggle).on(l.CLICK_DATA_API,p,function(e){e.stopPropagation()}),a.fn[e]=v._jQueryInterface,a.fn[e].Constructor=v,a.fn[e].noConflict=function(){return a.fn[e]=o,v._jQueryInterface},v}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Modal=function(s){var t="modal",a="bs.modal",e="."+a,n=s.fn[t],i={backdrop:!0,keyboard:!0,focus:!0,show:!0},o={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,FOCUSIN:"focusin"+e,RESIZE:"resize"+e,CLICK_DISMISS:"click.dismiss"+e,KEYDOWN_DISMISS:"keydown.dismiss"+e,MOUSEUP_DISMISS:"mouseup.dismiss"+e,MOUSEDOWN_DISMISS:"mousedown.dismiss"+e,CLICK_DATA_API:"click"+e+".data-api"},r="modal-scrollbar-measure",c="modal-backdrop",u="modal-open",d="fade",p="show",f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},h=(m.prototype.toggle=function(e){return this._isShown?this.hide():this.show(e)},m.prototype.show=function(e){var t=this;if(this._isTransitioning)throw new Error("Modal is transitioning");Util.supportsTransitionEnd()&&s(this._element).hasClass(d)&&(this._isTransitioning=!0);var n=s.Event(l.SHOW,{relatedTarget:e});s(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),s(document.body).addClass(u),this._setEscapeEvent(),this._setResizeEvent(),s(this._element).on(l.CLICK_DISMISS,f.DATA_DISMISS,function(e){return t.hide(e)}),s(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){s(t._element).one(l.MOUSEUP_DISMISS,function(e){s(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))},m.prototype.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var n=Util.supportsTransitionEnd()&&s(this._element).hasClass(d);n&&(this._isTransitioning=!0);var i=s.Event(l.HIDE);s(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),s(document).off(l.FOCUSIN),s(this._element).removeClass(p),s(this._element).off(l.CLICK_DISMISS),s(this._dialog).off(l.MOUSEDOWN_DISMISS),n?s(this._element).one(Util.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(300):this._hideModal())},m.prototype.dispose=function(){s.removeData(this._element,a),s(window,document,this._element,this._backdrop).off(e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},m.prototype._getConfig=function(e){return e=s.extend({},i,e),Util.typeCheckConfig(t,e,o),e},m.prototype._showElement=function(e){var t=this,n=Util.supportsTransitionEnd()&&s(this._element).hasClass(d);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Util.reflow(this._element),s(this._element).addClass(p),this._config.focus&&this._enforceFocus();function i(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,s(t._element).trigger(o)}var o=s.Event(l.SHOWN,{relatedTarget:e});n?s(this._dialog).one(Util.TRANSITION_END,i).emulateTransitionEnd(300):i()},m.prototype._enforceFocus=function(){var t=this;s(document).off(l.FOCUSIN).on(l.FOCUSIN,function(e){document===e.target||t._element===e.target||s(t._element).has(e.target).length||t._element.focus()})},m.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?s(this._element).on(l.KEYDOWN_DISMISS,function(e){27===e.which&&t.hide()}):this._isShown||s(this._element).off(l.KEYDOWN_DISMISS)},m.prototype._setResizeEvent=function(){var t=this;this._isShown?s(window).on(l.RESIZE,function(e){return t._handleUpdate(e)}):s(window).off(l.RESIZE)},m.prototype._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){s(document.body).removeClass(u),e._resetAdjustments(),e._resetScrollbar(),s(e._element).trigger(l.HIDDEN)})},m.prototype._removeBackdrop=function(){this._backdrop&&(s(this._backdrop).remove(),this._backdrop=null)},m.prototype._showBackdrop=function(e){var t,n=this,i=s(this._element).hasClass(d)?d:"";if(this._isShown&&this._config.backdrop){var o=Util.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=c,i&&s(this._backdrop).addClass(i),s(this._backdrop).appendTo(document.body),s(this._element).on(l.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),o&&Util.reflow(this._backdrop),s(this._backdrop).addClass(p),!e)return;if(!o)return void e();s(this._backdrop).one(Util.TRANSITION_END,e).emulateTransitionEnd(150)}else{!this._isShown&&this._backdrop?(s(this._backdrop).removeClass(p),t=function(){n._removeBackdrop(),e&&e()},Util.supportsTransitionEnd()&&s(this._element).hasClass(d)?s(this._backdrop).one(Util.TRANSITION_END,t).emulateTransitionEnd(150):t()):e&&e()}},m.prototype._handleUpdate=function(){this._adjustDialog()},m.prototype._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},m.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},m.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},m.prototype._setScrollbar=function(){var e=parseInt(s(f.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=e+this._scrollbarWidth+"px")},m.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},m.prototype._getScrollbarWidth=function(){var e=document.createElement("div");e.className=r,document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},m._jQueryInterface=function(n,i){return this.each(function(){var e=s(this).data(a),t=s.extend({},m.Default,s(this).data(),"object"===(void 0===n?"undefined":_typeof(n))&&n);if(e||(e=new m(this,t),s(this).data(a,e)),"string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n](i)}else t.show&&e.show(i)})},_createClass(m,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return i}}]),m);function m(e,t){_classCallCheck(this,m),this._config=this._getConfig(t),this._element=e,this._dialog=s(e).find(f.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return s(document).on(l.CLICK_DATA_API,f.DATA_TOGGLE,function(e){var t=this,n=void 0,i=Util.getSelectorFromElement(this);i&&(n=s(i)[0]);var o=s(n).data(a)?"toggle":s.extend({},s(n).data(),s(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var r=s(n).one(l.SHOW,function(e){e.isDefaultPrevented()||r.one(l.HIDDEN,function(){s(t).is(":visible")&&t.focus()})});h._jQueryInterface.call(s(n),o,this)}),s.fn[t]=h._jQueryInterface,s.fn[t].Constructor=h,s.fn[t].noConflict=function(){return s.fn[t]=n,h._jQueryInterface},h}(jQuery);!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(window.jQuery||window.Zepto)}(function(u){function e(){}function d(e,t){m.ev.on("mfp"+e+w,t)}function p(e,t,n,i){var o=document.createElement("div");return o.className="mfp-"+e,n&&(o.innerHTML=n),i?t&&t.appendChild(o):(o=u(o),t&&o.appendTo(t)),o}function f(e,t){m.ev.triggerHandler("mfp"+e,t),m.st.callbacks&&(e=e.charAt(0).toLowerCase()+e.slice(1),m.st.callbacks[e]&&m.st.callbacks[e].apply(m,u.isArray(t)?t:[t]))}function h(e){return e===t&&m.currTemplate.closeBtn||(m.currTemplate.closeBtn=u(m.st.closeMarkup.replace("%title%",m.st.tClose)),t=e),m.currTemplate.closeBtn}function r(){u.magnificPopup.instance||((m=new e).init(),u.magnificPopup.instance=m)}var m,i,g,o,v,t,l="Close",c="BeforeClose",_="MarkupParse",y="Open",w=".mfp",C="mfp-ready",n="mfp-removing",s="mfp-prevent-close",a=!!window.jQuery,b=u(window);e.prototype={constructor:e,init:function(){var e=navigator.appVersion;m.isLowIE=m.isIE8=document.all&&!document.addEventListener,m.isAndroid=/android/gi.test(e),m.isIOS=/iphone|ipad|ipod/gi.test(e),m.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),m.probablyMobile=m.isAndroid||m.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),g=u(document),m.popupsCache={}},open:function(e){if(!1===e.isObj){m.items=e.items.toArray(),m.index=0;for(var t,n=e.items,i=0;i<n.length;i++)if((t=n[i]).parsed&&(t=t.el[0]),t===e.el[0]){m.index=i;break}}else m.items=u.isArray(e.items)?e.items:[e.items],m.index=e.index||0;if(!m.isOpen){m.types=[],v="",e.mainEl&&e.mainEl.length?m.ev=e.mainEl.eq(0):m.ev=g,e.key?(m.popupsCache[e.key]||(m.popupsCache[e.key]={}),m.currTemplate=m.popupsCache[e.key]):m.currTemplate={},m.st=u.extend(!0,{},u.magnificPopup.defaults,e),m.fixedContentPos="auto"===m.st.fixedContentPos?!m.probablyMobile:m.st.fixedContentPos,m.st.modal&&(m.st.closeOnContentClick=!1,m.st.closeOnBgClick=!1,m.st.showCloseBtn=!1,m.st.enableEscapeKey=!1),m.bgOverlay||(m.bgOverlay=p("bg").on("click"+w,function(){m.close()}),m.wrap=p("wrap").attr("tabindex",-1).on("click"+w,function(e){m._checkIfClose(e.target)&&m.close()}),m.container=p("container",m.wrap)),m.contentContainer=p("content"),m.st.preloader&&(m.preloader=p("preloader",m.container,m.st.tLoading));var o=u.magnificPopup.modules;for(i=0;i<o.length;i++){var r=(r=o[i]).charAt(0).toUpperCase()+r.slice(1);m["init"+r].call(m)}f("BeforeOpen"),m.st.showCloseBtn&&(m.st.closeBtnInside?(d(_,function(e,t,n,i){n.close_replaceWith=h(i.type)}),v+=" mfp-close-btn-in"):m.wrap.append(h())),m.st.alignTop&&(v+=" mfp-align-top"),m.fixedContentPos?m.wrap.css({overflow:m.st.overflowY,overflowX:"hidden",overflowY:m.st.overflowY}):m.wrap.css({top:b.scrollTop(),position:"absolute"}),!1!==m.st.fixedBgPos&&("auto"!==m.st.fixedBgPos||m.fixedContentPos)||m.bgOverlay.css({height:g.height(),position:"absolute"}),m.st.enableEscapeKey&&g.on("keyup"+w,function(e){27===e.keyCode&&m.close()}),b.on("resize"+w,function(){m.updateSize()}),m.st.closeOnContentClick||(v+=" mfp-auto-cursor"),v&&m.wrap.addClass(v);var s,a=m.wH=b.height(),l={};m.fixedContentPos&&(!m._hasScrollBar(a)||(s=m._getScrollbarSize())&&(l.marginRight=s)),m.fixedContentPos&&(m.isIE7?u("body, html").css("overflow","hidden"):l.overflow="hidden");var c=m.st.mainClass;return m.isIE7&&(c+=" mfp-ie7"),c&&m._addClassToMFP(c),m.updateItemHTML(),f("BuildControls"),u("html").css(l),m.bgOverlay.add(m.wrap).prependTo(m.st.prependTo||u(document.body)),m._lastFocusedEl=document.activeElement,setTimeout(function(){m.content?(m._addClassToMFP(C),m._setFocus()):m.bgOverlay.addClass(C),g.on("focusin"+w,m._onFocusIn)},16),m.isOpen=!0,m.updateSize(a),f(y),e}m.updateItemHTML()},close:function(){m.isOpen&&(f(c),m.isOpen=!1,m.st.removalDelay&&!m.isLowIE&&m.supportsTransition?(m._addClassToMFP(n),setTimeout(function(){m._close()},m.st.removalDelay)):m._close())},_close:function(){f(l);var e,t=n+" "+C+" ";m.bgOverlay.detach(),m.wrap.detach(),m.container.empty(),m.st.mainClass&&(t+=m.st.mainClass+" "),m._removeClassFromMFP(t),m.fixedContentPos&&(e={marginRight:""},m.isIE7?u("body, html").css("overflow",""):e.overflow="",u("html").css(e)),g.off("keyup.mfp focusin"+w),m.ev.off(w),m.wrap.attr("class","mfp-wrap").removeAttr("style"),m.bgOverlay.attr("class","mfp-bg"),m.container.attr("class","mfp-container"),!m.st.showCloseBtn||m.st.closeBtnInside&&!0!==m.currTemplate[m.currItem.type]||m.currTemplate.closeBtn&&m.currTemplate.closeBtn.detach(),m.st.autoFocusLast&&m._lastFocusedEl&&u(m._lastFocusedEl).focus(),m.currItem=null,m.content=null,m.currTemplate=null,m.prevHeight=0,f("AfterClose")},updateSize:function(e){var t,n;m.isIOS?(t=document.documentElement.clientWidth/window.innerWidth,n=window.innerHeight*t,m.wrap.css("height",n),m.wH=n):m.wH=e||b.height(),m.fixedContentPos||m.wrap.css("height",m.wH),f("Resize")},updateItemHTML:function(){var e=m.items[m.index];m.contentContainer.detach(),m.content&&m.content.detach(),e.parsed||(e=m.parseEl(m.index));var t,n=e.type;f("BeforeChange",[m.currItem?m.currItem.type:"",n]),m.currItem=e,m.currTemplate[n]||(t=!!m.st[n]&&m.st[n].markup,f("FirstMarkupParse",t),m.currTemplate[n]=!t||u(t)),o&&o!==e.type&&m.container.removeClass("mfp-"+o+"-holder");var i=m["get"+n.charAt(0).toUpperCase()+n.slice(1)](e,m.currTemplate[n]);m.appendContent(i,n),e.preloaded=!0,f("Change",e),o=e.type,m.container.prepend(m.contentContainer),f("AfterChange")},appendContent:function(e,t){(m.content=e)?m.st.showCloseBtn&&m.st.closeBtnInside&&!0===m.currTemplate[t]?m.content.find(".mfp-close").length||m.content.append(h()):m.content=e:m.content="",f("BeforeAppend"),m.container.addClass("mfp-"+t+"-holder"),m.contentContainer.append(m.content)},parseEl:function(e){var t,n=m.items[e];if((n=n.tagName?{el:u(n)}:(t=n.type,{data:n,src:n.src})).el){for(var i=m.types,o=0;o<i.length;o++)if(n.el.hasClass("mfp-"+i[o])){t=i[o];break}n.src=n.el.attr("data-mfp-src"),n.src||(n.src=n.el.attr("href"))}return n.type=t||m.st.type||"inline",n.index=e,n.parsed=!0,m.items[e]=n,f("ElementParse",n),m.items[e]},addGroup:function(t,n){function e(e){e.mfpEl=this,m._openClick(e,t,n)}var i="click.magnificPopup";(n=n||{}).mainEl=t,n.items?(n.isObj=!0,t.off(i).on(i,e)):(n.isObj=!1,n.delegate?t.off(i).on(i,n.delegate,e):(n.items=t).off(i).on(i,e))},_openClick:function(e,t,n){if((void 0!==n.midClick?n.midClick:u.magnificPopup.defaults.midClick)||!(2===e.which||e.ctrlKey||e.metaKey||e.altKey||e.shiftKey)){var i=void 0!==n.disableOn?n.disableOn:u.magnificPopup.defaults.disableOn;if(i)if(u.isFunction(i)){if(!i.call(m))return!0}else if(b.width()<i)return!0;e.type&&(e.preventDefault(),m.isOpen&&e.stopPropagation()),n.el=u(e.mfpEl),n.delegate&&(n.items=t.find(n.delegate)),m.open(n)}},updateStatus:function(e,t){var n;m.preloader&&(i!==e&&m.container.removeClass("mfp-s-"+i),t||"loading"!==e||(t=m.st.tLoading),f("UpdateStatus",n={status:e,text:t}),e=n.status,t=n.text,m.preloader.html(t),m.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),m.container.addClass("mfp-s-"+e),i=e)},_checkIfClose:function(e){if(!u(e).hasClass(s)){var t=m.st.closeOnContentClick,n=m.st.closeOnBgClick;if(t&&n)return!0;if(!m.content||u(e).hasClass("mfp-close")||m.preloader&&e===m.preloader[0])return!0;if(e===m.content[0]||u.contains(m.content[0],e)){if(t)return!0}else if(n&&u.contains(document,e))return!0;return!1}},_addClassToMFP:function(e){m.bgOverlay.addClass(e),m.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),m.wrap.removeClass(e)},_hasScrollBar:function(e){return(m.isIE7?g.height():document.body.scrollHeight)>(e||b.height())},_setFocus:function(){(m.st.focus?m.content.find(m.st.focus).eq(0):m.wrap).focus()},_onFocusIn:function(e){if(e.target!==m.wrap[0]&&!u.contains(m.wrap[0],e.target))return m._setFocus(),!1},_parseMarkup:function(o,e,t){var r;t.data&&(e=u.extend(t.data,e)),f(_,[o,e,t]),u.each(e,function(e,t){return void 0===t||!1===t||void(1<(r=e.split("_")).length?0<(n=o.find(w+"-"+r[0])).length&&("replaceWith"===(i=r[1])?n[0]!==t[0]&&n.replaceWith(t):"img"===i?n.is("img")?n.attr("src",t):n.replaceWith(u("<img>").attr("src",t).attr("class",n.attr("class"))):n.attr(r[1],t)):o.find(w+"-"+e).html(t));var n,i})},_getScrollbarSize:function(){var e;return void 0===m.scrollbarSize&&((e=document.createElement("div")).style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),m.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)),m.scrollbarSize}},u.magnificPopup={instance:null,proto:e.prototype,modules:[],open:function(e,t){return r(),(e=e?u.extend(!0,{},e):{}).isObj=!0,e.index=t||0,this.instance.open(e)},close:function(){return u.magnificPopup.instance&&u.magnificPopup.instance.close()},registerModule:function(e,t){t.options&&(u.magnificPopup.defaults[e]=t.options),u.extend(this.proto,t.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},u.fn.magnificPopup=function(e){r();var t,n,i,o=u(this);return"string"==typeof e?"open"===e?(t=a?o.data("magnificPopup"):o[0].magnificPopup,n=parseInt(arguments[1],10)||0,i=t.items?t.items[n]:(i=o,t.delegate&&(i=i.find(t.delegate)),i.eq(n)),m._openClick({mfpEl:i},o,t)):m.isOpen&&m[e].apply(m,Array.prototype.slice.call(arguments,1)):(e=u.extend(!0,{},e),a?o.data("magnificPopup",e):o[0].magnificPopup=e,m.addGroup(o,e)),o};function E(){S&&(T.after(S.addClass(I)).detach(),S=null)}var I,T,S,k="inline";u.magnificPopup.registerModule(k,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){m.types.push(k),d(l+"."+k,function(){E()})},getInline:function(e,t){if(E(),e.src){var n,i=m.st.inline,o=u(e.src);return o.length?((n=o[0].parentNode)&&n.tagName&&(T||(I=i.hiddenClass,T=p(I),I="mfp-"+I),S=o.after(T).detach().removeClass(I)),m.updateStatus("ready")):(m.updateStatus("error",i.tNotFound),o=u("<div>")),e.inlineElement=o}return m.updateStatus("ready"),m._parseMarkup(t,{},e),t}}});function A(){x&&u(document.body).removeClass(x)}function D(){A(),m.req&&m.req.abort()}var x,O="ajax";u.magnificPopup.registerModule(O,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){m.types.push(O),x=m.st.ajax.cursor,d(l+"."+O,D),d("BeforeChange."+O,D)},getAjax:function(o){x&&u(document.body).addClass(x),m.updateStatus("loading");var e=u.extend({url:o.src,success:function(e,t,n){var i={data:e,xhr:n};f("ParseAjax",i),m.appendContent(u(i.data),O),o.finished=!0,A(),m._setFocus(),setTimeout(function(){m.wrap.addClass(C)},16),m.updateStatus("ready"),f("AjaxContentAdded")},error:function(){A(),o.finished=o.loadError=!0,m.updateStatus("error",m.st.ajax.tError.replace("%url%",o.src))}},m.st.ajax.settings);return m.req=u.ajax(e),""}}});var P;u.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var e=m.st.image,t=".image";m.types.push("image"),d(y+t,function(){"image"===m.currItem.type&&e.cursor&&u(document.body).addClass(e.cursor)}),d(l+t,function(){e.cursor&&u(document.body).removeClass(e.cursor),b.off("resize"+w)}),d("Resize"+t,m.resizeImage),m.isLowIE&&d("AfterChange",m.resizeImage)},resizeImage:function(){var e,t=m.currItem;t&&t.img&&m.st.image.verticalFit&&(e=0,m.isLowIE&&(e=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",m.wH-e))},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,P&&clearInterval(P),e.isCheckingImgSize=!1,f("ImageHasSize",e),e.imgHidden&&(m.content&&m.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(t){var n=0,i=t.img[0],o=function(e){P&&clearInterval(P),P=setInterval(function(){0<i.naturalWidth?m._onImageHasSize(t):(200<n&&clearInterval(P),3===++n?o(10):40===n?o(50):100===n&&o(500))},e)};o(1)},getImage:function(e,t){var n,i=0,o=function(){e&&(e.img[0].complete?(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("ready")),e.hasSize=!0,e.loaded=!0,f("ImageLoadComplete")):++i<200?setTimeout(o,100):r())},r=function(){e&&(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("error",s.tError.replace("%url%",e.src))),e.hasSize=!0,e.loaded=!0,e.loadError=!0)},s=m.st.image,a=t.find(".mfp-img");return a.length&&((n=document.createElement("img")).className="mfp-img",e.el&&e.el.find("img").length&&(n.alt=e.el.find("img").attr("alt")),e.img=u(n).on("load.mfploader",o).on("error.mfploader",r),n.src=e.src,a.is("img")&&(e.img=e.img.clone()),0<(n=e.img[0]).naturalWidth?e.hasSize=!0:n.width||(e.hasSize=!1)),m._parseMarkup(t,{title:function(e){if(e.data&&void 0!==e.data.title)return e.data.title;var t=m.st.image.titleSrc;if(t){if(u.isFunction(t))return t.call(m,e);if(e.el)return e.el.attr(t)||""}return""}(e),img_replaceWith:e.img},e),m.resizeImage(),e.hasSize?(P&&clearInterval(P),e.loadError?(t.addClass("mfp-loading"),m.updateStatus("error",s.tError.replace("%url%",e.src))):(t.removeClass("mfp-loading"),m.updateStatus("ready"))):(m.updateStatus("loading"),e.loading=!0,e.hasSize||(e.imgHidden=!0,t.addClass("mfp-loading"),m.findImageSize(e))),t}}});var N;u.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,t,n,i,o,r,s=m.st.zoom,a=".zoom";s.enabled&&m.supportsTransition&&(t=s.duration,n=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),n="all "+s.duration/1e3+"s "+s.easing,i={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return i["-webkit-"+o]=i["-moz-"+o]=i["-o-"+o]=i[o]=n,t.css(i),t},i=function(){m.content.css("visibility","visible")},d("BuildControls"+a,function(){if(m._allowZoom()){if(clearTimeout(o),m.content.css("visibility","hidden"),!(e=m._getItemToZoom()))return void i();(r=n(e)).css(m._getOffset()),m.wrap.append(r),o=setTimeout(function(){r.css(m._getOffset(!0)),o=setTimeout(function(){i(),setTimeout(function(){r.remove(),e=r=null,f("ZoomAnimationEnded")},16)},t)},16)}}),d(c+a,function(){if(m._allowZoom()){if(clearTimeout(o),m.st.removalDelay=t,!e){if(!(e=m._getItemToZoom()))return;r=n(e)}r.css(m._getOffset(!0)),m.wrap.append(r),m.content.css("visibility","hidden"),setTimeout(function(){r.css(m._getOffset())},16)}}),d(l+a,function(){m._allowZoom()&&(i(),r&&r.remove(),e=null)}))},_allowZoom:function(){return"image"===m.currItem.type},_getItemToZoom:function(){return!!m.currItem.hasSize&&m.currItem.img},_getOffset:function(e){var t=e?m.currItem.img:m.st.zoom.opener(m.currItem.el||m.currItem),n=t.offset(),i=parseInt(t.css("padding-top"),10),o=parseInt(t.css("padding-bottom"),10);n.top-=u(window).scrollTop()-i;var r={width:t.width(),height:(a?t.innerHeight():t[0].offsetHeight)-o-i};return void 0===N&&(N=void 0!==document.createElement("p").style.MozTransform),N?r["-moz-transform"]=r.transform="translate("+n.left+"px,"+n.top+"px)":(r.left=n.left,r.top=n.top),r}}});function M(e){var t;!m.currTemplate[L]||(t=m.currTemplate[L].find("iframe")).length&&(e||(t[0].src="//about:blank"),m.isIE8&&t.css("display",e?"block":"none"))}var L="iframe";u.magnificPopup.registerModule(L,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){m.types.push(L),d("BeforeChange",function(e,t,n){t!==n&&(t===L?M():n===L&&M(!0))}),d(l+"."+L,function(){M()})},getIframe:function(e,t){var n=e.src,i=m.st.iframe;u.each(i.patterns,function(){if(-1<n.indexOf(this.index))return this.id&&(n="string"==typeof this.id?n.substr(n.lastIndexOf(this.id)+this.id.length,n.length):this.id.call(this,n)),n=this.src.replace("%id%",n),!1});var o={};return i.srcAction&&(o[i.srcAction]=n),m._parseMarkup(t,o,e),m.updateStatus("ready"),t}}});function W(e){var t=m.items.length;return t-1<e?e-t:e<0?t+e:e}function j(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)}u.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var r=m.st.gallery,e=".mfp-gallery";if(m.direction=!0,!r||!r.enabled)return!1;v+=" mfp-gallery",d(y+e,function(){r.navigateByImgClick&&m.wrap.on("click"+e,".mfp-img",function(){if(1<m.items.length)return m.next(),!1}),g.on("keydown"+e,function(e){37===e.keyCode?m.prev():39===e.keyCode&&m.next()})}),d("UpdateStatus"+e,function(e,t){t.text&&(t.text=j(t.text,m.currItem.index,m.items.length))}),d(_+e,function(e,t,n,i){var o=m.items.length;n.counter=1<o?j(r.tCounter,i.index,o):""}),d("BuildControls"+e,function(){var e,t,n;1<m.items.length&&r.arrows&&!m.arrowLeft&&(e=r.arrowMarkup,t=m.arrowLeft=u(e.replace(/%title%/gi,r.tPrev).replace(/%dir%/gi,"left")).addClass(s),n=m.arrowRight=u(e.replace(/%title%/gi,r.tNext).replace(/%dir%/gi,"right")).addClass(s),t.click(function(){m.prev()}),n.click(function(){m.next()}),m.container.append(t.add(n)))}),d("Change"+e,function(){m._preloadTimeout&&clearTimeout(m._preloadTimeout),m._preloadTimeout=setTimeout(function(){m.preloadNearbyImages(),m._preloadTimeout=null},16)}),d(l+e,function(){g.off(e),m.wrap.off("click"+e),m.arrowRight=m.arrowLeft=null})},next:function(){m.direction=!0,m.index=W(m.index+1),m.updateItemHTML()},prev:function(){m.direction=!1,m.index=W(m.index-1),m.updateItemHTML()},goTo:function(e){m.direction=e>=m.index,m.index=e,m.updateItemHTML()},preloadNearbyImages:function(){for(var e=m.st.gallery.preload,t=Math.min(e[0],m.items.length),n=Math.min(e[1],m.items.length),i=1;i<=(m.direction?n:t);i++)m._preloadItem(m.index+i);for(i=1;i<=(m.direction?t:n);i++)m._preloadItem(m.index-i)},_preloadItem:function(e){var t;e=W(e),m.items[e].preloaded||((t=m.items[e]).parsed||(t=m.parseEl(e)),f("LazyLoad",t),"image"===t.type&&(t.img=u('<img class="mfp-img" />').on("load.mfploader",function(){t.hasSize=!0}).on("error.mfploader",function(){t.hasSize=!0,t.loadError=!0,f("LazyLoadError",t)}).attr("src",t.src)),t.preloaded=!0)}}});var H="retina";u.magnificPopup.registerModule(H,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){var n,i;1<window.devicePixelRatio&&(n=m.st.retina,i=n.ratio,1<(i=isNaN(i)?i():i)&&(d("ImageHasSize."+H,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/i,width:"100%"})}),d("ElementParse."+H,function(e,t){t.src=n.replaceSrc(t,i)})))}}}),r()}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(d){function e(){for(var e=p.scrollTop(),t=f.height(),n=t-m,i=n<e?n-e:0,o=0,r=h.length;o<r;o++){var s,a,l,c=h[o],u=c.stickyWrapper.offset().top-c.topSpacing-i;c.stickyWrapper.css("height",c.stickyElement.outerHeight()),e<=u?null!==c.currentTop&&(c.stickyElement.css({width:"",position:"",top:"","z-index":""}),c.stickyElement.parent().removeClass(c.className),c.stickyElement.trigger("sticky-end",[c]),c.currentTop=null):((s=t-c.stickyElement.outerHeight()-c.topSpacing-c.bottomSpacing-e-i)<0?s+=c.topSpacing:s=c.topSpacing,c.currentTop!==s&&(c.getWidthFrom?a=d(c.getWidthFrom).width()||null:c.widthFromWrapper&&(a=c.stickyWrapper.width()),null==a&&(a=c.stickyElement.width()),c.stickyElement.css("width",a).css("position","fixed").css("top",s).css("z-index",c.zIndex),c.stickyElement.parent().addClass(c.className),null===c.currentTop?c.stickyElement.trigger("sticky-start",[c]):c.stickyElement.trigger("sticky-update",[c]),c.currentTop===c.topSpacing&&c.currentTop>s||null===c.currentTop&&s<c.topSpacing?c.stickyElement.trigger("sticky-bottom-reached",[c]):null!==c.currentTop&&s===c.topSpacing&&c.currentTop<s&&c.stickyElement.trigger("sticky-bottom-unreached",[c]),c.currentTop=s),l=c.stickyWrapper.parent(),c.stickyElement.offset().top+c.stickyElement.outerHeight()>=l.offset().top+l.outerHeight()&&c.stickyElement.offset().top<=c.topSpacing?c.stickyElement.css("position","absolute").css("top","").css("bottom",0).css("z-index",""):c.stickyElement.css("position","fixed").css("top",s).css("bottom","").css("z-index",c.zIndex))}}function t(){m=p.height();for(var e=0,t=h.length;e<t;e++){var n=h[e],i=null;n.getWidthFrom?n.responsiveWidth&&(i=d(n.getWidthFrom).width()):n.widthFromWrapper&&(i=n.stickyWrapper.width()),null!=i&&n.stickyElement.css("width",i)}}var n=Array.prototype.slice,i=Array.prototype.splice,s={topSpacing:0,bottomSpacing:0,className:"is-sticky",wrapperClassName:"sticky-wrapper",center:!1,getWidthFrom:"",widthFromWrapper:!0,responsiveWidth:!1,zIndex:"auto"},p=d(window),f=d(document),h=[],m=p.height(),a={init:function(e){var r=d.extend({},s,e);return this.each(function(){var e=d(this),t=e.attr("id"),n=t?t+"-"+s.wrapperClassName:s.wrapperClassName,i=d("<div></div>").attr("id",n).addClass(r.wrapperClassName);e.wrapAll(i);var o=e.parent();r.center&&o.css({width:e.outerWidth(),marginLeft:"auto",marginRight:"auto"}),"right"===e.css("float")&&e.css({float:"none"}).parent().css({float:"right"}),r.stickyElement=e,r.stickyWrapper=o,r.currentTop=null,h.push(r),a.setWrapperHeight(this),a.setupChangeListeners(this)})},setWrapperHeight:function(e){var t=d(e),n=t.parent();n&&n.css("height",t.outerHeight())},setupChangeListeners:function(t){window.MutationObserver?new window.MutationObserver(function(e){(e[0].addedNodes.length||e[0].removedNodes.length)&&a.setWrapperHeight(t)}).observe(t,{subtree:!0,childList:!0}):(t.addEventListener("DOMNodeInserted",function(){a.setWrapperHeight(t)},!1),t.addEventListener("DOMNodeRemoved",function(){a.setWrapperHeight(t)},!1))},update:e,unstick:function(e){return this.each(function(){for(var e=d(this),t=-1,n=h.length;0<n--;)h[n].stickyElement.get(0)===this&&(i.call(h,n,1),t=n);-1!==t&&(e.unwrap(),e.css({width:"",position:"",top:"",float:"","z-index":""}))})}};window.addEventListener?(window.addEventListener("scroll",e,!1),window.addEventListener("resize",t,!1)):window.attachEvent&&(window.attachEvent("onscroll",e),window.attachEvent("onresize",t)),d.fn.sticky=function(e){return a[e]?a[e].apply(this,n.call(arguments,1)):"object"!=typeof e&&e?void d.error("Method "+e+" does not exist on jQuery.sticky"):a.init.apply(this,arguments)},d.fn.unstick=function(e){return a[e]?a[e].apply(this,n.call(arguments,1)):"object"!=typeof e&&e?void d.error("Method "+e+" does not exist on jQuery.sticky"):a.unstick.apply(this,arguments)},d(function(){setTimeout(e,0)})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):t(e.jQuery)}(this,function(h){"use strict";function m(e,t){var n=e.getBoundingClientRect(),i=n.top,o=n.bottom,r=n.left,s=n.right,a=h.extend({tolerance:0,viewport:window},t),l=!1,c=a.viewport.jquery?a.viewport:h(a.viewport);c.length||(console.warn("isInViewport: The viewport selector you have provided matches no element on page."),console.warn("isInViewport: Defaulting to viewport as window"),c=h(window));var u,d=c.height(),p=c.width(),f=c[0].toString();return c[0]!==window&&"[object Window]"!==f&&"[object DOMWindow]"!==f&&(i-=(u=c[0].getBoundingClientRect()).top,o-=u.top,r-=u.left,s-=u.left,m.scrollBarWidth=m.scrollBarWidth||function(e){var t=h("<div></div>").css({width:"100%"});e.append(t);var n=e.width()-t.width();return t.remove(),n}(c),p-=m.scrollBarWidth),a.tolerance=~~Math.round(parseFloat(a.tolerance)),a.tolerance<0&&(a.tolerance=d+a.tolerance),s<=0||p<=r?l:l=a.tolerance?i<=a.tolerance&&o>=a.tolerance:0<o&&i<=d}function i(e){if(e){var t=e.split(",");return 1===t.length&&isNaN(t[0])&&(t[1]=t[0],t[0]=void 0),{tolerance:t[0]?t[0].trim():void 0,viewport:t[1]?h(t[1].trim()):void 0}}return{}}(h=h&&h.hasOwnProperty("default")?h.default:h).extend(h.expr.pseudos||h.expr[":"],{"in-viewport":h.expr.createPseudo?h.expr.createPseudo(function(t){return function(e){return m(e,i(t))}}):function(e,t,n){return m(e,i(n[3]))}}),h.fn.isInViewport=function(n){return this.filter(function(e,t){return m(t,n)})},h.fn.run=function(e){var n=this;1===arguments.length&&"function"==typeof e&&(e=[e]);if(e instanceof Array)return e.forEach(function(t){"function"!=typeof t?(console.warn("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions"),console.warn("isInViewport: Ignoring non-function values in array and moving on")):[].slice.call(n).forEach(function(e){return t.call(h(e))})}),this;throw new SyntaxError("isInViewport: Argument(s) passed to .do/.run should be a function or an array of functions")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tb2JpbGUuY3VzdG9tLmpzIiwidXRpbC5qcyIsImFsZXJ0LmpzIiwiYnV0dG9uLmpzIiwiY2Fyb3VzZWwuanMiLCJjb2xsYXBzZS5qcyIsImRyb3Bkb3duLmpzIiwibW9kYWwuanMiLCJqcXVlcnkubWFnbmlmaWMtcG9wdXAuanMiLCJqcXVlcnkuc3RpY2t5LmpzIiwiaXNJblZpZXdwb3J0LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJkb2MiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiJCIsIm1vYmlsZSIsImpRdWVyeSIsInRoaXMiLCJkb2N1bWVudCIsIndpbmRvdyIsInVuZGVmaW5lZCIsInN1cHBvcnQiLCIkZG9jdW1lbnQiLCJzdXBwb3J0VG91Y2giLCJzY3JvbGxFdmVudCIsInRvdWNoU3RhcnRFdmVudCIsInRvdWNoU3RvcEV2ZW50IiwidG91Y2hNb3ZlRXZlbnQiLCJ0cmlnZ2VyQ3VzdG9tRXZlbnQiLCJvYmoiLCJldmVudFR5cGUiLCJldmVudCIsImJ1YmJsZSIsIm9yaWdpbmFsVHlwZSIsInR5cGUiLCJ0cmlnZ2VyIiwiZGlzcGF0Y2giLCJjYWxsIiwidGhyZXNob2xkIiwiaSIsImRhdGFQcm9wZXJ0eU5hbWUiLCJ0b3VjaFRhcmdldFByb3BlcnR5TmFtZSIsInZpcnR1YWxFdmVudE5hbWVzIiwic3BsaXQiLCJ0b3VjaEV2ZW50UHJvcHMiLCJtb3VzZUhvb2tQcm9wcyIsIm1vdXNlSG9va3MiLCJwcm9wcyIsIm1vdXNlRXZlbnRQcm9wcyIsImNvbmNhdCIsImFjdGl2ZURvY0hhbmRsZXJzIiwicmVzZXRUaW1lcklEIiwic3RhcnRYIiwic3RhcnRZIiwiZGlkU2Nyb2xsIiwiY2xpY2tCbG9ja0xpc3QiLCJibG9ja01vdXNlVHJpZ2dlcnMiLCJibG9ja1RvdWNoVHJpZ2dlcnMiLCJldmVudENhcHR1cmVTdXBwb3J0ZWQiLCJuZXh0VG91Y2hJRCIsImxhc3RUb3VjaElEIiwiZ2V0TmF0aXZlRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwiZ2V0VmlydHVhbEJpbmRpbmdGbGFncyIsImVsZW1lbnQiLCJiIiwiayIsImZsYWdzIiwiZGF0YSIsImhhc1ZpcnR1YWxCaW5kaW5nIiwicGFyZW50Tm9kZSIsImRpc2FibGVUb3VjaEJpbmRpbmdzIiwiZGlzYWJsZU1vdXNlQmluZGluZ3MiLCJzdGFydFJlc2V0VGltZXIiLCJjbGVhclJlc2V0VGltZXIiLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwidm1vdXNlIiwicmVzZXRUaW1lckR1cmF0aW9uIiwiY2xlYXJUaW1lb3V0IiwidHJpZ2dlclZpcnR1YWxFdmVudCIsInZlIiwiZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmciLCJ0YXJnZXQiLCJvZSIsIm5lIiwicHJvcCIsImN0IiwidG91Y2giLCJqIiwibGVuIiwidCIsIkV2ZW50Iiwic2VhcmNoIiwid2hpY2giLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJjcmVhdGVWaXJ0dWFsRXZlbnQiLCJtb3VzZUV2ZW50Q2FsbGJhY2siLCJ0b3VjaElEIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicHJldmVudERlZmF1bHQiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiaGFuZGxlVG91Y2hTdGFydCIsInBhZ2VYIiwicGFnZVkiLCJoYW5kbGVTY3JvbGwiLCJoYW5kbGVUb3VjaE1vdmUiLCJkaWRDYW5jZWwiLCJtb3ZlVGhyZXNob2xkIiwibW92ZURpc3RhbmNlVGhyZXNob2xkIiwiTWF0aCIsImFicyIsImhhbmRsZVRvdWNoRW5kIiwicHVzaCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJoYXNWaXJ0dWFsQmluZGluZ3MiLCJlbGUiLCJiaW5kaW5ncyIsImR1bW15TW91c2VIYW5kbGVyIiwiY2xpY2tEaXN0YW5jZVRocmVzaG9sZCIsInNwZWNpYWwiLCJyZWFsVHlwZSIsInN1YnN0ciIsInNldHVwIiwiYmluZCIsInRlYXJkb3duIiwidW5iaW5kIiwiJHRoaXMiLCJyZW1vdmVEYXRhIiwiZ2V0U3BlY2lhbEV2ZW50T2JqZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJvIiwiY250IiwiZXh0ZW5kIiwiZWFjaCIsIm5hbWUiLCJmbiIsImF0dHJGbiIsInNjcm9sbHN0YXJ0IiwiZW5hYmxlZCIsInNjcm9sbGluZyIsInRpbWVyIiwidGhpc09iamVjdCIsInN0YXRlIiwidGFwIiwidGFwaG9sZFRocmVzaG9sZCIsImVtaXRUYXBPblRhcGhvbGQiLCJpc1RhcGhvbGQiLCJvcmlnVGFyZ2V0IiwiY2xlYXJUYXBUaW1lciIsImNsZWFyVGFwSGFuZGxlcnMiLCJjbGlja0hhbmRsZXIiLCJzd2lwZSIsInNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQiLCJkdXJhdGlvblRocmVzaG9sZCIsImhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZCIsInZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQiLCJnZXRMb2NhdGlvbiIsIndpblBhZ2VYIiwicGFnZVhPZmZzZXQiLCJ3aW5QYWdlWSIsInBhZ2VZT2Zmc2V0IiwiZmxvb3IiLCJzdGFydCIsImxvY2F0aW9uIiwidGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiY29vcmRzIiwib3JpZ2luIiwic3RvcCIsImhhbmRsZVN3aXBlIiwiZGlyZWN0aW9uIiwic3dpcGVzdGFydCIsInN3aXBlc3RvcCIsImV2ZW50SW5Qcm9ncmVzcyIsImNvbnRleHQiLCJldmVudHMiLCJlbWl0dGVkIiwibW92ZSIsIm9mZiIsIm9uIiwib25lIiwic2Nyb2xsc3RvcCIsInRhcGhvbGQiLCJzd2lwZWxlZnQiLCJzd2lwZXJpZ2h0Iiwic291cmNlRXZlbnQiLCJub29wIiwiVXRpbCIsInRyYW5zaXRpb24iLCJUcmFuc2l0aW9uRW5kRXZlbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwidHJhbnNpdGlvbkVuZEVtdWxhdG9yIiwiZHVyYXRpb24iLCJfdGhpcyIsImNhbGxlZCIsIlRSQU5TSVRJT05fRU5EIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJnZXRVSUQiLCJwcmVmaXgiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJzZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInRlc3QiLCJyZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJlbmQiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwicHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsImV4cGVjdGVkVHlwZXMiLCJ2YWx1ZSIsInZhbHVlVHlwZSIsIm5vZGVUeXBlIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiUmVnRXhwIiwiRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsIlFVbml0IiwiZWwiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJ0cmFuc2l0aW9uRW5kVGVzdCIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJpcyIsImhhbmRsZU9iaiIsImhhbmRsZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiQWxlcnQiLCJOQU1FIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiY2xvc2UiLCJfZWxlbWVudCIsInJvb3RFbGVtZW50IiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwicGFyZW50IiwiY2xvc2VzdCIsImNsb3NlRXZlbnQiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiX2Rlc3Ryb3lFbGVtZW50IiwiZGV0YWNoIiwicmVtb3ZlIiwiX2pRdWVyeUludGVyZmFjZSIsIiRlbGVtZW50IiwiX2hhbmRsZURpc21pc3MiLCJhbGVydEluc3RhbmNlIiwiZ2V0Iiwibm9Db25mbGljdCIsIkJ1dHRvbiIsIkRBVEFfQVBJX0tFWSIsIlNlbGVjdG9yIiwiRk9DVVNfQkxVUl9EQVRBX0FQSSIsInRvZ2dsZSIsImlucHV0IiwiYWN0aXZlRWxlbWVudCIsInRyaWdnZXJDaGFuZ2VFdmVudCIsImZpbmQiLCJjaGVja2VkIiwiZm9jdXMiLCJzZXRBdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiQ2Fyb3VzZWwiLCJEZWZhdWx0IiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ3cmFwIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJORVhUIiwiUFJFViIsIkxFRlQiLCJSSUdIVCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIkxPQURfREFUQV9BUEkiLCJBQ1RJVkUiLCJBQ1RJVkVfSVRFTSIsIklURU0iLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiREFUQV9TTElERSIsIkRBVEFfUklERSIsIm5leHQiLCJfaXNTbGlkaW5nIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwicHJldiIsIlBSRVZJT1VTIiwiX2lzUGF1c2VkIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwiX2ludGVydmFsIiwiX2NvbmZpZyIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwidG8iLCJpbmRleCIsIl9hY3RpdmVFbGVtZW50IiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiX2l0ZW1zIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2dldENvbmZpZyIsIl9hZGRFdmVudExpc3RlbmVycyIsIl90aGlzMiIsIl9rZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIm1ha2VBcnJheSIsImluZGV4T2YiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJzbGlkZUV2ZW50IiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJuZXh0SW5kaWNhdG9yIiwiY2hpbGRyZW4iLCJhZGRDbGFzcyIsInNsaWRFdmVudCIsIl90aGlzMyIsIm5leHRFbGVtZW50IiwiaXNDeWNsaW5nIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsImFjdGlvbiIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsIkNvbGxhcHNlIiwiU0hPVyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkRpbWVuc2lvbiIsImhpZGUiLCJzaG93IiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwic3RhcnRFdmVudCIsImRpbWVuc2lvbiIsImNvbXBsZXRlIiwic2Nyb2xsU2l6ZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfcGFyZW50IiwiX2dldERpbWVuc2lvbiIsIl90cmlnZ2VyQXJyYXkiLCJhdHRyIiwic2V0VHJhbnNpdGlvbmluZyIsInNsaWNlIiwib2Zmc2V0RGltZW5zaW9uIiwiaXNUcmFuc2l0aW9uaW5nIiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJpZCIsIkRyb3Bkb3duIiwiQ0xJQ0siLCJGT0NVU0lOX0RBVEFfQVBJIiwiS0VZRE9XTl9EQVRBX0FQSSIsImRpc2FibGVkIiwiZHJvcGRvd24iLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwiY2xhc3NOYW1lIiwiaW5zZXJ0QmVmb3JlIiwic2hvd0V2ZW50IiwiYmFja2Ryb3AiLCJyZW1vdmVDaGlsZCIsInRvZ2dsZXMiLCJoaWRlRXZlbnQiLCJjb250YWlucyIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpdGVtcyIsIk1vZGFsIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIkRJQUxPRyIsIkRBVEFfVE9HR0xFIiwiREFUQV9ESVNNSVNTIiwiRklYRURfQ09OVEVOVCIsIl9pc1Nob3duIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsImJvZHkiLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfZGlhbG9nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsIl9iYWNrZHJvcCIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9vcmlnaW5hbEJvZHlQYWRkaW5nIiwiX3Njcm9sbGJhcldpZHRoIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsInJlbW92ZUF0dHJpYnV0ZSIsInNjcm9sbFRvcCIsIl9lbmZvcmNlRm9jdXMiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJzaG93bkV2ZW50IiwiX3RoaXM0IiwiaGFzIiwiX3RoaXM1IiwiX3RoaXM2IiwiX2hhbmRsZVVwZGF0ZSIsIl90aGlzNyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiY2FsbGJhY2siLCJjYWxsYmFja1JlbW92ZSIsIl90aGlzOCIsImFuaW1hdGUiLCJkb0FuaW1hdGUiLCJhcHBlbmRUbyIsImN1cnJlbnRUYXJnZXQiLCJfYWRqdXN0RGlhbG9nIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJib2R5UGFkZGluZyIsInBhcnNlSW50IiwiY3NzIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJvZmZzZXRXaWR0aCIsIl90aGlzOSIsIiR0YXJnZXQiLCJleHBvcnRzIiwicmVxdWlyZSIsIlplcHRvIiwiTWFnbmlmaWNQb3B1cCIsIl9tZnBPbiIsImYiLCJtZnAiLCJldiIsIkVWRU5UX05TIiwiX2dldEVsIiwiaHRtbCIsInJhdyIsImlubmVySFRNTCIsIl9tZnBUcmlnZ2VyIiwidHJpZ2dlckhhbmRsZXIiLCJzdCIsImNhbGxiYWNrcyIsImNoYXJBdCIsImlzQXJyYXkiLCJfZ2V0Q2xvc2VCdG4iLCJfY3VyclBvcHVwVHlwZSIsImN1cnJUZW1wbGF0ZSIsImNsb3NlQnRuIiwiY2xvc2VNYXJrdXAiLCJyZXBsYWNlIiwidENsb3NlIiwiX2NoZWNrSW5zdGFuY2UiLCJtYWduaWZpY1BvcHVwIiwiaW5pdCIsIl9wcmV2U3RhdHVzIiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIkNMT1NFX0VWRU5UIiwiQkVGT1JFX0NMT1NFX0VWRU5UIiwiTUFSS1VQX1BBUlNFX0VWRU5UIiwiT1BFTl9FVkVOVCIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwiX2lzSlEiLCJfd2luZG93IiwiYXBwVmVyc2lvbiIsIm5hdmlnYXRvciIsImlzTG93SUUiLCJpc0lFOCIsImFsbCIsImlzQW5kcm9pZCIsImlzSU9TIiwic3VwcG9ydHNUcmFuc2l0aW9uIiwicyIsInYiLCJwb3AiLCJzdXBwb3J0c1RyYW5zaXRpb25zIiwicHJvYmFibHlNb2JpbGUiLCJ1c2VyQWdlbnQiLCJwb3B1cHNDYWNoZSIsIm9wZW4iLCJpc09iaiIsInRvQXJyYXkiLCJpdGVtIiwicGFyc2VkIiwidHlwZXMiLCJtYWluRWwiLCJlcSIsImRlZmF1bHRzIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJfY2hlY2tJZkNsb3NlIiwiY29udGFpbmVyIiwiY29udGVudENvbnRhaW5lciIsInByZWxvYWRlciIsInRMb2FkaW5nIiwibW9kdWxlcyIsIm4iLCJjbG9zZUJ0bkluc2lkZSIsInRlbXBsYXRlIiwidmFsdWVzIiwiY2xvc2VfcmVwbGFjZVdpdGgiLCJhcHBlbmQiLCJhbGlnblRvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwidG9wIiwicG9zaXRpb24iLCJmaXhlZEJnUG9zIiwiaGVpZ2h0Iiwia2V5Q29kZSIsInVwZGF0ZVNpemUiLCJ3aW5kb3dIZWlnaHQiLCJ3SCIsIndpbmRvd1N0eWxlcyIsIl9oYXNTY3JvbGxCYXIiLCJfZ2V0U2Nyb2xsYmFyU2l6ZSIsIm1hcmdpblJpZ2h0IiwiaXNJRTciLCJjbGFzc2VzVG9hZGQiLCJtYWluQ2xhc3MiLCJfYWRkQ2xhc3NUb01GUCIsInVwZGF0ZUl0ZW1IVE1MIiwiYWRkIiwicHJlcGVuZFRvIiwiX2xhc3RGb2N1c2VkRWwiLCJjb250ZW50IiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsImNsYXNzZXNUb1JlbW92ZSIsImVtcHR5IiwiX3JlbW92ZUNsYXNzRnJvbU1GUCIsInJlbW92ZUF0dHIiLCJjdXJySXRlbSIsImF1dG9Gb2N1c0xhc3QiLCJwcmV2SGVpZ2h0Iiwid2luSGVpZ2h0Iiwiem9vbUxldmVsIiwiaW5uZXJIZWlnaHQiLCJwYXJzZUVsIiwibWFya3VwIiwibmV3Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJwcmVwZW5kIiwic3JjIiwiYWRkR3JvdXAiLCJvcHRpb25zIiwiZUhhbmRsZXIiLCJtZnBFbCIsIl9vcGVuQ2xpY2siLCJlTmFtZSIsImRlbGVnYXRlIiwibWlkQ2xpY2siLCJjdHJsS2V5IiwibWV0YUtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwiZGlzYWJsZU9uIiwiaXNGdW5jdGlvbiIsIndpZHRoIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwidGV4dCIsImNsb3NlT25Db250ZW50IiwiY2xvc2VPbkJnIiwiY05hbWUiLCJfcGFyc2VNYXJrdXAiLCJhcnIiLCJyZXBsYWNlV2l0aCIsInNjcm9sbGJhclNpemUiLCJjc3NUZXh0IiwicHJvdG8iLCJyZWdpc3Rlck1vZHVsZSIsIm1vZHVsZSIsIml0ZW1PcHRzIiwianFFbCIsIkFycmF5IiwiX3B1dElubGluZUVsZW1lbnRzQmFjayIsIl9sYXN0SW5saW5lRWxlbWVudCIsIl9pbmxpbmVQbGFjZWhvbGRlciIsImFmdGVyIiwiX2hpZGRlbkNsYXNzIiwiSU5MSU5FX05TIiwiaGlkZGVuQ2xhc3MiLCJ0Tm90Rm91bmQiLCJpbml0SW5saW5lIiwiZ2V0SW5saW5lIiwiaW5saW5lU3QiLCJpbmxpbmUiLCJpbmxpbmVFbGVtZW50IiwiX3JlbW92ZUFqYXhDdXJzb3IiLCJfYWpheEN1ciIsIl9kZXN0cm95QWpheFJlcXVlc3QiLCJyZXEiLCJhYm9ydCIsIkFKQVhfTlMiLCJzZXR0aW5ncyIsImN1cnNvciIsInRFcnJvciIsImluaXRBamF4IiwiYWpheCIsImdldEFqYXgiLCJvcHRzIiwidXJsIiwic3VjY2VzcyIsInRleHRTdGF0dXMiLCJqcVhIUiIsInRlbXAiLCJ4aHIiLCJmaW5pc2hlZCIsImVycm9yIiwibG9hZEVycm9yIiwiX2ltZ0ludGVydmFsIiwidGl0bGVTcmMiLCJ2ZXJ0aWNhbEZpdCIsImluaXRJbWFnZSIsImltZ1N0IiwiaW1hZ2UiLCJucyIsInJlc2l6ZUltYWdlIiwiZGVjciIsImltZyIsIl9vbkltYWdlSGFzU2l6ZSIsImhhc1NpemUiLCJpc0NoZWNraW5nSW1nU2l6ZSIsImltZ0hpZGRlbiIsImZpbmRJbWFnZVNpemUiLCJjb3VudGVyIiwibWZwU2V0SW50ZXJ2YWwiLCJkZWxheSIsIm5hdHVyYWxXaWR0aCIsImdldEltYWdlIiwiZ3VhcmQiLCJvbkxvYWRDb21wbGV0ZSIsImxvYWRlZCIsIm9uTG9hZEVycm9yIiwiYWx0IiwiY2xvbmUiLCJ0aXRsZSIsIl9nZXRUaXRsZSIsImltZ19yZXBsYWNlV2l0aCIsImxvYWRpbmciLCJoYXNNb3pUcmFuc2Zvcm0iLCJlYXNpbmciLCJvcGVuZXIiLCJpbml0Wm9vbSIsImdldEVsVG9BbmltYXRlIiwic2hvd01haW5Db250ZW50Iiwib3BlblRpbWVvdXQiLCJhbmltYXRlZEltZyIsInpvb21TdCIsInpvb20iLCJuZXdJbWciLCJjc3NPYmoiLCJ6SW5kZXgiLCJsZWZ0IiwiLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5IiwiX2FsbG93Wm9vbSIsIl9nZXRJdGVtVG9ab29tIiwiX2dldE9mZnNldCIsImlzTGFyZ2UiLCJvZmZzZXQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIk1velRyYW5zZm9ybSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwiSUZSQU1FX05TIiwic3JjQWN0aW9uIiwicGF0dGVybnMiLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJwcmV2VHlwZSIsIm5ld1R5cGUiLCJnZXRJZnJhbWUiLCJlbWJlZFNyYyIsImlmcmFtZVN0IiwiaWZyYW1lIiwibGFzdEluZGV4T2YiLCJkYXRhT2JqIiwiX2dldExvb3BlZElkIiwibnVtU2xpZGVzIiwiX3JlcGxhY2VDdXJyVG90YWwiLCJjdXJyIiwidG90YWwiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJhcnJvd3MiLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdTdCIsImdhbGxlcnkiLCJsIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsImNsaWNrIiwiX3ByZWxvYWRUaW1lb3V0IiwicHJlbG9hZE5lYXJieUltYWdlcyIsImdvVG8iLCJuZXdJbmRleCIsInAiLCJwcmVsb2FkQmVmb3JlIiwibWluIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsIm0iLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwicmV0aW5hIiwiaXNOYU4iLCJtYXgtd2lkdGgiLCJzY3JvbGxlciIsIiR3aW5kb3ciLCJkb2N1bWVudEhlaWdodCIsImR3aCIsImV4dHJhIiwic3RpY2tlZCIsIm5ld1RvcCIsIm5ld1dpZHRoIiwic3RpY2t5V3JhcHBlckNvbnRhaW5lciIsImV0c2UiLCJzdGlja3lXcmFwcGVyIiwidG9wU3BhY2luZyIsInN0aWNreUVsZW1lbnQiLCJvdXRlckhlaWdodCIsImN1cnJlbnRUb3AiLCJ6LWluZGV4IiwiYm90dG9tU3BhY2luZyIsImdldFdpZHRoRnJvbSIsIndpZHRoRnJvbVdyYXBwZXIiLCJyZXNpemVyIiwicmVzcG9uc2l2ZVdpZHRoIiwic3BsaWNlIiwid3JhcHBlckNsYXNzTmFtZSIsImNlbnRlciIsIm1ldGhvZHMiLCJzdGlja3lJZCIsIndyYXBwZXJJZCIsIndyYXBwZXIiLCJ3cmFwQWxsIiwib3V0ZXJXaWR0aCIsIm1hcmdpbkxlZnQiLCJmbG9hdCIsInNldFdyYXBwZXJIZWlnaHQiLCJzZXR1cENoYW5nZUxpc3RlbmVycyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsInN1YnRyZWUiLCJjaGlsZExpc3QiLCJ1cGRhdGUiLCJ1bnN0aWNrIiwidW5zdGlja3lFbGVtZW50IiwicmVtb3ZlSWR4IiwidW53cmFwIiwiYXR0YWNoRXZlbnQiLCJzdGlja3kiLCJtZXRob2QiLCJnbG9iYWwiLCJpc0luVmlld3BvcnQiLCJyZWYiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJyaWdodCIsInRvbGVyYW5jZSIsInZpZXdwb3J0IiwiaXNWaXNpYmxlRmxhZyIsIiR2aWV3cG9ydCIsImpxdWVyeSIsImNvbnNvbGUiLCJ3YXJuIiwidmlld3BvcnRSZWN0IiwiJHZpZXdwb3J0SGVpZ2h0IiwiJHZpZXdwb3J0V2lkdGgiLCJ0eXBlb2ZWaWV3cG9ydCIsInNjcm9sbEJhcldpZHRoIiwiZ2V0U2Nyb2xsYmFyV2lkdGgiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJnZXRTZWxlY3RvckFyZ3MiLCJhcmdzU3RyaW5nIiwiYXJncyIsInRyaW0iLCJleHByIiwicHNldWRvcyIsImluLXZpZXdwb3J0IiwiY3JlYXRlUHNldWRvIiwiY3VyckVsZW1lbnQiLCJjdXJyT2JqIiwibWV0YSIsImZpbHRlciIsInJ1biIsInRoaXMkMSIsImZvckVhY2giLCJhcmciLCJTeW50YXhFcnJvciJdLCJtYXBwaW5ncyI6IkNBVUEsU0FBQUEsRUFBQUMsRUFBQUMsR0FDQSxtQkFBQUMsUUFBQUEsT0FBQUMsSUFFQUQsT0FBQSxDQUFBLFVBQUEsU0FBQUUsR0FFQSxPQURBSCxFQUFBRyxFQUFBTCxFQUFBQyxHQUNBSSxFQUFBQyxTQUlBSixFQUFBRixFQUFBTyxPQUFBUCxFQUFBQyxHQVRBLENBV0FPLEtBQUFDLFNBQUEsU0FBQUYsRUFBQUcsRUFBQUQsRUFBQUUsR0EyZkEsSUFBQU4sRUFDQU8sRUFVQVAsRUFBQUssRUFBQUMsRUFDQUUsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFrQkEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixFQUFBRyxLQUNBSCxFQUFBRyxLQUFBSixFQUNBRSxFQUNBbEIsRUFB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QixFQUFBbVosTUFHQXBuQixFQUFBa0ksR0FBQWl2QixJQUdBLFNBQUFWLEdBQ0EsSUFBQVcsRUFBQWozQixLQUVBLElBQUEwTyxVQUFBL0ssUUFBQSxtQkFBQTJ5QixJQUNBQSxFQUFBLENBQUFBLElBR0EsR0FBQUEsYUFBQXZOLE1BYUEsT0FUQXVOLEVBQUFZLFFBQUEsU0FBQUMsR0FDQSxtQkFBQUEsR0FDQXpCLFFBQUFDLEtBQUEsOEZBQ0FELFFBQUFDLEtBQUEsc0VBRUEsR0FBQTljLE1BQUF6WCxLQUFBNjFCLEdBQUFDLFFBQUEsU0FBQXh5QixHQUFBLE9BQUF5eUIsRUFBQS8xQixLQUFBdkIsRUFBQTZFLFFBSUExRSxLQVpBLE1BQUEsSUFBQW8zQixZQUFBIiwiZmlsZSI6InBsdWdpbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBqUXVlcnkgTW9iaWxlIHYxLjQuNVxuKiBodHRwOi8vanF1ZXJ5bW9iaWxlLmNvbVxuKlxuKiBDb3B5cmlnaHQgMjAxMCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuKlxuKi9cblxuKGZ1bmN0aW9uICggcm9vdCwgZG9jLCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiBdLCBmdW5jdGlvbiAoICQgKSB7XG5cdFx0XHRmYWN0b3J5KCAkLCByb290LCBkb2MgKTtcblx0XHRcdHJldHVybiAkLm1vYmlsZTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCByb290LmpRdWVyeSwgcm9vdCwgZG9jICk7XG5cdH1cbn0oIHRoaXMsIGRvY3VtZW50LCBmdW5jdGlvbiAoIGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkICkgey8vIFRoaXMgcGx1Z2luIGlzIGFuIGV4cGVyaW1lbnQgZm9yIGFic3RyYWN0aW5nIGF3YXkgdGhlIHRvdWNoIGFuZCBtb3VzZVxuLy8gZXZlbnRzIHNvIHRoYXQgZGV2ZWxvcGVycyBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHdoaWNoIG1ldGhvZCBvZiBpbnB1dFxuLy8gdGhlIGRldmljZSB0aGVpciBkb2N1bWVudCBpcyBsb2FkZWQgb24gc3VwcG9ydHMuXG4vL1xuLy8gVGhlIGlkZWEgaGVyZSBpcyB0byBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIHJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgdGhlXG4vLyBiYXNpYyBtb3VzZSBldmVudHMsIHN1Y2ggYXMgbW91c2Vkb3duLCBtb3VzZW1vdmUsIG1vdXNldXAsIGFuZCBjbGljayxcbi8vIGFuZCB0aGUgcGx1Z2luIHdpbGwgdGFrZSBjYXJlIG9mIHJlZ2lzdGVyaW5nIHRoZSBjb3JyZWN0IGxpc3RlbmVyc1xuLy8gYmVoaW5kIHRoZSBzY2VuZXMgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciBhdCB0aGUgZmFzdGVzdCBwb3NzaWJsZSB0aW1lXG4vLyBmb3IgdGhhdCBkZXZpY2UsIHdoaWxlIHN0aWxsIHJldGFpbmluZyB0aGUgb3JkZXIgb2YgZXZlbnQgZmlyaW5nIGluXG4vLyB0aGUgdHJhZGl0aW9uYWwgbW91c2UgZW52aXJvbm1lbnQsIHNob3VsZCBtdWx0aXBsZSBoYW5kbGVycyBiZSByZWdpc3RlcmVkXG4vLyBvbiB0aGUgc2FtZSBlbGVtZW50IGZvciBkaWZmZXJlbnQgZXZlbnRzLlxuLy9cbi8vIFRoZSBjdXJyZW50IHZlcnNpb24gZXhwb3NlcyB0aGUgZm9sbG93aW5nIHZpcnR1YWwgZXZlbnRzIHRvIGpRdWVyeSBiaW5kIG1ldGhvZHM6XG4vLyBcInZtb3VzZW92ZXIgdm1vdXNlZG93biB2bW91c2Vtb3ZlIHZtb3VzZXVwIHZjbGljayB2bW91c2VvdXQgdm1vdXNlY2FuY2VsXCJcblxuKGZ1bmN0aW9uKCAkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7XG5cbnZhciBkYXRhUHJvcGVydHlOYW1lID0gXCJ2aXJ0dWFsTW91c2VCaW5kaW5nc1wiLFxuXHR0b3VjaFRhcmdldFByb3BlcnR5TmFtZSA9IFwidmlydHVhbFRvdWNoSURcIixcblx0dmlydHVhbEV2ZW50TmFtZXMgPSBcInZtb3VzZW92ZXIgdm1vdXNlZG93biB2bW91c2Vtb3ZlIHZtb3VzZXVwIHZjbGljayB2bW91c2VvdXQgdm1vdXNlY2FuY2VsXCIuc3BsaXQoIFwiIFwiICksXG5cdHRvdWNoRXZlbnRQcm9wcyA9IFwiY2xpZW50WCBjbGllbnRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWVwiLnNwbGl0KCBcIiBcIiApLFxuXHRtb3VzZUhvb2tQcm9wcyA9ICQuZXZlbnQubW91c2VIb29rcyA/ICQuZXZlbnQubW91c2VIb29rcy5wcm9wcyA6IFtdLFxuXHRtb3VzZUV2ZW50UHJvcHMgPSAkLmV2ZW50LnByb3BzLmNvbmNhdCggbW91c2VIb29rUHJvcHMgKSxcblx0YWN0aXZlRG9jSGFuZGxlcnMgPSB7fSxcblx0cmVzZXRUaW1lcklEID0gMCxcblx0c3RhcnRYID0gMCxcblx0c3RhcnRZID0gMCxcblx0ZGlkU2Nyb2xsID0gZmFsc2UsXG5cdGNsaWNrQmxvY2tMaXN0ID0gW10sXG5cdGJsb2NrTW91c2VUcmlnZ2VycyA9IGZhbHNlLFxuXHRibG9ja1RvdWNoVHJpZ2dlcnMgPSBmYWxzZSxcblx0ZXZlbnRDYXB0dXJlU3VwcG9ydGVkID0gXCJhZGRFdmVudExpc3RlbmVyXCIgaW4gZG9jdW1lbnQsXG5cdCRkb2N1bWVudCA9ICQoIGRvY3VtZW50ICksXG5cdG5leHRUb3VjaElEID0gMSxcblx0bGFzdFRvdWNoSUQgPSAwLCB0aHJlc2hvbGQsXG5cdGk7XG5cbiQudm1vdXNlID0ge1xuXHRtb3ZlRGlzdGFuY2VUaHJlc2hvbGQ6IDEwLFxuXHRjbGlja0Rpc3RhbmNlVGhyZXNob2xkOiAxMCxcblx0cmVzZXRUaW1lckR1cmF0aW9uOiAxNTAwXG59O1xuXG5mdW5jdGlvbiBnZXROYXRpdmVFdmVudCggZXZlbnQgKSB7XG5cblx0d2hpbGUgKCBldmVudCAmJiB0eXBlb2YgZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdH1cblx0cmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWaXJ0dWFsRXZlbnQoIGV2ZW50LCBldmVudFR5cGUgKSB7XG5cblx0dmFyIHQgPSBldmVudC50eXBlLFxuXHRcdG9lLCBwcm9wcywgbmUsIHByb3AsIGN0LCB0b3VjaCwgaSwgaiwgbGVuO1xuXG5cdGV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTtcblx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblxuXHRvZSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdHByb3BzID0gJC5ldmVudC5wcm9wcztcblxuXHQvLyBhZGRyZXNzZXMgc2VwYXJhdGlvbiBvZiAkLmV2ZW50LnByb3BzIGluIHRvICQuZXZlbnQubW91c2VIb29rLnByb3BzIGFuZCBJc3N1ZSAzMjgwXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMzI4MFxuXHRpZiAoIHQuc2VhcmNoKCAvXihtb3VzZXxjbGljaykvICkgPiAtMSApIHtcblx0XHRwcm9wcyA9IG1vdXNlRXZlbnRQcm9wcztcblx0fVxuXG5cdC8vIGNvcHkgb3JpZ2luYWwgZXZlbnQgcHJvcGVydGllcyBvdmVyIHRvIHRoZSBuZXcgZXZlbnRcblx0Ly8gdGhpcyB3b3VsZCBoYXBwZW4gaWYgd2UgY291bGQgY2FsbCAkLmV2ZW50LmZpeCBpbnN0ZWFkIG9mICQuRXZlbnRcblx0Ly8gYnV0IHdlIGRvbid0IGhhdmUgYSB3YXkgdG8gZm9yY2UgYW4gZXZlbnQgdG8gYmUgZml4ZWQgbXVsdGlwbGUgdGltZXNcblx0aWYgKCBvZSApIHtcblx0XHRmb3IgKCBpID0gcHJvcHMubGVuZ3RoLCBwcm9wOyBpOyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgLS1pIF07XG5cdFx0XHRldmVudFsgcHJvcCBdID0gb2VbIHByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBtYWtlIHN1cmUgdGhhdCBpZiB0aGUgbW91c2UgYW5kIGNsaWNrIHZpcnR1YWwgZXZlbnRzIGFyZSBnZW5lcmF0ZWRcblx0Ly8gd2l0aG91dCBhIC53aGljaCBvbmUgaXMgZGVmaW5lZFxuXHRpZiAoIHQuc2VhcmNoKC9tb3VzZShkb3dufHVwKXxjbGljay8pID4gLTEgJiYgIWV2ZW50LndoaWNoICkge1xuXHRcdGV2ZW50LndoaWNoID0gMTtcblx0fVxuXG5cdGlmICggdC5zZWFyY2goL150b3VjaC8pICE9PSAtMSApIHtcblx0XHRuZSA9IGdldE5hdGl2ZUV2ZW50KCBvZSApO1xuXHRcdHQgPSBuZS50b3VjaGVzO1xuXHRcdGN0ID0gbmUuY2hhbmdlZFRvdWNoZXM7XG5cdFx0dG91Y2ggPSAoIHQgJiYgdC5sZW5ndGggKSA/IHRbMF0gOiAoICggY3QgJiYgY3QubGVuZ3RoICkgPyBjdFsgMCBdIDogdW5kZWZpbmVkICk7XG5cblx0XHRpZiAoIHRvdWNoICkge1xuXHRcdFx0Zm9yICggaiA9IDAsIGxlbiA9IHRvdWNoRXZlbnRQcm9wcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuXHRcdFx0XHRwcm9wID0gdG91Y2hFdmVudFByb3BzWyBqIF07XG5cdFx0XHRcdGV2ZW50WyBwcm9wIF0gPSB0b3VjaFsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBldmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZWxlbWVudCApIHtcblxuXHR2YXIgZmxhZ3MgPSB7fSxcblx0XHRiLCBrO1xuXG5cdHdoaWxlICggZWxlbWVudCApIHtcblxuXHRcdGIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTtcblxuXHRcdGZvciAoICBrIGluIGIgKSB7XG5cdFx0XHRpZiAoIGJbIGsgXSApIHtcblx0XHRcdFx0ZmxhZ3NbIGsgXSA9IGZsYWdzLmhhc1ZpcnR1YWxCaW5kaW5nID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0fVxuXHRyZXR1cm4gZmxhZ3M7XG59XG5cbmZ1bmN0aW9uIGdldENsb3Nlc3RFbGVtZW50V2l0aFZpcnR1YWxCaW5kaW5nKCBlbGVtZW50LCBldmVudFR5cGUgKSB7XG5cdHZhciBiO1xuXHR3aGlsZSAoIGVsZW1lbnQgKSB7XG5cblx0XHRiID0gJC5kYXRhKCBlbGVtZW50LCBkYXRhUHJvcGVydHlOYW1lICk7XG5cblx0XHRpZiAoIGIgJiYgKCAhZXZlbnRUeXBlIHx8IGJbIGV2ZW50VHlwZSBdICkgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHR9XG5cdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZW5hYmxlVG91Y2hCaW5kaW5ncygpIHtcblx0YmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVUb3VjaEJpbmRpbmdzKCkge1xuXHRibG9ja1RvdWNoVHJpZ2dlcnMgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBlbmFibGVNb3VzZUJpbmRpbmdzKCkge1xuXHRsYXN0VG91Y2hJRCA9IDA7XG5cdGNsaWNrQmxvY2tMaXN0Lmxlbmd0aCA9IDA7XG5cdGJsb2NrTW91c2VUcmlnZ2VycyA9IGZhbHNlO1xuXG5cdC8vIFdoZW4gbW91c2UgYmluZGluZ3MgYXJlIGVuYWJsZWQsIG91clxuXHQvLyB0b3VjaCBiaW5kaW5ncyBhcmUgZGlzYWJsZWQuXG5cdGRpc2FibGVUb3VjaEJpbmRpbmdzKCk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVNb3VzZUJpbmRpbmdzKCkge1xuXHQvLyBXaGVuIG1vdXNlIGJpbmRpbmdzIGFyZSBkaXNhYmxlZCwgb3VyXG5cdC8vIHRvdWNoIGJpbmRpbmdzIGFyZSBlbmFibGVkLlxuXHRlbmFibGVUb3VjaEJpbmRpbmdzKCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UmVzZXRUaW1lcigpIHtcblx0Y2xlYXJSZXNldFRpbWVyKCk7XG5cdHJlc2V0VGltZXJJRCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHJlc2V0VGltZXJJRCA9IDA7XG5cdFx0ZW5hYmxlTW91c2VCaW5kaW5ncygpO1xuXHR9LCAkLnZtb3VzZS5yZXNldFRpbWVyRHVyYXRpb24gKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJSZXNldFRpbWVyKCkge1xuXHRpZiAoIHJlc2V0VGltZXJJRCApIHtcblx0XHRjbGVhclRpbWVvdXQoIHJlc2V0VGltZXJJRCApO1xuXHRcdHJlc2V0VGltZXJJRCA9IDA7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJpZ2dlclZpcnR1YWxFdmVudCggZXZlbnRUeXBlLCBldmVudCwgZmxhZ3MgKSB7XG5cdHZhciB2ZTtcblxuXHRpZiAoICggZmxhZ3MgJiYgZmxhZ3NbIGV2ZW50VHlwZSBdICkgfHxcblx0XHRcdFx0KCAhZmxhZ3MgJiYgZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmcoIGV2ZW50LnRhcmdldCwgZXZlbnRUeXBlICkgKSApIHtcblxuXHRcdHZlID0gY3JlYXRlVmlydHVhbEV2ZW50KCBldmVudCwgZXZlbnRUeXBlICk7XG5cblx0XHQkKCBldmVudC50YXJnZXQpLnRyaWdnZXIoIHZlICk7XG5cdH1cblxuXHRyZXR1cm4gdmU7XG59XG5cbmZ1bmN0aW9uIG1vdXNlRXZlbnRDYWxsYmFjayggZXZlbnQgKSB7XG5cdHZhciB0b3VjaElEID0gJC5kYXRhKCBldmVudC50YXJnZXQsIHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lICksXG5cdFx0dmU7XG5cblx0aWYgKCAhYmxvY2tNb3VzZVRyaWdnZXJzICYmICggIWxhc3RUb3VjaElEIHx8IGxhc3RUb3VjaElEICE9PSB0b3VjaElEICkgKSB7XG5cdFx0dmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZcIiArIGV2ZW50LnR5cGUsIGV2ZW50ICk7XG5cdFx0aWYgKCB2ZSApIHtcblx0XHRcdGlmICggdmUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2ZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydCggZXZlbnQgKSB7XG5cblx0dmFyIHRvdWNoZXMgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS50b3VjaGVzLFxuXHRcdHRhcmdldCwgZmxhZ3MsIHQ7XG5cblx0aWYgKCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0dGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdGZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggdGFyZ2V0ICk7XG5cblx0XHRpZiAoIGZsYWdzLmhhc1ZpcnR1YWxCaW5kaW5nICkge1xuXG5cdFx0XHRsYXN0VG91Y2hJRCA9IG5leHRUb3VjaElEKys7XG5cdFx0XHQkLmRhdGEoIHRhcmdldCwgdG91Y2hUYXJnZXRQcm9wZXJ0eU5hbWUsIGxhc3RUb3VjaElEICk7XG5cblx0XHRcdGNsZWFyUmVzZXRUaW1lcigpO1xuXG5cdFx0XHRkaXNhYmxlTW91c2VCaW5kaW5ncygpO1xuXHRcdFx0ZGlkU2Nyb2xsID0gZmFsc2U7XG5cblx0XHRcdHQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS50b3VjaGVzWyAwIF07XG5cdFx0XHRzdGFydFggPSB0LnBhZ2VYO1xuXHRcdFx0c3RhcnRZID0gdC5wYWdlWTtcblxuXHRcdFx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2VvdmVyXCIsIGV2ZW50LCBmbGFncyApO1xuXHRcdFx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2Vkb3duXCIsIGV2ZW50LCBmbGFncyApO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwoIGV2ZW50ICkge1xuXHRpZiAoIGJsb2NrVG91Y2hUcmlnZ2VycyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoICFkaWRTY3JvbGwgKSB7XG5cdFx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2VjYW5jZWxcIiwgZXZlbnQsIGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApICk7XG5cdH1cblxuXHRkaWRTY3JvbGwgPSB0cnVlO1xuXHRzdGFydFJlc2V0VGltZXIoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKCBldmVudCApIHtcblx0aWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS50b3VjaGVzWyAwIF0sXG5cdFx0ZGlkQ2FuY2VsID0gZGlkU2Nyb2xsLFxuXHRcdG1vdmVUaHJlc2hvbGQgPSAkLnZtb3VzZS5tb3ZlRGlzdGFuY2VUaHJlc2hvbGQsXG5cdFx0ZmxhZ3MgPSBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBldmVudC50YXJnZXQgKTtcblxuXHRcdGRpZFNjcm9sbCA9IGRpZFNjcm9sbCB8fFxuXHRcdFx0KCBNYXRoLmFicyggdC5wYWdlWCAtIHN0YXJ0WCApID4gbW92ZVRocmVzaG9sZCB8fFxuXHRcdFx0XHRNYXRoLmFicyggdC5wYWdlWSAtIHN0YXJ0WSApID4gbW92ZVRocmVzaG9sZCApO1xuXG5cdGlmICggZGlkU2Nyb2xsICYmICFkaWRDYW5jZWwgKSB7XG5cdFx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2VjYW5jZWxcIiwgZXZlbnQsIGZsYWdzICk7XG5cdH1cblxuXHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZW1vdmVcIiwgZXZlbnQsIGZsYWdzICk7XG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCggZXZlbnQgKSB7XG5cdGlmICggYmxvY2tUb3VjaFRyaWdnZXJzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGRpc2FibGVUb3VjaEJpbmRpbmdzKCk7XG5cblx0dmFyIGZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICksXG5cdFx0dmUsIHQ7XG5cdHRyaWdnZXJWaXJ0dWFsRXZlbnQoIFwidm1vdXNldXBcIiwgZXZlbnQsIGZsYWdzICk7XG5cblx0aWYgKCAhZGlkU2Nyb2xsICkge1xuXHRcdHZlID0gdHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2Y2xpY2tcIiwgZXZlbnQsIGZsYWdzICk7XG5cdFx0aWYgKCB2ZSAmJiB2ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdC8vIFRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlIGV2ZW50cyB0aGF0IGZvbGxvdyB0aGUgdG91Y2hlbmRcblx0XHRcdC8vIGV2ZW50IGRvbid0IG5lY2Vzc2FyaWx5IG1hdGNoIHRoZSB0YXJnZXQgdXNlZCBkdXJpbmcgdGhlXG5cdFx0XHQvLyB0b3VjaC4gVGhpcyBtZWFucyB3ZSBuZWVkIHRvIHJlbHkgb24gY29vcmRpbmF0ZXMgZm9yIGJsb2NraW5nXG5cdFx0XHQvLyBhbnkgY2xpY2sgdGhhdCBpcyBnZW5lcmF0ZWQuXG5cdFx0XHR0ID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkuY2hhbmdlZFRvdWNoZXNbIDAgXTtcblx0XHRcdGNsaWNrQmxvY2tMaXN0LnB1c2goe1xuXHRcdFx0XHR0b3VjaElEOiBsYXN0VG91Y2hJRCxcblx0XHRcdFx0eDogdC5jbGllbnRYLFxuXHRcdFx0XHR5OiB0LmNsaWVudFlcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBQcmV2ZW50IGFueSBtb3VzZSBldmVudHMgdGhhdCBmb2xsb3cgZnJvbSB0cmlnZ2VyaW5nXG5cdFx0XHQvLyB2aXJ0dWFsIGV2ZW50IG5vdGlmaWNhdGlvbnMuXG5cdFx0XHRibG9ja01vdXNlVHJpZ2dlcnMgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZW91dFwiLCBldmVudCwgZmxhZ3MpO1xuXHRkaWRTY3JvbGwgPSBmYWxzZTtcblxuXHRzdGFydFJlc2V0VGltZXIoKTtcbn1cblxuZnVuY3Rpb24gaGFzVmlydHVhbEJpbmRpbmdzKCBlbGUgKSB7XG5cdHZhciBiaW5kaW5ncyA9ICQuZGF0YSggZWxlLCBkYXRhUHJvcGVydHlOYW1lICksXG5cdFx0aztcblxuXHRpZiAoIGJpbmRpbmdzICkge1xuXHRcdGZvciAoIGsgaW4gYmluZGluZ3MgKSB7XG5cdFx0XHRpZiAoIGJpbmRpbmdzWyBrIF0gKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGR1bW15TW91c2VIYW5kbGVyKCkge31cblxuZnVuY3Rpb24gZ2V0U3BlY2lhbEV2ZW50T2JqZWN0KCBldmVudFR5cGUgKSB7XG5cdHZhciByZWFsVHlwZSA9IGV2ZW50VHlwZS5zdWJzdHIoIDEgKTtcblxuXHRyZXR1cm4ge1xuXHRcdHNldHVwOiBmdW5jdGlvbigvKiBkYXRhLCBuYW1lc3BhY2UgKi8pIHtcblx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhpcyBlbGVtZW50LFxuXHRcdFx0Ly8gYWRkIGEgYmluZGluZ3Mgb2JqZWN0IHRvIGl0cyBkYXRhLlxuXG5cdFx0XHRpZiAoICFoYXNWaXJ0dWFsQmluZGluZ3MoIHRoaXMgKSApIHtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lLCB7fSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBzZXR1cCBpcyBjYWxsZWQsIHdlIGtub3cgaXQgaXMgdGhlIGZpcnN0IGJpbmRpbmcgZm9yIHRoaXNcblx0XHRcdC8vIGV2ZW50VHlwZSwgc28gaW5pdGlhbGl6ZSB0aGUgY291bnQgZm9yIHRoZSBldmVudFR5cGUgdG8gemVyby5cblx0XHRcdHZhciBiaW5kaW5ncyA9ICQuZGF0YSggdGhpcywgZGF0YVByb3BlcnR5TmFtZSApO1xuXHRcdFx0YmluZGluZ3NbIGV2ZW50VHlwZSBdID0gdHJ1ZTtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBldmVudCBmb3IgdGhpcyB0eXBlLFxuXHRcdFx0Ly8gcmVnaXN0ZXIgYSBnbG9iYWwgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuXG5cblx0XHRcdGFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSA9ICggYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdIHx8IDAgKSArIDE7XG5cblx0XHRcdGlmICggYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdID09PSAxICkge1xuXHRcdFx0XHQkZG9jdW1lbnQuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTb21lIGJyb3dzZXJzLCBsaWtlIE9wZXJhIE1pbmksIHdvbid0IGRpc3BhdGNoIG1vdXNlL2NsaWNrIGV2ZW50c1xuXHRcdFx0Ly8gZm9yIGVsZW1lbnRzIHVubGVzcyB0aGV5IGFjdHVhbGx5IGhhdmUgaGFuZGxlcnMgcmVnaXN0ZXJlZCBvbiB0aGVtLlxuXHRcdFx0Ly8gVG8gZ2V0IGFyb3VuZCB0aGlzLCB3ZSByZWdpc3RlciBkdW1teSBoYW5kbGVycyBvbiB0aGUgZWxlbWVudHMuXG5cblx0XHRcdCQoIHRoaXMgKS5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTtcblxuXHRcdFx0Ly8gRm9yIG5vdywgaWYgZXZlbnQgY2FwdHVyZSBpcyBub3Qgc3VwcG9ydGVkLCB3ZSByZWx5IG9uIG1vdXNlIGhhbmRsZXJzLlxuXHRcdFx0aWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhlIGRvY3VtZW50LFxuXHRcdFx0XHQvLyByZWdpc3RlciBvdXIgdG91Y2hzdGFydCBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudC5cblxuXHRcdFx0XHRhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSA9ICggYWN0aXZlRG9jSGFuZGxlcnNbIFwidG91Y2hzdGFydFwiIF0gfHwgMCkgKyAxO1xuXG5cdFx0XHRcdGlmICggYWN0aXZlRG9jSGFuZGxlcnNbIFwidG91Y2hzdGFydFwiIF0gPT09IDEgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50LmJpbmQoIFwidG91Y2hzdGFydFwiLCBoYW5kbGVUb3VjaFN0YXJ0IClcblx0XHRcdFx0XHRcdC5iaW5kKCBcInRvdWNoZW5kXCIsIGhhbmRsZVRvdWNoRW5kIClcblxuXHRcdFx0XHRcdFx0Ly8gT24gdG91Y2ggcGxhdGZvcm1zLCB0b3VjaGluZyB0aGUgc2NyZWVuIGFuZCB0aGVuIGRyYWdnaW5nIHlvdXIgZmluZ2VyXG5cdFx0XHRcdFx0XHQvLyBjYXVzZXMgdGhlIHdpbmRvdyBjb250ZW50IHRvIHNjcm9sbCBhZnRlciBzb21lIGRpc3RhbmNlIHRocmVzaG9sZCBpc1xuXHRcdFx0XHRcdFx0Ly8gZXhjZWVkZWQuIE9uIHRoZXNlIHBsYXRmb3JtcywgYSBzY3JvbGwgcHJldmVudHMgYSBjbGljayBldmVudCBmcm9tIGJlaW5nXG5cdFx0XHRcdFx0XHQvLyBkaXNwYXRjaGVkLCBhbmQgb24gc29tZSBwbGF0Zm9ybXMsIGV2ZW4gdGhlIHRvdWNoZW5kIGlzIHN1cHByZXNzZWQuIFRvXG5cdFx0XHRcdFx0XHQvLyBtaW1pYyB0aGUgc3VwcHJlc3Npb24gb2YgdGhlIGNsaWNrIGV2ZW50LCB3ZSBuZWVkIHRvIHdhdGNoIGZvciBhIHNjcm9sbFxuXHRcdFx0XHRcdFx0Ly8gZXZlbnQuIFVuZm9ydHVuYXRlbHksIHNvbWUgcGxhdGZvcm1zIGxpa2UgaU9TIGRvbid0IGRpc3BhdGNoIHNjcm9sbFxuXHRcdFx0XHRcdFx0Ly8gZXZlbnRzIHVudGlsICpBRlRFUiogdGhlIHVzZXIgbGlmdHMgdGhlaXIgZmluZ2VyICh0b3VjaGVuZCkuIFRoaXMgbWVhbnNcblx0XHRcdFx0XHRcdC8vIHdlIG5lZWQgdG8gd2F0Y2ggYm90aCBzY3JvbGwgYW5kIHRvdWNobW92ZSBldmVudHMgdG8gZmlndXJlIG91dCB3aGV0aGVyXG5cdFx0XHRcdFx0XHQvLyBvciBub3QgYSBzY3JvbGwgaGFwcGVuZW5zIGJlZm9yZSB0aGUgdG91Y2hlbmQgZXZlbnQgaXMgZmlyZWQuXG5cblx0XHRcdFx0XHRcdC5iaW5kKCBcInRvdWNobW92ZVwiLCBoYW5kbGVUb3VjaE1vdmUgKVxuXHRcdFx0XHRcdFx0LmJpbmQoIFwic2Nyb2xsXCIsIGhhbmRsZVNjcm9sbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigvKiBkYXRhLCBuYW1lc3BhY2UgKi8pIHtcblx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBiaW5kaW5nIGZvciB0aGlzIGV2ZW50VHlwZSxcblx0XHRcdC8vIHJlbW92ZSBpdHMgZ2xvYmFsIGhhbmRsZXIgZnJvbSB0aGUgZG9jdW1lbnQuXG5cblx0XHRcdC0tYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdO1xuXG5cdFx0XHRpZiAoICFhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gKSB7XG5cdFx0XHRcdCRkb2N1bWVudC51bmJpbmQoIHJlYWxUeXBlLCBtb3VzZUV2ZW50Q2FsbGJhY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGluIGV4aXN0ZW5jZSxcblx0XHRcdFx0Ly8gcmVtb3ZlIG91ciBkb2N1bWVudCB0b3VjaHN0YXJ0IGxpc3RlbmVyLlxuXG5cdFx0XHRcdC0tYWN0aXZlRG9jSGFuZGxlcnNbIFwidG91Y2hzdGFydFwiIF07XG5cblx0XHRcdFx0aWYgKCAhYWN0aXZlRG9jSGFuZGxlcnNbIFwidG91Y2hzdGFydFwiIF0gKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50LnVuYmluZCggXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZVRvdWNoU3RhcnQgKVxuXHRcdFx0XHRcdFx0LnVuYmluZCggXCJ0b3VjaG1vdmVcIiwgaGFuZGxlVG91Y2hNb3ZlIClcblx0XHRcdFx0XHRcdC51bmJpbmQoIFwidG91Y2hlbmRcIiwgaGFuZGxlVG91Y2hFbmQgKVxuXHRcdFx0XHRcdFx0LnVuYmluZCggXCJzY3JvbGxcIiwgaGFuZGxlU2Nyb2xsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyICR0aGlzID0gJCggdGhpcyApLFxuXHRcdFx0XHRiaW5kaW5ncyA9ICQuZGF0YSggdGhpcywgZGF0YVByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHQvLyB0ZWFyZG93biBtYXkgYmUgY2FsbGVkIHdoZW4gYW4gZWxlbWVudCB3YXNcblx0XHRcdC8vIHJlbW92ZWQgZnJvbSB0aGUgRE9NLiBJZiB0aGlzIGlzIHRoZSBjYXNlLFxuXHRcdFx0Ly8galF1ZXJ5IGNvcmUgbWF5IGhhdmUgYWxyZWFkeSBzdHJpcHBlZCB0aGUgZWxlbWVudFxuXHRcdFx0Ly8gb2YgYW55IGRhdGEgYmluZGluZ3Mgc28gd2UgbmVlZCB0byBjaGVjayBpdCBiZWZvcmVcblx0XHRcdC8vIHVzaW5nIGl0LlxuXHRcdFx0aWYgKCBiaW5kaW5ncyApIHtcblx0XHRcdFx0YmluZGluZ3NbIGV2ZW50VHlwZSBdID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVucmVnaXN0ZXIgdGhlIGR1bW15IGV2ZW50IGhhbmRsZXIuXG5cblx0XHRcdCR0aGlzLnVuYmluZCggcmVhbFR5cGUsIGR1bW15TW91c2VIYW5kbGVyICk7XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIG9uIHRoZVxuXHRcdFx0Ly8gZWxlbWVudCwgcmVtb3ZlIHRoZSBiaW5kaW5nIGRhdGEgZnJvbSB0aGUgZWxlbWVudC5cblxuXHRcdFx0aWYgKCAhaGFzVmlydHVhbEJpbmRpbmdzKCB0aGlzICkgKSB7XG5cdFx0XHRcdCR0aGlzLnJlbW92ZURhdGEoIGRhdGFQcm9wZXJ0eU5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEV4cG9zZSBvdXIgY3VzdG9tIGV2ZW50cyB0byB0aGUgalF1ZXJ5IGJpbmQvdW5iaW5kIG1lY2hhbmlzbS5cblxuZm9yICggaSA9IDA7IGkgPCB2aXJ0dWFsRXZlbnROYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0JC5ldmVudC5zcGVjaWFsWyB2aXJ0dWFsRXZlbnROYW1lc1sgaSBdIF0gPSBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIHZpcnR1YWxFdmVudE5hbWVzWyBpIF0gKTtcbn1cblxuLy8gQWRkIGEgY2FwdHVyZSBjbGljayBoYW5kbGVyIHRvIGJsb2NrIGNsaWNrcy5cbi8vIE5vdGUgdGhhdCB3ZSByZXF1aXJlIGV2ZW50IGNhcHR1cmUgc3VwcG9ydCBmb3IgdGhpcyBzbyBpZiB0aGUgZGV2aWNlXG4vLyBkb2Vzbid0IHN1cHBvcnQgaXQsIHdlIHB1bnQgZm9yIG5vdyBhbmQgcmVseSBzb2xlbHkgb24gbW91c2UgZXZlbnRzLlxuaWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiY2xpY2tcIiwgZnVuY3Rpb24oIGUgKSB7XG5cdFx0dmFyIGNudCA9IGNsaWNrQmxvY2tMaXN0Lmxlbmd0aCxcblx0XHRcdHRhcmdldCA9IGUudGFyZ2V0LFxuXHRcdFx0eCwgeSwgZWxlLCBpLCBvLCB0b3VjaElEO1xuXG5cdFx0aWYgKCBjbnQgKSB7XG5cdFx0XHR4ID0gZS5jbGllbnRYO1xuXHRcdFx0eSA9IGUuY2xpZW50WTtcblx0XHRcdHRocmVzaG9sZCA9ICQudm1vdXNlLmNsaWNrRGlzdGFuY2VUaHJlc2hvbGQ7XG5cblx0XHRcdC8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gcnVuIHRocm91Z2ggdGhlIGNsaWNrQmxvY2tMaXN0IHRvIHNlZSBpZlxuXHRcdFx0Ly8gdGhlIGN1cnJlbnQgY2xpY2sgZXZlbnQgaXMgaW4gdGhlIHByb3hpbWl0eSBvZiBvbmUgb2Ygb3VyXG5cdFx0XHQvLyB2Y2xpY2sgZXZlbnRzIHRoYXQgaGFkIHByZXZlbnREZWZhdWx0KCkgY2FsbGVkIG9uIGl0LiBJZiB3ZSBmaW5kXG5cdFx0XHQvLyBvbmUsIHRoZW4gd2UgYmxvY2sgdGhlIGNsaWNrLlxuXHRcdFx0Ly9cblx0XHRcdC8vIFdoeSBkbyB3ZSBoYXZlIHRvIHJlbHkgb24gcHJveGltaXR5P1xuXHRcdFx0Ly9cblx0XHRcdC8vIEJlY2F1c2UgdGhlIHRhcmdldCBvZiB0aGUgdG91Y2ggZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIHZjbGlja1xuXHRcdFx0Ly8gY2FuIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB0YXJnZXQgb2YgdGhlIGNsaWNrIGV2ZW50IHN5bnRoZXNpemVkXG5cdFx0XHQvLyBieSB0aGUgYnJvd3Nlci4gVGhlIHRhcmdldCBvZiBhIG1vdXNlL2NsaWNrIGV2ZW50IHRoYXQgaXMgc3ludGhlc2l6ZWRcblx0XHRcdC8vIGZyb20gYSB0b3VjaCBldmVudCBzZWVtcyB0byBiZSBpbXBsZW1lbnRhdGlvbiBzcGVjaWZpYy4gRm9yIGV4YW1wbGUsXG5cdFx0XHQvLyBzb21lIGJyb3dzZXJzIHdpbGwgZmlyZSBtb3VzZS9jbGljayBldmVudHMgZm9yIGEgbGluayB0aGF0IGlzIG5lYXJcblx0XHRcdC8vIGEgdG91Y2ggZXZlbnQsIGV2ZW4gdGhvdWdoIHRoZSB0YXJnZXQgb2YgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgZXZlbnRcblx0XHRcdC8vIHNheXMgdGhlIHVzZXIgdG91Y2hlZCBvdXRzaWRlIHRoZSBsaW5rLiBBbHNvLCBpdCBzZWVtcyB0aGF0IHdpdGggbW9zdFxuXHRcdFx0Ly8gYnJvd3NlcnMsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIGV2ZW50IGlzIG5vdCBjYWxjdWxhdGVkIHVudGlsIHRoZVxuXHRcdFx0Ly8gdGltZSBpdCBpcyBkaXNwYXRjaGVkLCBzbyBpZiB5b3UgcmVwbGFjZSBhbiBlbGVtZW50IHRoYXQgeW91IHRvdWNoZWRcblx0XHRcdC8vIHdpdGggYW5vdGhlciBlbGVtZW50LCB0aGUgdGFyZ2V0IG9mIHRoZSBtb3VzZS9jbGljayB3aWxsIGJlIHRoZSBuZXdcblx0XHRcdC8vIGVsZW1lbnQgdW5kZXJuZWF0aCB0aGF0IHBvaW50LlxuXHRcdFx0Ly9cblx0XHRcdC8vIEFzaWRlIGZyb20gcHJveGltaXR5LCB3ZSBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdGFyZ2V0IGFuZCBhbnlcblx0XHRcdC8vIG9mIGl0cyBhbmNlc3RvcnMgd2VyZSB0aGUgb25lcyB0aGF0IGJsb2NrZWQgYSBjbGljay4gVGhpcyBpcyBuZWNlc3Nhcnlcblx0XHRcdC8vIGJlY2F1c2Ugb2YgdGhlIHN0cmFuZ2UgbW91c2UvY2xpY2sgdGFyZ2V0IGNhbGN1bGF0aW9uIGRvbmUgaW4gdGhlXG5cdFx0XHQvLyBBbmRyb2lkIDIuMSBicm93c2VyLCB3aGVyZSBpZiB5b3UgY2xpY2sgb24gYW4gZWxlbWVudCwgYW5kIHRoZXJlIGlzIGFcblx0XHRcdC8vIG1vdXNlL2NsaWNrIGhhbmRsZXIgb24gb25lIG9mIGl0cyBhbmNlc3RvcnMsIHRoZSB0YXJnZXQgd2lsbCBiZSB0aGVcblx0XHRcdC8vIGlubmVybW9zdCBjaGlsZCBvZiB0aGUgdG91Y2hlZCBlbGVtZW50LCBldmVuIGlmIHRoYXQgY2hpbGQgaXMgbm8gd2hlcmVcblx0XHRcdC8vIG5lYXIgdGhlIHBvaW50IG9mIHRvdWNoLlxuXG5cdFx0XHRlbGUgPSB0YXJnZXQ7XG5cblx0XHRcdHdoaWxlICggZWxlICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNudDsgaSsrICkge1xuXHRcdFx0XHRcdG8gPSBjbGlja0Jsb2NrTGlzdFsgaSBdO1xuXHRcdFx0XHRcdHRvdWNoSUQgPSAwO1xuXG5cdFx0XHRcdFx0aWYgKCAoIGVsZSA9PT0gdGFyZ2V0ICYmIE1hdGguYWJzKCBvLnggLSB4ICkgPCB0aHJlc2hvbGQgJiYgTWF0aC5hYnMoIG8ueSAtIHkgKSA8IHRocmVzaG9sZCApIHx8XG5cdFx0XHRcdFx0XHRcdFx0JC5kYXRhKCBlbGUsIHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lICkgPT09IG8udG91Y2hJRCApIHtcblx0XHRcdFx0XHRcdC8vIFhYWDogV2UgbWF5IHdhbnQgdG8gY29uc2lkZXIgcmVtb3ZpbmcgbWF0Y2hlcyBmcm9tIHRoZSBibG9jayBsaXN0XG5cdFx0XHRcdFx0XHQvLyAgICAgIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIHJlc2V0IHRpbWVyIHRvIGZpcmUuXG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbGUgPSBlbGUucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHRydWUpO1xufVxufSkoIGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCApO1xuXG4oZnVuY3Rpb24oICQgKSB7XG5cdCQubW9iaWxlID0ge307XG59KCBqUXVlcnkgKSk7XG5cblx0KGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7XG5cdFx0dmFyIHN1cHBvcnQgPSB7XG5cdFx0XHR0b3VjaDogXCJvbnRvdWNoZW5kXCIgaW4gZG9jdW1lbnRcblx0XHR9O1xuXG5cdFx0JC5tb2JpbGUuc3VwcG9ydCA9ICQubW9iaWxlLnN1cHBvcnQgfHwge307XG5cdFx0JC5leHRlbmQoICQuc3VwcG9ydCwgc3VwcG9ydCApO1xuXHRcdCQuZXh0ZW5kKCAkLm1vYmlsZS5zdXBwb3J0LCBzdXBwb3J0ICk7XG5cdH0oIGpRdWVyeSApKTtcblxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXHR2YXIgJGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSxcblx0XHRzdXBwb3J0VG91Y2ggPSAkLm1vYmlsZS5zdXBwb3J0LnRvdWNoLFxuXHRcdHNjcm9sbEV2ZW50ID0gXCJ0b3VjaG1vdmUgc2Nyb2xsXCIsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gc3VwcG9ydFRvdWNoID8gXCJ0b3VjaHN0YXJ0XCIgOiBcIm1vdXNlZG93blwiLFxuXHRcdHRvdWNoU3RvcEV2ZW50ID0gc3VwcG9ydFRvdWNoID8gXCJ0b3VjaGVuZFwiIDogXCJtb3VzZXVwXCIsXG5cdFx0dG91Y2hNb3ZlRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInRhcCB0YXBob2xkIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0IFwiICtcblx0XHRcInNjcm9sbHN0YXJ0IHNjcm9sbHN0b3BcIiApLnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHRcdCQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdHJldHVybiBmbiA/IHRoaXMuYmluZCggbmFtZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cblx0XHQvLyBqUXVlcnkgPCAxLjhcblx0XHRpZiAoICQuYXR0ckZuICkge1xuXHRcdFx0JC5hdHRyRm5bIG5hbWUgXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQoIG9iaiwgZXZlbnRUeXBlLCBldmVudCwgYnViYmxlICkge1xuXHRcdHZhciBvcmlnaW5hbFR5cGUgPSBldmVudC50eXBlO1xuXHRcdGV2ZW50LnR5cGUgPSBldmVudFR5cGU7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHQkLmV2ZW50LnRyaWdnZXIoIGV2ZW50LCB1bmRlZmluZWQsIG9iaiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmV2ZW50LmRpc3BhdGNoLmNhbGwoIG9iaiwgZXZlbnQgKTtcblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IG9yaWdpbmFsVHlwZTtcblx0fVxuXG5cdC8vIGFsc28gaGFuZGxlcyBzY3JvbGxzdG9wXG5cdCQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydCA9IHtcblxuXHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgdGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRzY3JvbGxpbmcsXG5cdFx0XHRcdHRpbWVyO1xuXG5cdFx0XHRmdW5jdGlvbiB0cmlnZ2VyKCBldmVudCwgc3RhdGUgKSB7XG5cdFx0XHRcdHNjcm9sbGluZyA9IHN0YXRlO1xuXHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIHNjcm9sbGluZyA/IFwic2Nyb2xsc3RhcnRcIiA6IFwic2Nyb2xsc3RvcFwiLCBldmVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpUGhvbmUgdHJpZ2dlcnMgc2Nyb2xsIGFmdGVyIGEgc21hbGwgZGVsYXk7IHVzZSB0b3VjaG1vdmUgaW5zdGVhZFxuXHRcdFx0JHRoaXMuYmluZCggc2Nyb2xsRXZlbnQsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHRpZiAoICEkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICFzY3JvbGxpbmcgKSB7XG5cdFx0XHRcdFx0dHJpZ2dlciggZXZlbnQsIHRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGltZXIgKTtcblx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0cmlnZ2VyKCBldmVudCwgZmFsc2UgKTtcblx0XHRcdFx0fSwgNTAgKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0JCggdGhpcyApLnVuYmluZCggc2Nyb2xsRXZlbnQgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gYWxzbyBoYW5kbGVzIHRhcGhvbGRcblx0JC5ldmVudC5zcGVjaWFsLnRhcCA9IHtcblx0XHR0YXBob2xkVGhyZXNob2xkOiA3NTAsXG5cdFx0ZW1pdFRhcE9uVGFwaG9sZDogdHJ1ZSxcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRpc1RhcGhvbGQgPSBmYWxzZTtcblxuXHRcdFx0JHRoaXMuYmluZCggXCJ2bW91c2Vkb3duXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aXNUYXBob2xkID0gZmFsc2U7XG5cdFx0XHRcdGlmICggZXZlbnQud2hpY2ggJiYgZXZlbnQud2hpY2ggIT09IDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIG9yaWdUYXJnZXQgPSBldmVudC50YXJnZXQsXG5cdFx0XHRcdFx0dGltZXI7XG5cblx0XHRcdFx0ZnVuY3Rpb24gY2xlYXJUYXBUaW1lcigpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVyICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmdW5jdGlvbiBjbGVhclRhcEhhbmRsZXJzKCkge1xuXHRcdFx0XHRcdGNsZWFyVGFwVGltZXIoKTtcblxuXHRcdFx0XHRcdCR0aGlzLnVuYmluZCggXCJ2Y2xpY2tcIiwgY2xpY2tIYW5kbGVyIClcblx0XHRcdFx0XHRcdC51bmJpbmQoIFwidm1vdXNldXBcIiwgY2xlYXJUYXBUaW1lciApO1xuXHRcdFx0XHRcdCRkb2N1bWVudC51bmJpbmQoIFwidm1vdXNlY2FuY2VsXCIsIGNsZWFyVGFwSGFuZGxlcnMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIGNsaWNrSGFuZGxlciggZXZlbnQgKSB7XG5cdFx0XHRcdFx0Y2xlYXJUYXBIYW5kbGVycygpO1xuXG5cdFx0XHRcdFx0Ly8gT05MWSB0cmlnZ2VyIGEgJ3RhcCcgZXZlbnQgaWYgdGhlIHN0YXJ0IHRhcmdldCBpc1xuXHRcdFx0XHRcdC8vIHRoZSBzYW1lIGFzIHRoZSBzdG9wIHRhcmdldC5cblx0XHRcdFx0XHRpZiAoICFpc1RhcGhvbGQgJiYgb3JpZ1RhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBcInRhcFwiLCBldmVudCApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGlzVGFwaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0JHRoaXMuYmluZCggXCJ2bW91c2V1cFwiLCBjbGVhclRhcFRpbWVyIClcblx0XHRcdFx0XHQuYmluZCggXCJ2Y2xpY2tcIiwgY2xpY2tIYW5kbGVyICk7XG5cdFx0XHRcdCRkb2N1bWVudC5iaW5kKCBcInZtb3VzZWNhbmNlbFwiLCBjbGVhclRhcEhhbmRsZXJzICk7XG5cblx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoICEkLmV2ZW50LnNwZWNpYWwudGFwLmVtaXRUYXBPblRhcGhvbGQgKSB7XG5cdFx0XHRcdFx0XHRpc1RhcGhvbGQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIFwidGFwaG9sZFwiLCAkLkV2ZW50KCBcInRhcGhvbGRcIiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQgfSApICk7XG5cdFx0XHRcdH0sICQuZXZlbnQuc3BlY2lhbC50YXAudGFwaG9sZFRocmVzaG9sZCApO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCB0aGlzICkudW5iaW5kKCBcInZtb3VzZWRvd25cIiApLnVuYmluZCggXCJ2Y2xpY2tcIiApLnVuYmluZCggXCJ2bW91c2V1cFwiICk7XG5cdFx0XHQkZG9jdW1lbnQudW5iaW5kKCBcInZtb3VzZWNhbmNlbFwiICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzY3JvbGxzdG9wOiBcInNjcm9sbHN0YXJ0XCIsXG5cdFx0dGFwaG9sZDogXCJ0YXBcIixcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcblxufSkoIGpRdWVyeSwgdGhpcyApO1xuXG5cbn0pKTtcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWFscGhhLjYpOiB1dGlsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgVXRpbCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIHRyYW5zaXRpb24gPSBmYWxzZTtcblxuICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7XG5cbiAgdmFyIFRyYW5zaXRpb25FbmRFdmVudCA9IHtcbiAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgTW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuICB9O1xuXG4gIC8vIHNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZFR5cGU6IHRyYW5zaXRpb24uZW5kLFxuICAgICAgZGVsZWdhdGVUeXBlOiB0cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kVGVzdCgpIHtcbiAgICBpZiAod2luZG93LlFVbml0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIFRyYW5zaXRpb25FbmRFdmVudCkge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbmQ6IFRyYW5zaXRpb25FbmRFdmVudFtuYW1lXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kVGVzdCgpO1xuXG4gICAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvcjtcblxuICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVXRpbCA9IHtcblxuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcblxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcbiAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAnJztcbiAgICAgICAgc2VsZWN0b3IgPSAvXiNbYS16XS9pLnRlc3Qoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfSxcbiAgICByZWZsb3c6IGZ1bmN0aW9uIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfSxcbiAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKHRyYW5zaXRpb24uZW5kKTtcbiAgICB9LFxuICAgIHN1cHBvcnRzVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odHJhbnNpdGlvbik7XG4gICAgfSxcbiAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoY29uZmlnVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgJzogJyArICgnT3B0aW9uIFwiJyArIHByb3BlcnR5ICsgJ1wiIHByb3ZpZGVkIHR5cGUgXCInICsgdmFsdWVUeXBlICsgJ1wiICcpICsgKCdidXQgZXhwZWN0ZWQgdHlwZSBcIicgKyBleHBlY3RlZFR5cGVzICsgJ1wiLicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTtcblxuICByZXR1cm4gVXRpbDtcbn0oalF1ZXJ5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG4iLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1hbHBoYS42KTogYWxlcnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBBbGVydCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2FsZXJ0JztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYWxwaGEuNic7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5hbGVydCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIENMT1NFOiAnY2xvc2UnICsgRVZFTlRfS0VZLFxuICAgIENMT1NFRDogJ2Nsb3NlZCcgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBBbGVydCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWxlcnQpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgQWxlcnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBBbGVydC5wcm90b3R5cGUuX2dldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHZhciBwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9ICQoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICBwYXJlbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoJy4nICsgQ2xhc3NOYW1lLkFMRVJUKVswXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgQWxlcnQucHJvdG90eXBlLl90cmlnZ2VyQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgICB2YXIgY2xvc2VFdmVudCA9ICQuRXZlbnQoRXZlbnQuQ0xPU0UpO1xuXG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICByZXR1cm4gY2xvc2VFdmVudDtcbiAgICB9O1xuXG4gICAgQWxlcnQucHJvdG90eXBlLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB8fCAhJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJChlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgfTtcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzID0gZnVuY3Rpb24gX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5ESVNNSVNTLCBBbGVydC5faGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSkpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEFsZXJ0O1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQWxlcnQ7XG59KGpRdWVyeSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGVydC5qcy5tYXBcbiIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWFscGhhLjYpOiBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBCdXR0b24gPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdidXR0b24nO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1hbHBoYS42JztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmJ1dHRvbic7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgQlVUVE9OOiAnYnRuJyxcbiAgICBGT0NVUzogJ2ZvY3VzJ1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIElOUFVUOiAnaW5wdXQnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEJVVFRPTjogJy5idG4nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6ICdmb2N1cycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyAnICcgKyAoJ2JsdXInICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZKVxuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbik7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB2YXIgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICAgIHZhciByb290RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cbiAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5QVVQpWzBdO1xuXG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAkKHJvb3RFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSlbMF07XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICEkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgJChpbnB1dCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpO1xuXG4gICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJ1dHRvbi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEJ1dHRvbih0aGlzKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b24sIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnV0dG9uO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBidXR0b24gPSBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJChidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKTtcbiAgICB9XG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYnV0dG9uKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdO1xuICAgICQoYnV0dG9uKS50b2dnbGVDbGFzcyhDbGFzc05hbWUuRk9DVVMsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZXZlbnQudHlwZSkpO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oalF1ZXJ5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1dHRvbi5qcy5tYXBcbiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYWxwaGEuNik6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWFscGhhLjYnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuY2Fyb3VzZWwnO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwO1xuICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG4gIHZhciBBUlJPV19SSUdIVF9LRVlDT0RFID0gMzk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHJpZ2h0IGFycm93IGtleVxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNsaWRlOiBmYWxzZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLFxuICAgIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgd3JhcDogJ2Jvb2xlYW4nXG4gIH07XG5cbiAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICBORVhUOiAnbmV4dCcsXG4gICAgUFJFVjogJ3ByZXYnLFxuICAgIExFRlQ6ICdsZWZ0JyxcbiAgICBSSUdIVDogJ3JpZ2h0J1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBTTElERTogJ3NsaWRlJyArIEVWRU5UX0tFWSxcbiAgICBTTElEOiAnc2xpZCcgKyBFVkVOVF9LRVksXG4gICAgS0VZRE9XTjogJ2tleWRvd24nICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6ICdtb3VzZWVudGVyJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiAnbW91c2VsZWF2ZScgKyBFVkVOVF9LRVksXG4gICAgTE9BRF9EQVRBX0FQSTogJ2xvYWQnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBDQVJPVVNFTDogJ2Nhcm91c2VsJyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIFNMSURFOiAnc2xpZGUnLFxuICAgIFJJR0hUOiAnY2Fyb3VzZWwtaXRlbS1yaWdodCcsXG4gICAgTEVGVDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXG4gICAgTkVYVDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG4gICAgUFJFVjogJ2Nhcm91c2VsLWl0ZW0tcHJldicsXG4gICAgSVRFTTogJ2Nhcm91c2VsLWl0ZW0nXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElORElDQVRPUlM6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2Fyb3VzZWwpO1xuXG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcblxuICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSAkKGVsZW1lbnQpWzBdO1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5ESUNBVE9SUylbMF07XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fyb3VzZWwgaXMgc2xpZGluZycpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYXJvdXNlbCBpcyBzbGlkaW5nJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVklPVVMpO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuTkVYVF9QUkVWKVswXSAmJiBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgIHRoaXMuY3ljbGUodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiBjeWNsZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIHRvKGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXTtcblxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICBpZiAoaW5kZXggPiB0aGlzLl9pdGVtcy5sZW5ndGggLSAxIHx8IGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuU0xJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBEaXJlY3Rpb24uTkVYVCA6IERpcmVjdGlvbi5QUkVWSU9VUztcblxuICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uLCB0aGlzLl9pdGVtc1tpbmRleF0pO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcblxuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBudWxsO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fa2V5ZG93bihldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInICYmICEoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucGF1c2UoZXZlbnQpO1xuICAgICAgICB9KS5vbihFdmVudC5NT1VTRUxFQVZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgQVJST1dfTEVGVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2l0ZW1zID0gJC5tYWtlQXJyYXkoJChlbGVtZW50KS5wYXJlbnQoKS5maW5kKFNlbGVjdG9yLklURU0pKTtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgICB2YXIgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVDtcbiAgICAgIHZhciBpc1ByZXZEaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWSU9VUztcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcbiAgICAgIHZhciBsYXN0SXRlbUluZGV4ID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWSU9VUyA/IC0xIDogMTtcbiAgICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLl9pdGVtcy5sZW5ndGg7XG5cbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNMSURFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lXG4gICAgICB9KTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpO1xuXG4gICAgICByZXR1cm4gc2xpZGVFdmVudDtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50ID0gZnVuY3Rpb24gX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICAgICQodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICB2YXIgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW3RoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KV07XG5cbiAgICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcbiAgICAgICAgICAkKG5leHRJbmRpY2F0b3IpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fc2xpZGUgPSBmdW5jdGlvbiBfc2xpZGUoZGlyZWN0aW9uLCBlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX0lURU0pWzBdO1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG5cbiAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICAgIHZhciBvcmRlckNsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICAgIHZhciBldmVudERpcmVjdGlvbk5hbWUgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG4gICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gc29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudChFdmVudC5TTElELCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuXG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcblxuICAgICAgICBVdGlsLnJlZmxvdyhuZXh0RWxlbWVudCk7XG5cbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJChuZXh0RWxlbWVudCkucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUgKyAnICcgKyBvcmRlckNsYXNzTmFtZSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUgKyAnICcgKyBvcmRlckNsYXNzTmFtZSArICcgJyArIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgICAgIF90aGlzMy5faXNTbGlkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkKF90aGlzMy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAkLmV4dGVuZChfY29uZmlnLCBjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZGF0YVthY3Rpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGFjdGlvbiArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XG4gICAgICAgICAgZGF0YS5wYXVzZSgpO1xuICAgICAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISQodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCAkKHRhcmdldCkuZGF0YSgpLCAkKHRoaXMpLmRhdGEoKSk7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSkudG8oc2xpZGVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDYXJvdXNlbCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYXJvdXNlbDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcik7XG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICAkKFNlbGVjdG9yLkRBVEFfUklERSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKTtcbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufShqUXVlcnkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2Fyb3VzZWwuanMubWFwXG4iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWFscGhhLjYpOiBjb2xsYXBzZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnY29sbGFwc2UnO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1hbHBoYS42JztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMDtcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICB0b2dnbGU6IHRydWUsXG4gICAgcGFyZW50OiAnJ1xuICB9O1xuXG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcbiAgICBwYXJlbnQ6ICdzdHJpbmcnXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIENPTExBUFNFOiAnY29sbGFwc2UnLFxuICAgIENPTExBUFNJTkc6ICdjb2xsYXBzaW5nJyxcbiAgICBDT0xMQVBTRUQ6ICdjb2xsYXBzZWQnXG4gIH07XG5cbiAgdmFyIERpbWVuc2lvbiA9IHtcbiAgICBXSURUSDogJ3dpZHRoJyxcbiAgICBIRUlHSFQ6ICdoZWlnaHQnXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRVM6ICcuY2FyZCA+IC5zaG93LCAuY2FyZCA+IC5jb2xsYXBzaW5nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbGxhcHNlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxhcHNlKTtcblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gJC5tYWtlQXJyYXkoJCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1baHJlZj1cIiMnICsgZWxlbWVudC5pZCArICdcIl0sJyArICgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdJykpKTtcblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29sbGFwc2UgaXMgdHJhbnNpdGlvbmluZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlcyA9IHZvaWQgMDtcbiAgICAgIHZhciBhY3RpdmVzRGF0YSA9IHZvaWQgMDtcblxuICAgICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgICBhY3RpdmVzID0gJC5tYWtlQXJyYXkoJCh0aGlzLl9wYXJlbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFUykpO1xuICAgICAgICBpZiAoIWFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgYWN0aXZlc0RhdGEgPSAkKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVyk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGFjdGl2ZXMpLCAnaGlkZScpO1xuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDA7XG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgICB2YXIgc2Nyb2xsU2l6ZSA9ICdzY3JvbGwnICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArICdweCc7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29sbGFwc2UgaXMgdHJhbnNpdGlvbmluZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG4gICAgICB2YXIgb2Zmc2V0RGltZW5zaW9uID0gZGltZW5zaW9uID09PSBEaW1lbnNpb24uV0lEVEggPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbb2Zmc2V0RGltZW5zaW9uXSArICdweCc7XG5cbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcy5fdHJpZ2dlckFycmF5KS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG4gICAgICAgICQoX3RoaXMyLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuc2V0VHJhbnNpdGlvbmluZyA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gY29lcmNlIHN0cmluZyB2YWx1ZXNcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgdmFyIGhhc1dpZHRoID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpO1xuICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJlbnQgPSAkKHRoaXMuX2NvbmZpZy5wYXJlbnQpWzBdO1xuICAgICAgdmFyIHNlbGVjdG9yID0gJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyAnXCJdJztcblxuICAgICAgJChwYXJlbnQpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLCBbZWxlbWVudF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuXG4gICAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgJCh0cmlnZ2VyQXJyYXkpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/ICQoc2VsZWN0b3IpWzBdIDogbnVsbDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIF9jb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgJHRoaXMuZGF0YSgpLCAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0JyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sbGFwc2U7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgdGFyZ2V0ID0gQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KHRoaXMpO1xuICAgIHZhciBkYXRhID0gJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpO1xuICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkKHRoaXMpLmRhdGEoKTtcblxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZyk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQ29sbGFwc2U7XG59KGpRdWVyeSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsYXBzZS5qcy5tYXBcbiIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWFscGhhLjYpOiBkcm9wZG93bi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnZHJvcGRvd24nO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1hbHBoYS42JztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcbiAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuICB2YXIgUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIID0gMzsgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBDTElDSzogJ2NsaWNrJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBGT0NVU0lOX0RBVEFfQVBJOiAnZm9jdXNpbicgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgS0VZRE9XTl9EQVRBX0FQSTogJ2tleWRvd24nICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBCQUNLRFJPUDogJ2Ryb3Bkb3duLWJhY2tkcm9wJyxcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgQkFDS0RST1A6ICcuZHJvcGRvd24tYmFja2Ryb3AnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLFxuICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgUk9MRV9NRU5VOiAnW3JvbGU9XCJtZW51XCJdJyxcbiAgICBST0xFX0xJU1RCT1g6ICdbcm9sZT1cImxpc3Rib3hcIl0nLFxuICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG4gICAgVklTSUJMRV9JVEVNUzogJ1tyb2xlPVwibWVudVwiXSBsaTpub3QoLmRpc2FibGVkKSBhLCAnICsgJ1tyb2xlPVwibGlzdGJveFwiXSBsaTpub3QoLmRpc2FibGVkKSBhJ1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bik7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBEcm9wZG93bi5fY2xlYXJNZW51cygpO1xuXG4gICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkKHBhcmVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZCQVJfTkFWKS5sZW5ndGgpIHtcblxuICAgICAgICAvLyBpZiBtb2JpbGUgd2UgdXNlIGEgYmFja2Ryb3AgYmVjYXVzZSBjbGljayBldmVudHMgZG9uJ3QgZGVsZWdhdGVcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRyb3Bkb3duLmNsYXNzTmFtZSA9IENsYXNzTmFtZS5CQUNLRFJPUDtcbiAgICAgICAgJChkcm9wZG93bikuaW5zZXJ0QmVmb3JlKHRoaXMpO1xuICAgICAgICAkKGRyb3Bkb3duKS5vbignY2xpY2snLCBEcm9wZG93bi5fY2xlYXJNZW51cyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzXG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoJC5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLLCB0aGlzLnRvZ2dsZSk7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LndoaWNoID09PSBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmFja2Ryb3AgPSAkKFNlbGVjdG9yLkJBQ0tEUk9QKVswXTtcbiAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICBiYWNrZHJvcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGJhY2tkcm9wKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvZ2dsZXMgPSAkLm1ha2VBcnJheSgkKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9nZ2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRvZ2dsZXNbaV0pO1xuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCEkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nKSAmJiAkLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50ID0gdm9pZCAwO1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gJChzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChldmVudC53aGljaCkgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSB8fCBpc0FjdGl2ZSAmJiBldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcblxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgdmFyIHRvZ2dsZSA9ICQocGFyZW50KS5maW5kKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVswXTtcbiAgICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSAkKHBhcmVudCkuZmluZChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKS5nZXQoKTtcblxuICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgLy8gdXBcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIGRvd25cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1zW2luZGV4XS5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRHJvcGRvd247XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuUk9MRV9NRU5VLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5ST0xFX0xJU1RCT1gsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJICsgJyAnICsgRXZlbnQuRk9DVVNJTl9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0oalF1ZXJ5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3Bkb3duLmpzLm1hcFxuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1hbHBoYS42KTogbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBNb2RhbCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ21vZGFsJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYWxwaGEuNic7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG4gIHZhciBCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfTtcblxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIGZvY3VzOiAnYm9vbGVhbicsXG4gICAgc2hvdzogJ2Jvb2xlYW4nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiAnZm9jdXNpbicgKyBFVkVOVF9LRVksXG4gICAgUkVTSVpFOiAncmVzaXplJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19ESVNNSVNTOiAnY2xpY2suZGlzbWlzcycgKyBFVkVOVF9LRVksXG4gICAgS0VZRE9XTl9ESVNNSVNTOiAna2V5ZG93bi5kaXNtaXNzJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRVVQX0RJU01JU1M6ICdtb3VzZXVwLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRE9XTl9ESVNNSVNTOiAnbW91c2Vkb3duLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCdcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kaWFsb2cgPSAkKGVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRElBTE9HKVswXTtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmcgPSAwO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGFsIGlzIHRyYW5zaXRpb25pbmcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCBzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcigpO1xuXG4gICAgICAkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhpZGUoZXZlbnQpO1xuICAgICAgfSk7XG5cbiAgICAgICQodGhpcy5fZGlhbG9nKS5vbihFdmVudC5NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuTU9VU0VVUF9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKF90aGlzLl9lbGVtZW50KSkge1xuICAgICAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGFsIGlzIHRyYW5zaXRpb25pbmcnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zaXRpb24gPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpO1xuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9mZihFdmVudC5NT1VTRURPV05fRElTTUlTUyk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cbiAgICAgICQod2luZG93LCBkb2N1bWVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fYmFja2Ryb3ApLm9mZihFVkVOVF9LRVkpO1xuXG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zaG93RWxlbWVudCA9IGZ1bmN0aW9uIF9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHRyYW5zaXRpb24gPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICB0aGlzLl9lbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAkKF90aGlzMy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICQodGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb25Db21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2VuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uIF9lbmZvcmNlRm9jdXMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKEV2ZW50LkZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiBfdGhpczQuX2VsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiAhJChfdGhpczQuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIF90aGlzNC5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAkKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM2Ll9oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQod2luZG93KS5vZmYoRXZlbnQuUkVTSVpFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9oaWRlTW9kYWwgPSBmdW5jdGlvbiBfaGlkZU1vZGFsKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuICAgICAgICBfdGhpczcuX3Jlc2V0QWRqdXN0bWVudHMoKTtcbiAgICAgICAgX3RoaXM3Ll9yZXNldFNjcm9sbGJhcigpO1xuICAgICAgICAkKF90aGlzNy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5ISURERU4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fcmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIGFuaW1hdGUgPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSA/IENsYXNzTmFtZS5GQURFIDogJyc7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkge1xuICAgICAgICB2YXIgZG9BbmltYXRlID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiBhbmltYXRlO1xuXG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZSA9IENsYXNzTmFtZS5CQUNLRFJPUDtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKGFuaW1hdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG5cbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXM4Ll9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBfdGhpczguX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM4LmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChkb0FuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9BbmltYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXM4Ll9yZW1vdmVCYWNrZHJvcCgpO1xuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gICAgLy8gdG9kbyAoZmF0KTogdGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IG9mIG1vZGFsLmpzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgTW9kYWwucHJvdG90eXBlLl9oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiBfaGFuZGxlVXBkYXRlKCkge1xuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICdweCc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAncHgnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX3Jlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIGJvZHlQYWRkaW5nID0gcGFyc2VJbnQoJChTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG5cbiAgICAgIHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJztcblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYm9keVBhZGRpbmcgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICdweCc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmc7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fZ2V0U2Nyb2xsYmFyV2lkdGggPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgICAvLyB0aHggZC53YWxzaFxuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9IENsYXNzTmFtZS5TQ1JPTExCQVJfTUVBU1VSRVI7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5EZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSwgKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWcpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgTW9kYWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICBrZXk6ICdWRVJTSU9OJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0JyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSkgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHt9LCAkKHRhcmdldCkuZGF0YSgpLCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICBpZiAodGhpcy50YWdOYW1lID09PSAnQScgfHwgdGhpcy50YWdOYW1lID09PSAnQVJFQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHRhcmdldCkub25lKEV2ZW50LlNIT1csIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJChfdGhpczkpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgX3RoaXM5LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnLCB0aGlzKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oalF1ZXJ5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGFsLmpzLm1hcFxuIiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIi8vIFN0aWNreSBQbHVnaW4gdjEuMC40IGZvciBqUXVlcnlcbi8vID09PT09PT09PT09PT1cbi8vIEF1dGhvcjogQW50aG9ueSBHYXJhbmRcbi8vIEltcHJvdmVtZW50cyBieSBHZXJtYW4gTS4gQnJhdm8gKEtyb251eikgYW5kIFJ1dWQgS2FtcGh1aXMgKHJ1dWRrKVxuLy8gSW1wcm92ZW1lbnRzIGJ5IExlb25hcmRvIEMuIERhcm9uY28gKGRhcm9uY28pXG4vLyBDcmVhdGVkOiAwMi8xNC8yMDExXG4vLyBEYXRlOiAwNy8yMC8yMDE1XG4vLyBXZWJzaXRlOiBodHRwOi8vc3RpY2t5anMuY29tL1xuLy8gRGVzY3JpcHRpb246IE1ha2VzIGFuIGVsZW1lbnQgb24gdGhlIHBhZ2Ugc3RpY2sgb24gdGhlIHNjcmVlbiBhcyB5b3Ugc2Nyb2xsXG4vLyAgICAgICAgICAgICAgSXQgd2lsbCBvbmx5IHNldCB0aGUgJ3RvcCcgYW5kICdwb3NpdGlvbicgb2YgeW91ciBlbGVtZW50LCB5b3Vcbi8vICAgICAgICAgICAgICBtaWdodCBuZWVkIHRvIGFkanVzdCB0aGUgd2lkdGggaW4gc29tZSBjYXNlcy5cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0oZnVuY3Rpb24gKCQpIHtcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7IC8vIHNhdmUgcmVmIHRvIG9yaWdpbmFsIHNsaWNlKClcbiAgICB2YXIgc3BsaWNlID0gQXJyYXkucHJvdG90eXBlLnNwbGljZTsgLy8gc2F2ZSByZWYgdG8gb3JpZ2luYWwgc2xpY2UoKVxuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIHRvcFNwYWNpbmc6IDAsXG4gICAgICBib3R0b21TcGFjaW5nOiAwLFxuICAgICAgY2xhc3NOYW1lOiAnaXMtc3RpY2t5JyxcbiAgICAgIHdyYXBwZXJDbGFzc05hbWU6ICdzdGlja3ktd3JhcHBlcicsXG4gICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgZ2V0V2lkdGhGcm9tOiAnJyxcbiAgICAgIHdpZHRoRnJvbVdyYXBwZXI6IHRydWUsIC8vIHdvcmtzIG9ubHkgd2hlbiAuZ2V0V2lkdGhGcm9tIGlzIGVtcHR5XG4gICAgICByZXNwb25zaXZlV2lkdGg6IGZhbHNlLFxuICAgICAgekluZGV4OiAnYXV0bydcbiAgICB9LFxuICAgICR3aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgJGRvY3VtZW50ID0gJChkb2N1bWVudCksXG4gICAgc3RpY2tlZCA9IFtdLFxuICAgIHdpbmRvd0hlaWdodCA9ICR3aW5kb3cuaGVpZ2h0KCksXG4gICAgc2Nyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSAkd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgICBkb2N1bWVudEhlaWdodCA9ICRkb2N1bWVudC5oZWlnaHQoKSxcbiAgICAgICAgZHdoID0gZG9jdW1lbnRIZWlnaHQgLSB3aW5kb3dIZWlnaHQsXG4gICAgICAgIGV4dHJhID0gKHNjcm9sbFRvcCA+IGR3aCkgPyBkd2ggLSBzY3JvbGxUb3AgOiAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0aWNrZWQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBzID0gc3RpY2tlZFtpXSxcbiAgICAgICAgICBlbGVtZW50VG9wID0gcy5zdGlja3lXcmFwcGVyLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICBldHNlID0gZWxlbWVudFRvcCAtIHMudG9wU3BhY2luZyAtIGV4dHJhO1xuXG4gICAgICAgIC8vdXBkYXRlIGhlaWdodCBpbiBjYXNlIG9mIGR5bmFtaWMgY29udGVudFxuICAgICAgICBzLnN0aWNreVdyYXBwZXIuY3NzKCdoZWlnaHQnLCBzLnN0aWNreUVsZW1lbnQub3V0ZXJIZWlnaHQoKSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbFRvcCA8PSBldHNlKSB7XG4gICAgICAgICAgaWYgKHMuY3VycmVudFRvcCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcy5zdGlja3lFbGVtZW50XG4gICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICd3aWR0aCc6ICcnLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICcnLFxuICAgICAgICAgICAgICAgICd0b3AnOiAnJyxcbiAgICAgICAgICAgICAgICAnei1pbmRleCc6ICcnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcy5zdGlja3lFbGVtZW50LnBhcmVudCgpLnJlbW92ZUNsYXNzKHMuY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHMuc3RpY2t5RWxlbWVudC50cmlnZ2VyKCdzdGlja3ktZW5kJywgW3NdKTtcbiAgICAgICAgICAgIHMuY3VycmVudFRvcCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdUb3AgPSBkb2N1bWVudEhlaWdodCAtIHMuc3RpY2t5RWxlbWVudC5vdXRlckhlaWdodCgpXG4gICAgICAgICAgICAtIHMudG9wU3BhY2luZyAtIHMuYm90dG9tU3BhY2luZyAtIHNjcm9sbFRvcCAtIGV4dHJhO1xuICAgICAgICAgIGlmIChuZXdUb3AgPCAwKSB7XG4gICAgICAgICAgICBuZXdUb3AgPSBuZXdUb3AgKyBzLnRvcFNwYWNpbmc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RvcCA9IHMudG9wU3BhY2luZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMuY3VycmVudFRvcCAhPT0gbmV3VG9wKSB7XG4gICAgICAgICAgICB2YXIgbmV3V2lkdGg7XG4gICAgICAgICAgICBpZiAocy5nZXRXaWR0aEZyb20pIHtcbiAgICAgICAgICAgICAgICBuZXdXaWR0aCA9ICQocy5nZXRXaWR0aEZyb20pLndpZHRoKCkgfHwgbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocy53aWR0aEZyb21XcmFwcGVyKSB7XG4gICAgICAgICAgICAgICAgbmV3V2lkdGggPSBzLnN0aWNreVdyYXBwZXIud2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdXaWR0aCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3V2lkdGggPSBzLnN0aWNreUVsZW1lbnQud2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMuc3RpY2t5RWxlbWVudFxuICAgICAgICAgICAgICAuY3NzKCd3aWR0aCcsIG5ld1dpZHRoKVxuICAgICAgICAgICAgICAuY3NzKCdwb3NpdGlvbicsICdmaXhlZCcpXG4gICAgICAgICAgICAgIC5jc3MoJ3RvcCcsIG5ld1RvcClcbiAgICAgICAgICAgICAgLmNzcygnei1pbmRleCcsIHMuekluZGV4KTtcblxuICAgICAgICAgICAgcy5zdGlja3lFbGVtZW50LnBhcmVudCgpLmFkZENsYXNzKHMuY2xhc3NOYW1lKTtcblxuICAgICAgICAgICAgaWYgKHMuY3VycmVudFRvcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBzLnN0aWNreUVsZW1lbnQudHJpZ2dlcignc3RpY2t5LXN0YXJ0JywgW3NdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIHN0aWNreSBpcyBzdGFydGVkIGJ1dCBpdCBoYXZlIHRvIGJlIHJlcG9zaXRpb25lZFxuICAgICAgICAgICAgICBzLnN0aWNreUVsZW1lbnQudHJpZ2dlcignc3RpY2t5LXVwZGF0ZScsIFtzXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzLmN1cnJlbnRUb3AgPT09IHMudG9wU3BhY2luZyAmJiBzLmN1cnJlbnRUb3AgPiBuZXdUb3AgfHwgcy5jdXJyZW50VG9wID09PSBudWxsICYmIG5ld1RvcCA8IHMudG9wU3BhY2luZykge1xuICAgICAgICAgICAgICAvLyBqdXN0IHJlYWNoZWQgYm90dG9tIHx8IGp1c3Qgc3RhcnRlZCB0byBzdGljayBidXQgYm90dG9tIGlzIGFscmVhZHkgcmVhY2hlZFxuICAgICAgICAgICAgICBzLnN0aWNreUVsZW1lbnQudHJpZ2dlcignc3RpY2t5LWJvdHRvbS1yZWFjaGVkJywgW3NdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihzLmN1cnJlbnRUb3AgIT09IG51bGwgJiYgbmV3VG9wID09PSBzLnRvcFNwYWNpbmcgJiYgcy5jdXJyZW50VG9wIDwgbmV3VG9wKSB7XG4gICAgICAgICAgICAgIC8vIHN0aWNreSBpcyBzdGFydGVkICYmIHN0aWNrZWQgYXQgdG9wU3BhY2luZyAmJiBvdmVyZmxvd2luZyBmcm9tIHRvcCBqdXN0IGZpbmlzaGVkXG4gICAgICAgICAgICAgIHMuc3RpY2t5RWxlbWVudC50cmlnZ2VyKCdzdGlja3ktYm90dG9tLXVucmVhY2hlZCcsIFtzXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHMuY3VycmVudFRvcCA9IG5ld1RvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBzdGlja3kgaGFzIHJlYWNoZWQgZW5kIG9mIGNvbnRhaW5lciBhbmQgc3RvcCBzdGlja2luZ1xuICAgICAgICAgIHZhciBzdGlja3lXcmFwcGVyQ29udGFpbmVyID0gcy5zdGlja3lXcmFwcGVyLnBhcmVudCgpO1xuICAgICAgICAgIHZhciB1bnN0aWNrID0gKHMuc3RpY2t5RWxlbWVudC5vZmZzZXQoKS50b3AgKyBzLnN0aWNreUVsZW1lbnQub3V0ZXJIZWlnaHQoKSA+PSBzdGlja3lXcmFwcGVyQ29udGFpbmVyLm9mZnNldCgpLnRvcCArIHN0aWNreVdyYXBwZXJDb250YWluZXIub3V0ZXJIZWlnaHQoKSkgJiYgKHMuc3RpY2t5RWxlbWVudC5vZmZzZXQoKS50b3AgPD0gcy50b3BTcGFjaW5nKTtcblxuICAgICAgICAgIGlmKCB1bnN0aWNrICkge1xuICAgICAgICAgICAgcy5zdGlja3lFbGVtZW50XG4gICAgICAgICAgICAgIC5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcbiAgICAgICAgICAgICAgLmNzcygndG9wJywgJycpXG4gICAgICAgICAgICAgIC5jc3MoJ2JvdHRvbScsIDApXG4gICAgICAgICAgICAgIC5jc3MoJ3otaW5kZXgnLCAnJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMuc3RpY2t5RWxlbWVudFxuICAgICAgICAgICAgICAuY3NzKCdwb3NpdGlvbicsICdmaXhlZCcpXG4gICAgICAgICAgICAgIC5jc3MoJ3RvcCcsIG5ld1RvcClcbiAgICAgICAgICAgICAgLmNzcygnYm90dG9tJywgJycpXG4gICAgICAgICAgICAgIC5jc3MoJ3otaW5kZXgnLCBzLnpJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemVyID0gZnVuY3Rpb24oKSB7XG4gICAgICB3aW5kb3dIZWlnaHQgPSAkd2luZG93LmhlaWdodCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0aWNrZWQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBzID0gc3RpY2tlZFtpXTtcbiAgICAgICAgdmFyIG5ld1dpZHRoID0gbnVsbDtcbiAgICAgICAgaWYgKHMuZ2V0V2lkdGhGcm9tKSB7XG4gICAgICAgICAgICBpZiAocy5yZXNwb25zaXZlV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBuZXdXaWR0aCA9ICQocy5nZXRXaWR0aEZyb20pLndpZHRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZihzLndpZHRoRnJvbVdyYXBwZXIpIHtcbiAgICAgICAgICAgIG5ld1dpZHRoID0gcy5zdGlja3lXcmFwcGVyLndpZHRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1dpZHRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHMuc3RpY2t5RWxlbWVudC5jc3MoJ3dpZHRoJywgbmV3V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzID0ge1xuICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgbyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHN0aWNreUVsZW1lbnQgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgdmFyIHN0aWNreUlkID0gc3RpY2t5RWxlbWVudC5hdHRyKCdpZCcpO1xuICAgICAgICAgIHZhciB3cmFwcGVySWQgPSBzdGlja3lJZCA/IHN0aWNreUlkICsgJy0nICsgZGVmYXVsdHMud3JhcHBlckNsYXNzTmFtZSA6IGRlZmF1bHRzLndyYXBwZXJDbGFzc05hbWU7XG4gICAgICAgICAgdmFyIHdyYXBwZXIgPSAkKCc8ZGl2PjwvZGl2PicpXG4gICAgICAgICAgICAuYXR0cignaWQnLCB3cmFwcGVySWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3Moby53cmFwcGVyQ2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0aWNreUVsZW1lbnQud3JhcEFsbCh3cmFwcGVyKTtcblxuICAgICAgICAgIHZhciBzdGlja3lXcmFwcGVyID0gc3RpY2t5RWxlbWVudC5wYXJlbnQoKTtcblxuICAgICAgICAgIGlmIChvLmNlbnRlcikge1xuICAgICAgICAgICAgc3RpY2t5V3JhcHBlci5jc3Moe3dpZHRoOnN0aWNreUVsZW1lbnQub3V0ZXJXaWR0aCgpLG1hcmdpbkxlZnQ6XCJhdXRvXCIsbWFyZ2luUmlnaHQ6XCJhdXRvXCJ9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RpY2t5RWxlbWVudC5jc3MoXCJmbG9hdFwiKSA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgICBzdGlja3lFbGVtZW50LmNzcyh7XCJmbG9hdFwiOlwibm9uZVwifSkucGFyZW50KCkuY3NzKHtcImZsb2F0XCI6XCJyaWdodFwifSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgby5zdGlja3lFbGVtZW50ID0gc3RpY2t5RWxlbWVudDtcbiAgICAgICAgICBvLnN0aWNreVdyYXBwZXIgPSBzdGlja3lXcmFwcGVyO1xuICAgICAgICAgIG8uY3VycmVudFRvcCAgICA9IG51bGw7XG5cbiAgICAgICAgICBzdGlja2VkLnB1c2gobyk7XG5cbiAgICAgICAgICBtZXRob2RzLnNldFdyYXBwZXJIZWlnaHQodGhpcyk7XG4gICAgICAgICAgbWV0aG9kcy5zZXR1cENoYW5nZUxpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBzZXRXcmFwcGVySGVpZ2h0OiBmdW5jdGlvbihzdGlja3lFbGVtZW50KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gJChzdGlja3lFbGVtZW50KTtcbiAgICAgICAgdmFyIHN0aWNreVdyYXBwZXIgPSBlbGVtZW50LnBhcmVudCgpO1xuICAgICAgICBpZiAoc3RpY2t5V3JhcHBlcikge1xuICAgICAgICAgIHN0aWNreVdyYXBwZXIuY3NzKCdoZWlnaHQnLCBlbGVtZW50Lm91dGVySGVpZ2h0KCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzZXR1cENoYW5nZUxpc3RlbmVyczogZnVuY3Rpb24oc3RpY2t5RWxlbWVudCkge1xuICAgICAgICBpZiAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICB2YXIgbXV0YXRpb25PYnNlcnZlciA9IG5ldyB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbnNbMF0uYWRkZWROb2Rlcy5sZW5ndGggfHwgbXV0YXRpb25zWzBdLnJlbW92ZWROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWV0aG9kcy5zZXRXcmFwcGVySGVpZ2h0KHN0aWNreUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShzdGlja3lFbGVtZW50LCB7c3VidHJlZTogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RpY2t5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlSW5zZXJ0ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1ldGhvZHMuc2V0V3JhcHBlckhlaWdodChzdGlja3lFbGVtZW50KTtcbiAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgc3RpY2t5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlUmVtb3ZlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbWV0aG9kcy5zZXRXcmFwcGVySGVpZ2h0KHN0aWNreUVsZW1lbnQpO1xuICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogc2Nyb2xsZXIsXG4gICAgICB1bnN0aWNrOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgIHZhciB1bnN0aWNreUVsZW1lbnQgPSAkKHRoYXQpO1xuXG4gICAgICAgICAgdmFyIHJlbW92ZUlkeCA9IC0xO1xuICAgICAgICAgIHZhciBpID0gc3RpY2tlZC5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICAgIGlmIChzdGlja2VkW2ldLnN0aWNreUVsZW1lbnQuZ2V0KDApID09PSB0aGF0KSB7XG4gICAgICAgICAgICAgICAgc3BsaWNlLmNhbGwoc3RpY2tlZCxpLDEpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUlkeCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlbW92ZUlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHVuc3RpY2t5RWxlbWVudC51bndyYXAoKTtcbiAgICAgICAgICAgIHVuc3RpY2t5RWxlbWVudFxuICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnJyxcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnJyxcbiAgICAgICAgICAgICAgICAndG9wJzogJycsXG4gICAgICAgICAgICAgICAgJ2Zsb2F0JzogJycsXG4gICAgICAgICAgICAgICAgJ3otaW5kZXgnOiAnJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAvLyBzaG91bGQgYmUgbW9yZSBlZmZpY2llbnQgdGhhbiB1c2luZyAkd2luZG93LnNjcm9sbChzY3JvbGxlcikgYW5kICR3aW5kb3cucmVzaXplKHJlc2l6ZXIpOlxuICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsZXIsIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplciwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKHdpbmRvdy5hdHRhY2hFdmVudCkge1xuICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25zY3JvbGwnLCBzY3JvbGxlcik7XG4gICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbnJlc2l6ZScsIHJlc2l6ZXIpO1xuICB9XG5cbiAgJC5mbi5zdGlja3kgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBpZiAobWV0aG9kc1ttZXRob2RdKSB7XG4gICAgICByZXR1cm4gbWV0aG9kc1ttZXRob2RdLmFwcGx5KHRoaXMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyB8fCAhbWV0aG9kICkge1xuICAgICAgcmV0dXJuIG1ldGhvZHMuaW5pdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQuZXJyb3IoJ01ldGhvZCAnICsgbWV0aG9kICsgJyBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuc3RpY2t5Jyk7XG4gICAgfVxuICB9O1xuXG4gICQuZm4udW5zdGljayA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHtcbiAgICAgIHJldHVybiBtZXRob2RzW21ldGhvZF0uYXBwbHkodGhpcywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QgKSB7XG4gICAgICByZXR1cm4gbWV0aG9kcy51bnN0aWNrLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJC5lcnJvcignTWV0aG9kICcgKyBtZXRob2QgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zdGlja3knKTtcbiAgICB9XG4gIH07XG4gICQoZnVuY3Rpb24oKSB7XG4gICAgc2V0VGltZW91dChzY3JvbGxlciwgMCk7XG4gIH0pO1xufSkpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeShnbG9iYWwualF1ZXJ5KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoJCkgeyAndXNlIHN0cmljdCc7XG5cbiQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XG5cbi8qKlxuICogQGF1dGhvciAgTXVkaXQgQW1ldGFcbiAqIEBsaWNlbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS96ZXVzZGV1eC9pc0luVmlld3BvcnQvYmxvYi9tYXN0ZXIvbGljZW5zZS5tZCBNSVRcbiAqL1xuXG4vLyBleHBvc2UgaXNJblZpZXdwb3J0IGFzIGEgY3VzdG9tIHBzZXVkby1zZWxlY3RvclxuJC5leHRlbmQoJC5leHByLnBzZXVkb3MgfHwgJC5leHByWyc6J10sIHtcbiAgLy8gaWYgJC5leHByLmNyZWF0ZVBzZXVkbyBpcyBhdmFpbGFibGUsIHVzZSBpdFxuICAnaW4tdmlld3BvcnQnOiAkLmV4cHIuY3JlYXRlUHNldWRvXG4gICAgPyAkLmV4cHIuY3JlYXRlUHNldWRvKGZ1bmN0aW9uIChhcmdzU3RyaW5nKSB7IHJldHVybiBmdW5jdGlvbiAoY3VyckVsZW1lbnQpIHsgcmV0dXJuIGlzSW5WaWV3cG9ydChjdXJyRWxlbWVudCwgZ2V0U2VsZWN0b3JBcmdzKGFyZ3NTdHJpbmcpKTsgfTsgfSlcbiAgOiBmdW5jdGlvbiAoY3Vyck9iaiwgaW5kZXgsIG1ldGEpIHsgcmV0dXJuIGlzSW5WaWV3cG9ydChjdXJyT2JqLCBnZXRTZWxlY3RvckFyZ3MobWV0YVszXSkpOyB9XG59KTtcblxuXG4vLyBleHBvc2UgaXNJblZpZXdwb3J0IGFzIGEgZnVuY3Rpb24gdG9vXG4vLyB0aGlzIGxldHMgZm9sa3MgcGFzcyBhcm91bmQgYWN0dWFsIG9iamVjdHMgYXMgb3B0aW9ucyAobGlrZSBjdXN0b20gdmlld3BvcnQpXG4vLyBhbmQgZG9lc24ndCB0aWUgJ2VtIGRvd24gdG8gc3RyaW5ncy4gSXQgYWxzbyBwcmV2ZW50cyBpc0luVmlld3BvcnQgZnJvbVxuLy8gaGF2aW5nIHRvIGxvb2sgdXAgYW5kIHdyYXAgdGhlIGRvbSBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZpZXdwb3J0IHNlbGVjdG9yXG4kLmZuLmlzSW5WaWV3cG9ydCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChpLCBlbCkgeyByZXR1cm4gaXNJblZpZXdwb3J0KGVsLCBvcHRpb25zKTsgfSlcbn07XG5cbiQuZm4ucnVuID0gcnVuO1xuXG4vLyBsZXRzIHlvdSBjaGFpbiBhbnkgYXJiaXRyYXJ5IGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucyBhbmQgcmV0dXJucyBhIGpxdWVyeSBvYmplY3RcbmZ1bmN0aW9uIHJ1bihhcmdzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXJncyA9IFthcmdzXTtcbiAgfVxuXG4gIGlmICghKGFyZ3MgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2lzSW5WaWV3cG9ydDogQXJndW1lbnQocykgcGFzc2VkIHRvIC5kby8ucnVuIHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucycpXG4gIH1cblxuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2lzSW5WaWV3cG9ydDogQXJndW1lbnQocykgcGFzc2VkIHRvIC5kby8ucnVuIHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucycpO1xuICAgICAgY29uc29sZS53YXJuKCdpc0luVmlld3BvcnQ6IElnbm9yaW5nIG5vbi1mdW5jdGlvbiB2YWx1ZXMgaW4gYXJyYXkgYW5kIG1vdmluZyBvbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBbXS5zbGljZS5jYWxsKHRoaXMkMSkuZm9yRWFjaChmdW5jdGlvbiAodCkgeyByZXR1cm4gYXJnLmNhbGwoJCh0KSk7IH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuXG4vLyBnZXRzIHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsYmFyXG5mdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCh2aWV3cG9ydCkge1xuICAvLyBhcHBlbmQgYSBkaXYgdGhhdCBoYXMgMTAwJSB3aWR0aCB0byBnZXQgdHJ1ZSB3aWR0aCBvZiB2aWV3cG9ydFxuICB2YXIgZWwgPSAkKCc8ZGl2PjwvZGl2PicpLmNzcyh7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9KTtcbiAgdmlld3BvcnQuYXBwZW5kKGVsKTtcblxuICAvLyBzdWJ0cmFjdCB0cnVlIHdpZHRoIGZyb20gdGhlIHZpZXdwb3J0IHdpZHRoIHdoaWNoIGlzIGluY2x1c2l2ZVxuICAvLyBvZiBzY3JvbGxiYXIgYnkgZGVmYXVsdFxuICB2YXIgc2Nyb2xsQmFyV2lkdGggPSB2aWV3cG9ydC53aWR0aCgpIC0gZWwud2lkdGgoKTtcblxuICAvLyByZW1vdmUgb3VyIGVsZW1lbnQgZnJvbSBET01cbiAgZWwucmVtb3ZlKCk7XG4gIHJldHVybiBzY3JvbGxCYXJXaWR0aFxufVxuXG5cbi8vIFJldHVybnMgdHJ1ZSBpZiBET00gZWxlbWVudCBgZWxlbWVudGAgaXMgaW4gdmlld3BvcnRcbmZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbGVtZW50LCBvcHRpb25zKSB7XG4gIHZhciByZWYgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgdmFyIGJvdHRvbSA9IHJlZi5ib3R0b207XG4gIHZhciBsZWZ0ID0gcmVmLmxlZnQ7XG4gIHZhciByaWdodCA9IHJlZi5yaWdodDtcblxuICB2YXIgc2V0dGluZ3MgPSAkLmV4dGVuZCh7XG4gICAgdG9sZXJhbmNlOiAwLFxuICAgIHZpZXdwb3J0OiB3aW5kb3dcbiAgfSwgb3B0aW9ucyk7XG4gIHZhciBpc1Zpc2libGVGbGFnID0gZmFsc2U7XG4gIHZhciAkdmlld3BvcnQgPSBzZXR0aW5ncy52aWV3cG9ydC5qcXVlcnkgPyBzZXR0aW5ncy52aWV3cG9ydCA6ICQoc2V0dGluZ3Mudmlld3BvcnQpO1xuXG4gIGlmICghJHZpZXdwb3J0Lmxlbmd0aCkge1xuICAgIGNvbnNvbGUud2FybignaXNJblZpZXdwb3J0OiBUaGUgdmlld3BvcnQgc2VsZWN0b3IgeW91IGhhdmUgcHJvdmlkZWQgbWF0Y2hlcyBubyBlbGVtZW50IG9uIHBhZ2UuJyk7XG4gICAgY29uc29sZS53YXJuKCdpc0luVmlld3BvcnQ6IERlZmF1bHRpbmcgdG8gdmlld3BvcnQgYXMgd2luZG93Jyk7XG4gICAgJHZpZXdwb3J0ID0gJCh3aW5kb3cpO1xuICB9XG5cbiAgdmFyICR2aWV3cG9ydEhlaWdodCA9ICR2aWV3cG9ydC5oZWlnaHQoKTtcbiAgdmFyICR2aWV3cG9ydFdpZHRoID0gJHZpZXdwb3J0LndpZHRoKCk7XG4gIHZhciB0eXBlb2ZWaWV3cG9ydCA9ICR2aWV3cG9ydFswXS50b1N0cmluZygpO1xuXG4gIC8vIGlmIHRoZSB2aWV3cG9ydCBpcyBvdGhlciB0aGFuIHdpbmRvdyByZWNhbGN1bGF0ZSB0aGUgdG9wLFxuICAvLyBib3R0b20sbGVmdCBhbmQgcmlnaHQgd3J0IHRoZSBuZXcgdmlld3BvcnRcbiAgLy8gdGhlIFtvYmplY3QgRE9NV2luZG93XSBjaGVjayBpcyBmb3Igd2luZG93IG9iamVjdCB0eXBlIGluIFBoYW50b21KU1xuICBpZiAoJHZpZXdwb3J0WzBdICE9PSB3aW5kb3cgJiYgdHlwZW9mVmlld3BvcnQgIT09ICdbb2JqZWN0IFdpbmRvd10nICYmIHR5cGVvZlZpZXdwb3J0ICE9PSAnW29iamVjdCBET01XaW5kb3ddJykge1xuICAgIC8vIHVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBpbnN0ZWFkIG9mICQuT2Zmc2V0KClcbiAgICAvLyBzaW5jZSB0aGUgb3JpZ2luYWwgdG9wL2JvdHRvbSBwb3NpdGlvbnMgYXJlIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8gYnJvd3NlciB2aWV3cG9ydCBhbmQgbm90IGRvY3VtZW50XG4gICAgdmFyIHZpZXdwb3J0UmVjdCA9ICR2aWV3cG9ydFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIC8vIHJlY2FsY3VsYXRlIHRoZXNlIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG4gICAgdG9wID0gdG9wIC0gdmlld3BvcnRSZWN0LnRvcDtcbiAgICBib3R0b20gPSBib3R0b20gLSB2aWV3cG9ydFJlY3QudG9wO1xuICAgIGxlZnQgPSBsZWZ0IC0gdmlld3BvcnRSZWN0LmxlZnQ7XG4gICAgcmlnaHQgPSByaWdodCAtIHZpZXdwb3J0UmVjdC5sZWZ0O1xuXG4gICAgLy8gZ2V0IHRoZSBzY3JvbGxiYXIgd2lkdGggZnJvbSBjYWNoZSBvciBjYWxjdWxhdGUgaXRcbiAgICBpc0luVmlld3BvcnQuc2Nyb2xsQmFyV2lkdGggPSBpc0luVmlld3BvcnQuc2Nyb2xsQmFyV2lkdGggfHwgZ2V0U2Nyb2xsYmFyV2lkdGgoJHZpZXdwb3J0KTtcblxuICAgIC8vIHJlbW92ZSB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbGJhciBmcm9tIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICR2aWV3cG9ydFdpZHRoIC09IGlzSW5WaWV3cG9ydC5zY3JvbGxCYXJXaWR0aDtcbiAgfVxuXG4gIC8vIGhhbmRsZSBmYWxzeSwgbm9uLW51bWJlciBhbmQgbm9uLWludGVnZXIgdG9sZXJhbmNlIHZhbHVlXG4gIC8vIHNhbWUgYXMgY2hlY2tpbmcgdXNpbmcgaXNOYU4gYW5kIHRoZW4gc2V0dGluZyB0byAwXG4gIC8vIGJpdHdpc2Ugb3BlcmF0b3JzIGRlc2VydmUgc29tZSBsb3ZlIHRvbyB5b3Uga25vd1xuICBzZXR0aW5ncy50b2xlcmFuY2UgPSB+fk1hdGgucm91bmQocGFyc2VGbG9hdChzZXR0aW5ncy50b2xlcmFuY2UpKTtcblxuICBpZiAoc2V0dGluZ3MudG9sZXJhbmNlIDwgMCkge1xuICAgIHNldHRpbmdzLnRvbGVyYW5jZSA9ICR2aWV3cG9ydEhlaWdodCArIHNldHRpbmdzLnRvbGVyYW5jZTsgLy8gdmlld3BvcnQgaGVpZ2h0IC0gdG9sXG4gIH1cblxuICAvLyB0aGUgZWxlbWVudCBpcyBOT1QgaW4gdmlld3BvcnQgaWZmIGl0IGlzIGNvbXBsZXRlbHkgb3V0IG9mXG4gIC8vIHZpZXdwb3J0IGxhdGVyYWxseSBvciBpZiBpdCBpcyBjb21wbGV0ZWx5IG91dCBvZiB0aGUgdG9sZXJhbmNlXG4gIC8vIHJlZ2lvbi4gVGhlcmVmb3JlLCBpZiBpdCBpcyBwYXJ0aWFsbHkgaW4gdmlldyB0aGVuIGl0IGlzIGNvbnNpZGVyZWRcbiAgLy8gdG8gYmUgaW4gdGhlIHZpZXdwb3J0IGFuZCBoZW5jZSB0cnVlIGlzIHJldHVybmVkLiBCZWNhdXNlIHdlIGhhdmUgYWRqdXN0ZWRcbiAgLy8gdGhlIGxlZnQvcmlnaHQgcG9zaXRpb25zIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydCwgd2Ugc2hvdWxkIGNoZWNrIHRoZVxuICAvLyBlbGVtZW50J3MgcmlnaHQgYWdhaW5zdCB0aGUgdmlld3BvcnQncyAwIChsZWZ0IHNpZGUpLCBhbmQgdGhlIGVsZW1lbnQnc1xuICAvLyBsZWZ0IGFnYWluc3QgdGhlIHZpZXdwb3J0J3Mgd2lkdGggdG8gc2VlIGlmIGl0IGlzIG91dHNpZGUgb2YgdGhlIHZpZXdwb3J0LlxuXG4gIGlmIChyaWdodCA8PSAwIHx8IGxlZnQgPj0gJHZpZXdwb3J0V2lkdGgpIHtcbiAgICByZXR1cm4gaXNWaXNpYmxlRmxhZ1xuICB9XG5cbiAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgYm91bmQgdG8gc29tZSB0b2xlcmFuY2VcbiAgaXNWaXNpYmxlRmxhZyA9IHNldHRpbmdzLnRvbGVyYW5jZSA/IHRvcCA8PSBzZXR0aW5ncy50b2xlcmFuY2UgJiYgYm90dG9tID49IHNldHRpbmdzLnRvbGVyYW5jZSA6IGJvdHRvbSA+IDAgJiYgdG9wIDw9ICR2aWV3cG9ydEhlaWdodDtcblxuICByZXR1cm4gaXNWaXNpYmxlRmxhZ1xufVxuXG5cbi8vIGdldCB0aGUgc2VsZWN0b3IgYXJncyBmcm9tIHRoZSBhcmdzIHN0cmluZyBwcm92ZWQgYnkgU2l6emxlXG5mdW5jdGlvbiBnZXRTZWxlY3RvckFyZ3MoYXJnc1N0cmluZykge1xuICBpZiAoYXJnc1N0cmluZykge1xuICAgIHZhciBhcmdzID0gYXJnc1N0cmluZy5zcGxpdCgnLCcpO1xuXG4gICAgLy8gd2hlbiB1c2VyIG9ubHkgZ2l2ZXMgdmlld3BvcnQgYW5kIG5vIHRvbGVyYW5jZVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc05hTihhcmdzWzBdKSkge1xuICAgICAgYXJnc1sxXSA9IGFyZ3NbMF07XG4gICAgICBhcmdzWzBdID0gdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0b2xlcmFuY2U6IGFyZ3NbMF0gPyBhcmdzWzBdLnRyaW0oKSA6IHZvaWQgMCxcbiAgICAgIHZpZXdwb3J0OiBhcmdzWzFdID8gJChhcmdzWzFdLnRyaW0oKSkgOiB2b2lkIDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt9XG59XG5cbn0pKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW5WaWV3cG9ydC5qcy5tYXBcbiJdfQ==
